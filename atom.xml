<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>江东的笔记</title>
  
  <subtitle>Be overcome difficulties is victory</subtitle>
  <link href="https://du2279664786.github.io/atom.xml" rel="self"/>
  
  <link href="https://du2279664786.github.io/"/>
  <updated>2022-10-18T09:07:23.306Z</updated>
  <id>https://du2279664786.github.io/</id>
  
  <author>
    <name>江东</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://du2279664786.github.io/2022/10/18/2022-04-26Pytorch%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E7%9A%84%E8%AF%A6%E7%BB%86%E5%AE%9E%E7%8E%B0/"/>
    <id>https://du2279664786.github.io/2022/10/18/2022-04-26Pytorch%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E7%9A%84%E8%AF%A6%E7%BB%86%E5%AE%9E%E7%8E%B0/</id>
    <published>2022-10-18T09:06:23.661Z</published>
    <updated>2022-10-18T09:07:23.306Z</updated>
    
    <content type="html"><![CDATA[<hr><p>title: Pytorch线性回归的详细实现<br>date: 2022-04-26 22:55:10<br>categories: 深度学习<br>tags: [深度学习,线性回归]</p><hr><p>创建单层神经⽹络</p><span id="more"></span><h2 id="线性回归-单层神经网络"><a href="#线性回归-单层神经网络" class="headerlink" title="线性回归-单层神经网络"></a>线性回归-单层神经网络</h2><p>线性回归是⼀个单层神经⽹络<br><img src="https://img-blog.csdnimg.cn/590a40befa164375b9ceb587cda58445.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5rGfIOS4nA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>&amp;emsp;输⼊分别为x1和x2，因此输⼊层的输⼊个数为2,输⼊个数也叫特征数或<br>特征向量维度,输出层的输出个数为1,输出层中的神经元和输⼊层中各个输⼊完全连<br>接,因此，这⾥的输出层⼜叫全连接层,即一个简单地线性回归。<br>&amp;emsp;假设我们有三个预测数据：<br><img src="https://img-blog.csdnimg.cn/e73f69360b1d4f4b90360de495dac343.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5rGfIOS4nA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>转化为矩阵运算：<br><img src="https://img-blog.csdnimg.cn/eec385599fc3439c90c79ebce9737f30.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5rGfIOS4nA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>即<br><img src="https://img-blog.csdnimg.cn/10cf121677624495bc8ad82f4f203933.png" alt="在这里插入图片描述"></p><h2 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h2><p>首先导入所需要的包：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br></pre></td></tr></table></figure><p>生成数据集：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">num_input = <span class="number">2</span></span><br><span class="line">num_example = <span class="number">1000</span>   <span class="comment"># 1000条样本</span></span><br><span class="line"><span class="comment"># 定义标准的参数</span></span><br><span class="line">true_w = [<span class="number">2</span>, -<span class="number">3.4</span>]   </span><br><span class="line">true_b = <span class="number">4.2</span></span><br><span class="line">np.random.seed(<span class="number">2012</span>)</span><br><span class="line">features = torch.tensor(np.random.normal(<span class="number">0</span>,<span class="number">1</span>,(<span class="number">1000</span>,<span class="number">2</span>)))</span><br><span class="line"><span class="comment"># 构造标签</span></span><br><span class="line">labels = true_w[<span class="number">0</span>] * features[:, <span class="number">0</span>] + true_w[<span class="number">1</span>] * features[:, <span class="number">1</span>] +true_b</span><br><span class="line">labels += torch.from_numpy(np.random.normal(<span class="number">0</span>, <span class="number">0.01</span>,size=labels.size()))</span><br><span class="line"><span class="built_in">print</span>(features,labels)</span><br></pre></td></tr></table></figure><p>数据的读取：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">data_item</span>(<span class="params">bach_size,features,labels</span>):</span><br><span class="line">    num_examples = <span class="built_in">len</span>(features)</span><br><span class="line">    indices = <span class="built_in">list</span>(<span class="built_in">range</span>(num_examples))</span><br><span class="line">    random.shuffle(indices) <span class="comment"># 样本的读取顺序是随机的</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, num_examples, bach_size):</span><br><span class="line">        j = torch.LongTensor(indices[i: <span class="built_in">min</span>(i + bach_size,num_examples)]) <span class="comment"># 最后⼀次可能不⾜⼀个batch</span></span><br><span class="line">        <span class="keyword">yield</span> features.index_select(<span class="number">0</span>, j), labels.index_select(<span class="number">0</span>, j)</span><br></pre></td></tr></table></figure><p>随机初始化模型参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">w = torch.tensor(np.random.normal(<span class="number">0</span>, <span class="number">0.01</span>, (num_input, <span class="number">1</span>)),dtype=torch.double) </span><br><span class="line">b = torch.zeros(<span class="number">1</span>, dtype=torch.double)</span><br><span class="line">w.requires_grad = <span class="literal">True</span>     <span class="comment"># 定义为可求梯度</span></span><br><span class="line">b.requires_grad = <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>定义线性回归函数，使⽤ mm 函数(矩阵相乘)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">linear</span>(<span class="params">x,w,b</span>):</span><br><span class="line">    <span class="keyword">return</span> torch.mm(x,w)+b</span><br></pre></td></tr></table></figure><p>定义损失函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">loss</span>(<span class="params">y_hat, y</span>): <span class="comment"># 本函数已保存在d2lzh_pytorch包中⽅便以后使⽤</span></span><br><span class="line">    <span class="keyword">return</span> (y_hat - y.view(y_hat.size())) ** <span class="number">2</span> / <span class="number">2</span></span><br></pre></td></tr></table></figure><p>定义优化函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">SGD</span>(<span class="params">params, lr, batch_size</span>): <span class="comment"># 本函数已保存在d2lzh_pytorch包中⽅便以后使⽤</span></span><br><span class="line">    <span class="keyword">for</span> param <span class="keyword">in</span> params:</span><br><span class="line">        param.data -= lr * param.grad / batch_size <span class="comment"># 修改的的param.data</span></span><br></pre></td></tr></table></figure><p>训练模型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">lr = <span class="number">0.03</span></span><br><span class="line">bach_size = <span class="number">30</span></span><br><span class="line">net = linear</span><br><span class="line">loss = loss</span><br><span class="line">num_epochs = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(num_epochs):</span><br><span class="line">    <span class="keyword">for</span> x,y <span class="keyword">in</span> data_item(bach_size=bach_size,features=features,labels=labels):</span><br><span class="line">        los = loss(linear(x,w,b),y).<span class="built_in">sum</span>()</span><br><span class="line">        los.backward()</span><br><span class="line">        </span><br><span class="line">        SGD([w,b],lr=lr,batch_size=bach_size)</span><br><span class="line"><span class="comment">#         print(b)</span></span><br><span class="line">        w.grad.zero_()</span><br><span class="line">        b.grad.zero_()</span><br><span class="line">    train_l = loss(net(features, w, b), labels)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;epoch %d, loss %f&#x27;</span> % (epoch + <span class="number">1</span>, train_l.mean().item()))</span><br><span class="line"><span class="built_in">print</span>(true_w, <span class="string">&#x27;\n&#x27;</span>, w)</span><br><span class="line"><span class="built_in">print</span>(true_b, <span class="string">&#x27;\n&#x27;</span>, b)</span><br></pre></td></tr></table></figure><p>喜欢文章可以点赞收藏，欢迎关注，如有错误请指正！</p>]]></content>
    
    
    <summary type="html">&lt;hr&gt;
&lt;p&gt;title: Pytorch线性回归的详细实现&lt;br&gt;date: 2022-04-26 22:55:10&lt;br&gt;categories: 深度学习&lt;br&gt;tags: [深度学习,线性回归]&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;创建单层神经⽹络&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://du2279664786.github.io/2022/10/18/2021-11-29python%E8%AF%BB%E5%8F%96word%E6%96%87%E6%A1%A3/"/>
    <id>https://du2279664786.github.io/2022/10/18/2021-11-29python%E8%AF%BB%E5%8F%96word%E6%96%87%E6%A1%A3/</id>
    <published>2022-10-18T08:54:17.350Z</published>
    <updated>2022-10-18T08:55:22.894Z</updated>
    
    <content type="html"><![CDATA[<hr><p>title: python读取word文档<br>date: 2021-11-29 22:55:10<br>categories: 机器学习<br>tags: [机器学习,逻辑回归]</p><hr><p>读取文章并输出各级标题</p><span id="more"></span><h2 id="读取文件内容"><a href="#读取文件内容" class="headerlink" title="读取文件内容"></a>读取文件内容</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> docx <span class="keyword">import</span> Document</span><br><span class="line">file = Document(<span class="string">&quot;E:\\File\\大一\\大一下学期/马克思.docx&quot;</span>)</span><br></pre></td></tr></table></figure><p>我们直接输出文章内容是不可以的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(file)</span><br><span class="line"><span class="comment"># &lt;docx.document.Document object at 0x000002686EE048C0&gt;</span></span><br></pre></td></tr></table></figure><p>我们可以使用循环的方式进行输出text文本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输出内容</span></span><br><span class="line"><span class="keyword">for</span> run <span class="keyword">in</span> file.paragraphs:</span><br><span class="line">    <span class="built_in">print</span>(run.text)</span><br></pre></td></tr></table></figure><h2 id="输出文章的标题"><a href="#输出文章的标题" class="headerlink" title="输出文章的标题"></a>输出文章的标题</h2><h3 id="输出文章的1级标题"><a href="#输出文章的1级标题" class="headerlink" title="输出文章的1级标题"></a>输出文章的1级标题</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> run <span class="keyword">in</span> file.paragraphs:</span><br><span class="line">    <span class="keyword">if</span> run.style.name == <span class="string">&quot;Heading 1&quot;</span>:    <span class="comment"># &#x27;Heading 2&#x27; 表示二级标题...</span></span><br><span class="line">        <span class="built_in">print</span>(run.text)</span><br></pre></td></tr></table></figure><h3 id="输出文章的多级标题"><a href="#输出文章的多级标题" class="headerlink" title="输出文章的多级标题"></a>输出文章的多级标题</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输出所有标题</span></span><br><span class="line"><span class="keyword">for</span> run <span class="keyword">in</span> file.paragraphs:</span><br><span class="line">    <span class="keyword">if</span> re.<span class="keyword">match</span>(<span class="string">&#x27;^Heading \d+$&#x27;</span>, run.style.name):</span><br><span class="line">        <span class="built_in">print</span>(run.text)</span><br></pre></td></tr></table></figure><h2 id="输出正文"><a href="#输出正文" class="headerlink" title="输出正文"></a>输出正文</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输出正文</span></span><br><span class="line"><span class="keyword">for</span> run <span class="keyword">in</span> file.paragraphs:</span><br><span class="line">    <span class="keyword">if</span> run.style.name == <span class="string">&quot;Normal&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(run.text)</span><br></pre></td></tr></table></figure><h2 id="输出段落内容："><a href="#输出段落内容：" class="headerlink" title="输出段落内容："></a>输出段落内容：</h2><h3 id="输出一段的内容"><a href="#输出一段的内容" class="headerlink" title="输出一段的内容"></a>输出一段的内容</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file.paragraphs[<span class="number">0</span>].text</span><br><span class="line"><span class="comment"># 如果该段为空格或者其他非段落内容，则输出这一行</span></span><br></pre></td></tr></table></figure><h3 id="输出所有段落的内容"><a href="#输出所有段落的内容" class="headerlink" title="输出所有段落的内容"></a>输出所有段落的内容</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(file.paragraphs)):</span><br><span class="line">    <span class="built_in">print</span>(i, file.paragraphs[<span class="number">0</span>].text)</span><br></pre></td></tr></table></figure><h2 id="保存文章"><a href="#保存文章" class="headerlink" title="保存文章"></a>保存文章</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file.save(<span class="string">&quot;E:/aa.docx&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;hr&gt;
&lt;p&gt;title: python读取word文档&lt;br&gt;date: 2021-11-29 22:55:10&lt;br&gt;categories: 机器学习&lt;br&gt;tags: [机器学习,逻辑回归]&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;读取文章并输出各级标题&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://du2279664786.github.io/2022/10/15/hello-world/"/>
    <id>https://du2279664786.github.io/2022/10/15/hello-world/</id>
    <published>2022-10-15T03:00:57.930Z</published>
    <updated>2022-10-16T13:51:48.053Z</updated>
    
    <content type="html"><![CDATA[<p>大家好，这是我的第一篇文章，欢迎查看！</p><span id="more"></span><div id="binft"></div>  <script>    var binft = function (r) {      function t() {        return b[Math.floor(Math.random() * b.length)]      }        function e() {        return String.fromCharCode(94 * Math.random() + 33)      }      function n(r) {        for (var n = document.createDocumentFragment(), i = 0; r > i; i++) {          var l = document.createElement("span");          l.textContent = e(), l.style.color = t(), n.appendChild(l)        }        return n      }      function i() {        var t = o[c.skillI];        c.step ? c.step-- : (c.step = g, c.prefixP < l.length ? (c.prefixP >= 0 && (c.text += l[c.prefixP]), c.prefixP++) : "forward" === c.direction ? c.skillP < t.length ? (c.text += t[c.skillP], c.skillP++) : c.delay ? c.delay-- : (c.direction = "backward", c.delay = a) : c.skillP > 0 ? (c.text = c.text.slice(0, -1), c.skillP--) : (c.skillI = (c.skillI + 1) % o.length, c.direction = "forward")), r.textContent = c.text, r.appendChild(n(c.prefixP < l.length ? Math.min(s, s + c.prefixP) : Math.min(s, t.length - c.skillP))), setTimeout(i, d)      }      var l = "",      o = ["青青陵上柏，磊磊涧中石。", "人生天地间，忽如远行客。","斗酒相娱乐，聊厚不为薄。", "驱车策驽马，游戏宛与洛。","洛中何郁郁，冠带自相索。","长衢罗夹巷，王侯多第宅。","两宫遥相望，双阙百余尺。","极宴娱心意，戚戚何所迫？"].map(function (r) {      return r + ""      }),      a = 2,      g = 1,      s = 5,      d = 75,      b = ["rgb(110,64,170)", "rgb(150,61,179)", "rgb(191,60,175)", "rgb(228,65,157)", "rgb(254,75,131)", "rgb(255,94,99)", "rgb(255,120,71)", "rgb(251,150,51)", "rgb(226,183,47)", "rgb(198,214,60)", "rgb(175,240,91)", "rgb(127,246,88)", "rgb(82,246,103)", "rgb(48,239,130)", "rgb(29,223,163)", "rgb(26,199,194)", "rgb(35,171,216)", "rgb(54,140,225)", "rgb(76,110,219)", "rgb(96,84,200)"],      c = {        text: "",        prefixP: -s,        skillI: 0,        skillP: 0,        direction: "forward",        delay: a,        step: g      };      i()      };      binft(document.getElementById('binft'));  </script><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;大家好，这是我的第一篇文章，欢迎查看！&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>SOFTMAX回归模型</title>
    <link href="https://du2279664786.github.io/2022/05/08/2022-05-08SOFTMAX%E5%9B%9E%E5%BD%92%E6%A8%A1%E5%9E%8B/"/>
    <id>https://du2279664786.github.io/2022/05/08/2022-05-08SOFTMAX%E5%9B%9E%E5%BD%92%E6%A8%A1%E5%9E%8B/</id>
    <published>2022-05-08T14:55:10.000Z</published>
    <updated>2022-10-18T09:14:53.067Z</updated>
    
    <content type="html"><![CDATA[<p>SOFTMAX函数的脉络梳理</p><span id="more"></span><p>2022-05-08SOFTMAX回归模型</p><h2 id="什么是SOFTMAX回归函数"><a href="#什么是SOFTMAX回归函数" class="headerlink" title="什么是SOFTMAX回归函数"></a>什么是SOFTMAX回归函数</h2><p>·softmax回归跟线性回归⼀样将输⼊特征与权᯿做线性叠加<br>·与线性回归的⼀个主要不同在于，softmax回归的输出值个数等于标签⾥的类别数<br>·SOFTMAX是一个单层的神经网络<br>结构图如下：<br><img src="https://img-blog.csdnimg.cn/1eef7cdde9b04e1d866471e374b3a80b.png" alt="在这里插入图片描述"><br>运算过程如下：<br><img src="https://img-blog.csdnimg.cn/4e928316894e4e298b9e71c18598fbd1.png" alt="在这里插入图片描述"><br>即我们通过神经网络预测，然后得到相应的一个分数，此时我们希望我们得到的分数是一个概率：<br><img src="https://img-blog.csdnimg.cn/c16934676c254f119005ddefbb0d5164.png" alt="在这里插入图片描述"><br>此时我们就应该选取一个合适的方案，来将预测的分数来转化为标签的概率，那么最合适的肯定是softmax了，softmax公式：<br><img src="https://img-blog.csdnimg.cn/df4b36ec76f44413b348ad2917c4d399.png" alt="在这里插入图片描述"><br>即将得到的分数都进行exp，然后求每个标签占比(概率)，最终我们得到的是预测概率最大的标签：<br><img src="https://img-blog.csdnimg.cn/656cab1ab05b4020ac06c14f0ea28951.png" alt="在这里插入图片描述"><br>很显然，我们只关注预测概率最大的标签（单标签预测）<br>总结了一下特性：<br>    ·结果都为正数：即将得分为负数的进行转化<br>    ·所有求和为1：所有概率相加等于1<br>    ·平移不变性：所有得分平移得到的结果不受影响<br>    ·最大–&gt;最大：预测得分最大的概率也大</p><h2 id="交叉熵损失函数"><a href="#交叉熵损失函数" class="headerlink" title="交叉熵损失函数"></a>交叉熵损失函数</h2><p>在这里我们使用的是交叉熵损失函数（Cross Entropy）<br><img src="https://img-blog.csdnimg.cn/eded5e651bfd471dada59239dc2b6c9d.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/cf23b1b754ab4f3eae57f49f5f12b0f1.png" alt="其中带下标的是向量 中⾮0即1的元素"></p><h2 id="实现代码："><a href="#实现代码：" class="headerlink" title="实现代码："></a>实现代码：</h2><p>·导入包：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> init</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">&quot;..&quot;</span>)</span><br><span class="line"><span class="keyword">import</span> d2lzh_pytorch <span class="keyword">as</span> d2l</span><br></pre></td></tr></table></figure><p>若出现没有‘d2lzh_pytorch’这个包，<a href="https://blog.csdn.net/weixin_51756104/article/details/124626354?spm=1001.2014.3001.5501">点击此处离线安装</a><br>·导入数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">batch_size = <span class="number">256</span></span><br><span class="line">train_iter, test_iter = d2l.load_data_fashion_mnist(batch_size)</span><br></pre></td></tr></table></figure><p>·定义网络：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">num_inputs = <span class="number">784</span></span><br><span class="line">num_outputs = <span class="number">10</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinearNet</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, num_inputs, num_outputs</span>):</span><br><span class="line">        <span class="built_in">super</span>(LinearNet, self).__init__()</span><br><span class="line">        self.linear = nn.Linear(num_inputs, num_outputs)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>): <span class="comment"># x shape: (batch, 1, 28, 28)</span></span><br><span class="line">        y = self.linear(x.view(x.shape[<span class="number">0</span>], -<span class="number">1</span>))</span><br><span class="line">        <span class="keyword">return</span> y</span><br><span class="line"> </span><br><span class="line">net = LinearNet(num_inputs,num_outputs)</span><br></pre></td></tr></table></figure><p>·初始化模型参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">init.normal_(net.linear.weight, mean=<span class="number">0</span>, std=<span class="number">0.01</span>)</span><br><span class="line">init.constant_(net.linear.bias, val=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>·定义损失函数和优化器：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">loss = nn.CrossEntropyLoss()</span><br><span class="line"></span><br><span class="line">optimizer = torch.optim.SGD(net.parameters(), lr=<span class="number">0.1</span>)</span><br></pre></td></tr></table></figure><p>·训练：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">num_epochs = <span class="number">5</span></span><br><span class="line">d2l.train_ch3(net, train_iter, test_iter, loss, num_epochs,batch_size, <span class="literal">None</span>, <span class="literal">None</span>, optimizer)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;SOFTMAX函数的脉络梳理&lt;/p&gt;</summary>
    
    
    
    <category term="深度学习" scheme="https://du2279664786.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="深度学习" scheme="https://du2279664786.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="SOFTMAX" scheme="https://du2279664786.github.io/tags/SOFTMAX/"/>
    
  </entry>
  
  <entry>
    <title>d2lzh_pytorch包离线安装</title>
    <link href="https://du2279664786.github.io/2022/05/07/2022-05-07d2lzh_pytorch%E5%8C%85%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85/"/>
    <id>https://du2279664786.github.io/2022/05/07/2022-05-07d2lzh_pytorch%E5%8C%85%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85/</id>
    <published>2022-05-07T14:55:10.000Z</published>
    <updated>2022-10-18T09:12:51.207Z</updated>
    
    <content type="html"><![CDATA[<p>线上安装经常出错，所以可以选择离线安装</p><span id="more"></span><p>在导入d2lzh_pytorch包时，一般会报错：<br><img src="https://img-blog.csdnimg.cn/56f5ff1ee876479e9707f06a234a04dd.png" alt="在这里插入图片描述"><br>我们可以离线下载包：<br>链接：<a href="https://pan.baidu.com/share/init?surl=iXyFqY8uM5PGhrthL_-9xQ#list/path=/">点击此处</a>，提取码：1314<br>下载后：进入到我们要使用的环境，按照如下位置安放包<br><img src="https://img-blog.csdnimg.cn/79fcfef8196a43c8bb122b712b2dce9d.png" alt="在这里插入图片描述"><br>最后就可以导入了：<br><img src="https://img-blog.csdnimg.cn/4c3b27ce6aa9488494f97a336101d894.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;线上安装经常出错，所以可以选择离线安装&lt;/p&gt;</summary>
    
    
    
    <category term="深度学习" scheme="https://du2279664786.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="深度学习" scheme="https://du2279664786.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="d2lzh_pytorch包离线安装" scheme="https://du2279664786.github.io/tags/d2lzh-pytorch%E5%8C%85%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>线性回归的简洁实现</title>
    <link href="https://du2279664786.github.io/2022/04/28/2022-04-28%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E7%9A%84%E7%AE%80%E6%B4%81%E5%AE%9E%E7%8E%B0/"/>
    <id>https://du2279664786.github.io/2022/04/28/2022-04-28%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E7%9A%84%E7%AE%80%E6%B4%81%E5%AE%9E%E7%8E%B0/</id>
    <published>2022-04-28T14:55:10.000Z</published>
    <updated>2022-10-18T09:11:02.360Z</updated>
    
    <content type="html"><![CDATA[<p>创建单层神经网络</p><span id="more"></span><p>线性回归详细实现，<a href="https://blog.csdn.net/weixin_51756104/article/details/124334225">请点击此处</a></p><h3 id="导入包："><a href="#导入包：" class="headerlink" title="导入包："></a>导入包：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> torch.utils.data <span class="keyword">as</span> Data    <span class="comment"># 数据读取</span></span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> init     <span class="comment"># 初始化</span></span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim   <span class="comment"># 优化器</span></span><br></pre></td></tr></table></figure><h3 id="数据集的生成"><a href="#数据集的生成" class="headerlink" title="数据集的生成"></a>数据集的生成</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">num_inputs = <span class="number">2</span>     <span class="comment"># 2个维度</span></span><br><span class="line">num_examples = <span class="number">1000</span>     <span class="comment"># 1000调数据</span></span><br><span class="line"><span class="comment"># 标准的参数</span></span><br><span class="line">true_w = [<span class="number">2</span>, -<span class="number">3.4</span>]</span><br><span class="line">true_b = <span class="number">4.2</span></span><br><span class="line">features = torch.tensor(np.random.normal(<span class="number">0</span>, <span class="number">1</span>, (num_examples,num_inputs)), dtype=torch.<span class="built_in">float</span>)</span><br><span class="line">label = true_w[<span class="number">0</span>] * features[:, <span class="number">0</span>] + true_w[<span class="number">1</span>] * features[:, <span class="number">1</span>] +true_b</span><br><span class="line">label += torch.tensor(np.random.normal(<span class="number">0</span>, <span class="number">0.01</span>,size=label.size()), dtype=torch.<span class="built_in">float</span>)</span><br></pre></td></tr></table></figure><h3 id="数据的读取"><a href="#数据的读取" class="headerlink" title="数据的读取"></a>数据的读取</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">batch_size = <span class="number">30</span></span><br><span class="line">dataset = Data.TensorDataset(features,label)</span><br><span class="line">data_it = Data.DataLoader(dataset,batch_size,shuffle =<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="定义模型"><a href="#定义模型" class="headerlink" title="定义模型"></a>定义模型</h3><p>定义模型有多种方法：<br>方法一：继承nn.Module</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LinearNet</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,n_feature</span>):</span><br><span class="line">        <span class="built_in">super</span>(LinearNet, self).__init__()</span><br><span class="line">        self.linear = nn.Linear(n_feature,<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        y = self.linear(x)</span><br><span class="line">        <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line">net = LinearNet(num_inputs)</span><br><span class="line"><span class="keyword">for</span> param <span class="keyword">in</span> net.parameters():</span><br><span class="line">    <span class="built_in">print</span>(param)</span><br></pre></td></tr></table></figure><p>方法二：nn.Sequential</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">net = nn.Sequential(</span><br><span class="line">    nn.Linear(num_inputs, <span class="number">1</span>)</span><br><span class="line"> )</span><br></pre></td></tr></table></figure><p>方法三：nn.Sequential()+add_module</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net = nn.Sequential()</span><br><span class="line">net.add_module(<span class="string">&#x27;linear&#x27;</span>, nn.Linear(num_inputs, <span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>方法四：导入OrderedDict</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line">net = nn.Sequential(OrderedDict([</span><br><span class="line">    (<span class="string">&#x27;linear&#x27;</span>, nn.Linear(num_inputs, <span class="number">1</span>))]))</span><br></pre></td></tr></table></figure><h3 id="初始化模型参数"><a href="#初始化模型参数" class="headerlink" title="初始化模型参数"></a>初始化模型参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">init.normal_(net[<span class="number">0</span>].weight, mean=<span class="number">0</span>, std=<span class="number">0.01</span>)</span><br><span class="line">init.constant_(net[<span class="number">0</span>].bias,val=<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="MSE损失函数"><a href="#MSE损失函数" class="headerlink" title="MSE损失函数"></a>MSE损失函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">loss = nn.MSELoss()</span><br></pre></td></tr></table></figure><h3 id="定义优化算法"><a href="#定义优化算法" class="headerlink" title="定义优化算法"></a>定义优化算法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">optimizer = optim.SGD(net.parameters(), lr=<span class="number">0.03</span>)</span><br></pre></td></tr></table></figure><h3 id="模型的优化"><a href="#模型的优化" class="headerlink" title="模型的优化"></a>模型的优化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">num_epochs = <span class="number">3</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, num_epochs + <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> X, y <span class="keyword">in</span> data_it:</span><br><span class="line">        output = net(X)</span><br><span class="line">        l = loss(output, y.view(-<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">        optimizer.zero_grad() <span class="comment"># 梯度清零，等价于net.zero_grad()</span></span><br><span class="line">        l.backward()</span><br><span class="line">        optimizer.step()</span><br><span class="line">    <span class="built_in">print</span>(epoch, l.item())</span><br></pre></td></tr></table></figure><p>最后输出epoch和loss：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">0.3572668433189392</span></span><br><span class="line"><span class="number">2</span> <span class="number">0.005662666633725166</span></span><br><span class="line"><span class="number">3</span> <span class="number">0.00011592111695790663</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>喜欢文章可以点赞收藏，欢迎关注，如有错误请指正！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;创建单层神经网络&lt;/p&gt;</summary>
    
    
    
    <category term="深度学习" scheme="https://du2279664786.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="pytorch" scheme="https://du2279664786.github.io/tags/pytorch/"/>
    
    <category term="深度学习" scheme="https://du2279664786.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>史上最详细的Pytorch+CUDA+CUDNN的安装(GPU版)</title>
    <link href="https://du2279664786.github.io/2022/04/27/2022-04-27%E5%8F%B2%E4%B8%8A%E6%9C%80%E8%AF%A6%E7%BB%86%E7%9A%84Pytorch+CUDA+CUDNN%E7%9A%84%E5%AE%89%E8%A3%85(GPU%E7%89%88)/"/>
    <id>https://du2279664786.github.io/2022/04/27/2022-04-27%E5%8F%B2%E4%B8%8A%E6%9C%80%E8%AF%A6%E7%BB%86%E7%9A%84Pytorch+CUDA+CUDNN%E7%9A%84%E5%AE%89%E8%A3%85(GPU%E7%89%88)/</id>
    <published>2022-04-27T14:55:10.000Z</published>
    <updated>2022-10-18T09:09:30.930Z</updated>
    
    <content type="html"><![CDATA[<p>炒鸡详细的pytorch GPU安装版本，从0搭建！</p><span id="more"></span><p>CPU版本的教程<a href="https://blog.csdn.net/weixin_51756104/article/details/124222546">请点击此处查看</a></p><h3 id="首先看一下自己的驱动："><a href="#首先看一下自己的驱动：" class="headerlink" title="首先看一下自己的驱动："></a>首先看一下自己的驱动：</h3><p>·如果驱动不支持CUDA11的话就要先更新驱动<br>·打开命令行win+r，输入cmd，在命令行输入：nvidia-smi   查看信息<br><img src="https://img-blog.csdnimg.cn/f1d12b1f1cb24e11a5e70143ef5c1195.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5rGfIOS4nA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>这里可以看到我的驱动是512.2，根据下图可以看到驱动只要大于451.22就支持CUDA11，,pytorch最新本已经不支持CUDA10,如果驱动版本低于451,可以升级驱动，<a href="https://www.nvidia.com/en-us/geforce/drivers/">点击此处下载驱动</a>，下面是CUDA和显卡驱动对应的版本：<br><img src="https://img-blog.csdnimg.cn/ea404a8d657e418eaa0ab409ba8386f7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5rGfIOS4nA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="安装Pytorch"><a href="#安装Pytorch" class="headerlink" title="安装Pytorch"></a>安装Pytorch</h3><p>此处使用的是本地安装(因为pip安装和conda安装本人都没有成功，可能是网络问题),<a href="https://download.pytorch.org/whl/torch_stable.html">点击此处</a>进行Pytorch的下载：可以看到我的CUDA是11.6版本：<br><img src="https://img-blog.csdnimg.cn/06c6e268cdfa4a2da9224cb2ba7f9b48.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5rGfIOS4nA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们进入下载pytorch的网站，发现还没有CUDA11.6版本，我们可以下载CUDA11.5版本，<br>cu115代表CUDA11.5版本，cp38代表python的版本，选择合适的进行下载，我下载的是CUDA11.5版本，Python版本3.8,所以我们选择：<br><img src="https://img-blog.csdnimg.cn/ac64598e145c4b3b943c9516ba7df188.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5rGfIOS4nA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>同理我们再选择torchvison和torchaudio的下载，下载完成后进行本地安装：使用pip install+安装包的路径安装，我的在D盘：<br><img src="https://img-blog.csdnimg.cn/5e018a995bc3415faf2ccdb8be245aa7.png" alt="："><br>此时我们就可以检测一下是否安装成功：<br><img src="https://img-blog.csdnimg.cn/2c27cd5cb5084ae3a502032a12bd7316.png" alt="在这里插入图片描述">可以看到已经成功了！！！</p><h3 id="CUDA安装"><a href="#CUDA安装" class="headerlink" title="CUDA安装"></a>CUDA安装</h3><p><a href="https://developer.nvidia.com/cuda-toolkit-archive">点击此处</a>，进入下载，选择合适自己的版本：<br><img src="https://img-blog.csdnimg.cn/91fb78d977294a21ae0068b7f1eb8234.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5rGfIOS4nA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>选择好信息开始下载：<br><img src="https://img-blog.csdnimg.cn/5b0e8251a48640f9b1490f335f916d84.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5rGfIOS4nA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>点击安装包，一路默认安装就行</p><h3 id="CUDNN安装"><a href="#CUDNN安装" class="headerlink" title="CUDNN安装"></a>CUDNN安装</h3><p><a href="https://developer.nvidia.com/rdp/cudnn-download">点击此处</a>，自行注册账号</p><p><img src="https://img-blog.csdnimg.cn/fcc85c8aeb184e60bf7f1899a3d3e681.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5rGfIOS4nA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>然后点击下载：需要填写调查问卷，点击提交<br><img src="https://img-blog.csdnimg.cn/55be6915942542f2b7e61f587a44e4fa.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5rGfIOS4nA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>找到相应的版本：<br><img src="https://img-blog.csdnimg.cn/84f7be9ba3e74a5bb4566b39b57ea958.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5rGfIOS4nA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>这里我的是windows CUDA11.6，所以我下载windows版本的压缩包<br><img src="https://img-blog.csdnimg.cn/cb5883133ef64418adefffb76c9aebfa.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5rGfIOS4nA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>下载完进行解压：<br><img src="https://img-blog.csdnimg.cn/69864e29e15c46afa22218a9edb63b6e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5rGfIOS4nA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>然后找到我们CUDA11.6的位置，默认安装的在：C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA<br><img src="https://img-blog.csdnimg.cn/70e4ce0c5ba84be48fd10eecd82524af.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5rGfIOS4nA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>然后我们找到刚刚解压的cudnn文件夹<br><img src="https://img-blog.csdnimg.cn/87f93e9696584e929c591d283fc883c2.png" alt="在这里插入图片描述"><br>将bin，include，lib文件夹下里面的‘文件’分别复制到CUDA相应的文件夹里面（复制的是里面的的文件，不是文件夹）：<br><img src="https://img-blog.csdnimg.cn/69d6624d180c40d999de7c7aa76bc6dc.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5rGfIOS4nA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="查看是否安装成功"><a href="#查看是否安装成功" class="headerlink" title="查看是否安装成功"></a>查看是否安装成功</h3><p>·查看CUDA，在命令行输入：nvcc -V，出现以下代表成功：<br><img src="https://img-blog.csdnimg.cn/2bf5e7e797224b03aa842149bab8c4cf.png" alt="在这里插入图片描述"><br>·查看cudnn，我们在命令行进入安装cuda的目录，我的是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11<span class="number">.6</span>\extras\demo_suite</span><br></pre></td></tr></table></figure><p>然后在命令行进入文件夹：<br><img src="https://img-blog.csdnimg.cn/3be6ef8c961743acad34f275013dcd1d.png" alt="在这里插入图片描述"><br>输入：bandwidthTest.exe<br><img src="https://img-blog.csdnimg.cn/c5722a063f564e788682cd13491f759a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5rGfIOS4nA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>输入：deviceQuery.exe<br><img src="https://img-blog.csdnimg.cn/cc1b0f43a5944f03b12627fd3738dc74.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5rGfIOS4nA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>表示安装成功！！！<br>喜欢文章可以点赞收藏，欢迎关注，如有错误请指正！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;炒鸡详细的pytorch GPU安装版本，从0搭建！&lt;/p&gt;</summary>
    
    
    
    <category term="深度学习" scheme="https://du2279664786.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="pytorch" scheme="https://du2279664786.github.io/tags/pytorch/"/>
    
    <category term="深度学习" scheme="https://du2279664786.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="CUDA" scheme="https://du2279664786.github.io/tags/CUDA/"/>
    
  </entry>
  
  <entry>
    <title>Pytorch自动求梯度</title>
    <link href="https://du2279664786.github.io/2022/04/19/2022-04-19Pytorch%E8%87%AA%E5%8A%A8%E6%B1%82%E6%A2%AF%E5%BA%A6/"/>
    <id>https://du2279664786.github.io/2022/04/19/2022-04-19Pytorch%E8%87%AA%E5%8A%A8%E6%B1%82%E6%A2%AF%E5%BA%A6/</id>
    <published>2022-04-19T14:55:10.000Z</published>
    <updated>2022-10-18T09:06:00.494Z</updated>
    
    <content type="html"><![CDATA[<p>创建Tensor的几种方式</p><span id="more"></span><h1 id="微分"><a href="#微分" class="headerlink" title="微分"></a>微分</h1><p>通常我们见到的微分方法有两种：<br>·符号微分法：<br><img src="https://img-blog.csdnimg.cn/bbaa997b4ed34967a69068ebfa46d97d.png" alt="在这里插入图片描述"><br>·数值微分法：<br><img src="https://img-blog.csdnimg.cn/ac854fda494b48c1825b1c860dc258f8.png" alt="∂f(x)/∂x=lim┬ℎ→0f(x+ℎ)−f(x)/ℎ"></p><h1 id="Pytorch自动微分"><a href="#Pytorch自动微分" class="headerlink" title="Pytorch自动微分"></a>Pytorch自动微分</h1><p>对于一个Tensor，如果它的属性requires_grad 设置为 True，它将开始追<br>踪(track)在其上的所有操作<br>我们定义一个初始的tensor并且requires_grad 设置为 True：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = torch.ones(<span class="number">2</span>, <span class="number">2</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tensor([[<span class="number">1.</span>, <span class="number">1.</span>],</span><br><span class="line">        [<span class="number">1.</span>, <span class="number">1.</span>]], requires_grad=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>此时，我们在x的基础上进行运算：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">y = x + <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(y)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tensor([[<span class="number">3.</span>, <span class="number">3.</span>],</span><br><span class="line">        [<span class="number">3.</span>, <span class="number">3.</span>]], grad_fn=&lt;AddBackward0&gt;)</span><br><span class="line"><span class="comment"># grad_fn属性代表y是否由运算得来</span></span><br></pre></td></tr></table></figure><p>此时我们就可以进一步运算：out &#x3D;（x+2）**2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">z = y * y * <span class="number">3</span></span><br><span class="line">out = z.mean()</span><br><span class="line"><span class="built_in">print</span>(z, out)</span><br></pre></td></tr></table></figure><p>反向传播：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">out.backward() <span class="comment"># 等价于 out.backward(torch.tensor(1.))</span></span><br></pre></td></tr></table></figure><p>此时我们就可以输出x的梯度：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(x.grad)</span><br></pre></td></tr></table></figure><p>注意：grad在反向传播过程中是累加的(accumulated)，这意味着每⼀次运⾏反向传播，梯度都会累加之前的梯度，所以⼀般在反向传播之前需把梯度清零</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tensor([[<span class="number">4.5000</span>, <span class="number">4.5000</span>],</span><br><span class="line">        [<span class="number">4.5000</span>, <span class="number">4.5000</span>]])</span><br></pre></td></tr></table></figure><p>为什么会输出这个值呢？接下来看一下过程：<br>我们可以写出out的等式：<br><img src="https://img-blog.csdnimg.cn/8aee7ec7069c4ea5b5e54a8fcaf7d344.png" alt="在这里插入图片描述"><br>此时我们求o关于x的偏导：<br><img src="https://img-blog.csdnimg.cn/d01a2a217b0146faa398d2a078b6f8df.png" alt="在这里插入图片描述"><br>那么我们在在进行求梯度时为什么要求out的梯度呢？为什么最后要z.mean()呢？<br>很显然我们直接y.backward()会报错<img src="https://img-blog.csdnimg.cn/812ca92f731f4290909e9d92c40502a0.png" alt="在这里插入图片描述"></p><p>这是因为：在 y.backward() 时，如果 y 是标量，则不需要为 backward() 传⼊任何参数；否则，需要传⼊⼀个与 y 同形的 Tensor 。<br>在pytorch中：不允许张量对张量求导，只允许标量对张量求导，求导结果是和⾃变量同形的张量。所以必要时我们要把张量通过将所有张量的元素加权求和的方式转换为标量<br>接下来看一个实际的栗子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = torch.tensor([<span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>, <span class="number">4.0</span>], requires_grad=<span class="literal">True</span>) </span><br><span class="line">y = <span class="number">2</span> * x </span><br><span class="line"><span class="built_in">print</span>(y)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tensor([<span class="number">2.</span>, <span class="number">4.</span>, <span class="number">6.</span>, <span class="number">8.</span>], grad_fn=&lt;MulBackward0&gt;)</span><br></pre></td></tr></table></figure><p>此时我们直接y.backward()会报错，因为y不是标量，所以我们按照要求应该传入一个同形的张量，作为权重：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t = torch.tensor([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">y.backward(t)</span><br><span class="line"><span class="built_in">print</span>(x.grad)</span><br></pre></td></tr></table></figure><p>d(y) &#x3D; 2<br>求导的同时也应该乘以相应的权重t &#x3D; torch.tensor([1,2,3,4])，所以最后输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tensor([<span class="number">2.</span>, <span class="number">4.</span>, <span class="number">6.</span>, <span class="number">8.</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>喜欢文章可以点赞收藏，欢迎关注，如有错误请指正！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;创建Tensor的几种方式&lt;/p&gt;</summary>
    
    
    
    <category term="深度学习" scheme="https://du2279664786.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="深度学习" scheme="https://du2279664786.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="梯度" scheme="https://du2279664786.github.io/tags/%E6%A2%AF%E5%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>Pytorch中Tensor的创建</title>
    <link href="https://du2279664786.github.io/2022/04/17/2022-04-17Pytorch%E4%B8%ADTensor%E7%9A%84%E5%88%9B%E5%BB%BA/"/>
    <id>https://du2279664786.github.io/2022/04/17/2022-04-17Pytorch%E4%B8%ADTensor%E7%9A%84%E5%88%9B%E5%BB%BA/</id>
    <published>2022-04-17T14:55:10.000Z</published>
    <updated>2022-10-18T09:04:24.850Z</updated>
    
    <content type="html"><![CDATA[<p>创建Tensor的几种方式</p><span id="more"></span><h1 id="创建Tensor"><a href="#创建Tensor" class="headerlink" title="创建Tensor"></a>创建Tensor</h1><h3 id="创建一个5行3列未初始化的tensor"><a href="#创建一个5行3列未初始化的tensor" class="headerlink" title="创建一个5行3列未初始化的tensor"></a>创建一个5行3列未初始化的tensor</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = torch.empty(<span class="number">5</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tensor([[<span class="number">1.0194e-38</span>, <span class="number">1.0469e-38</span>, <span class="number">1.0010e-38</span>],</span><br><span class="line">        [<span class="number">8.9081e-39</span>, <span class="number">8.9082e-39</span>, <span class="number">5.9694e-39</span>],</span><br><span class="line">        [<span class="number">8.9082e-39</span>, <span class="number">1.0194e-38</span>, <span class="number">9.1837e-39</span>],</span><br><span class="line">        [<span class="number">4.6837e-39</span>, <span class="number">9.2755e-39</span>, <span class="number">1.0837e-38</span>],</span><br><span class="line">        [<span class="number">8.4490e-39</span>, <span class="number">1.1112e-38</span>, <span class="number">1.0194e-38</span>]])</span><br></pre></td></tr></table></figure><h3 id="创建一个5行3列随机初始化的tensor："><a href="#创建一个5行3列随机初始化的tensor：" class="headerlink" title="创建一个5行3列随机初始化的tensor："></a>创建一个5行3列随机初始化的tensor：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = torch.rand(<span class="number">5</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tensor([[<span class="number">0.5911</span>, <span class="number">0.9191</span>, <span class="number">0.9826</span>],</span><br><span class="line">        [<span class="number">0.4801</span>, <span class="number">0.1648</span>, <span class="number">0.8578</span>],</span><br><span class="line">        [<span class="number">0.9937</span>, <span class="number">0.8051</span>, <span class="number">0.6952</span>],</span><br><span class="line">        [<span class="number">0.9682</span>, <span class="number">0.1975</span>, <span class="number">0.1151</span>],</span><br><span class="line">        [<span class="number">0.2434</span>, <span class="number">0.2917</span>, <span class="number">0.7866</span>]])</span><br></pre></td></tr></table></figure><h3 id="创建Tensor还可以指定数据类型：创建一个5行3列的类型为long的全0数据"><a href="#创建Tensor还可以指定数据类型：创建一个5行3列的类型为long的全0数据" class="headerlink" title="创建Tensor还可以指定数据类型：创建一个5行3列的类型为long的全0数据"></a>创建Tensor还可以指定数据类型：创建一个5行3列的类型为long的全0数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = torch.zeros(<span class="number">5</span>, <span class="number">3</span>, dtype=torch.long)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tensor([[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]])</span><br></pre></td></tr></table></figure><h3 id="直接输入数据进行创建tensor："><a href="#直接输入数据进行创建tensor：" class="headerlink" title="直接输入数据进行创建tensor："></a>直接输入数据进行创建tensor：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = torch.tensor([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tensor([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure><h3 id="根据现有的tensor创建新的tensor："><a href="#根据现有的tensor创建新的tensor：" class="headerlink" title="根据现有的tensor创建新的tensor："></a>根据现有的tensor创建新的tensor：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = torch.randn_like(x,dtype = torch.float64)</span><br><span class="line">x</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tensor([[-<span class="number">0.6669</span>,  <span class="number">0.5308</span>,  <span class="number">1.5981</span>],</span><br><span class="line">        [ <span class="number">1.2061</span>,  <span class="number">0.6624</span>, -<span class="number">0.4535</span>],</span><br><span class="line">        [-<span class="number">0.5667</span>, -<span class="number">0.8755</span>, -<span class="number">2.1078</span>],</span><br><span class="line">        [-<span class="number">3.0560</span>, -<span class="number">0.6035</span>,  <span class="number">0.7990</span>],</span><br><span class="line">        [-<span class="number">0.3979</span>, -<span class="number">1.3582</span>, -<span class="number">0.8427</span>]], dtype=torch.float64)</span><br></pre></td></tr></table></figure><h3 id="2根据numpy创建新的tensor："><a href="#2根据numpy创建新的tensor：" class="headerlink" title="2根据numpy创建新的tensor："></a>2根据numpy创建新的tensor：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tensor转化为array</span></span><br><span class="line">a = torch.ones(<span class="number">5</span>,<span class="number">3</span>)</span><br><span class="line">b = a.numpy()</span><br><span class="line">b</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">array([[<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>],</span><br><span class="line">       [<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>],</span><br><span class="line">       [<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>],</span><br><span class="line">       [<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>],</span><br><span class="line">       [<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>]], dtype=float32)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将array转化为tensor</span></span><br><span class="line">x = torch.from_numpy(b)</span><br><span class="line">x</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tensor([[<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>],</span><br><span class="line">        [<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>],</span><br><span class="line">        [<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>],</span><br><span class="line">        [<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>],</span><br><span class="line">        [<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>]])</span><br></pre></td></tr></table></figure><p>不过要注意的是：无论是array转化为tensor，还是tensor转化为array，他们都是和原来的数据共享内存的，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">b+=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="number">2.</span> <span class="number">2.</span> <span class="number">2.</span>]</span><br><span class="line"> [<span class="number">2.</span> <span class="number">2.</span> <span class="number">2.</span>]</span><br><span class="line"> [<span class="number">2.</span> <span class="number">2.</span> <span class="number">2.</span>]</span><br><span class="line"> [<span class="number">2.</span> <span class="number">2.</span> <span class="number">2.</span>]</span><br><span class="line"> [<span class="number">2.</span> <span class="number">2.</span> <span class="number">2.</span>]]</span><br><span class="line">tensor([[<span class="number">2.</span>, <span class="number">2.</span>, <span class="number">2.</span>],</span><br><span class="line">        [<span class="number">2.</span>, <span class="number">2.</span>, <span class="number">2.</span>],</span><br><span class="line">        [<span class="number">2.</span>, <span class="number">2.</span>, <span class="number">2.</span>],</span><br><span class="line">        [<span class="number">2.</span>, <span class="number">2.</span>, <span class="number">2.</span>],</span><br><span class="line">        [<span class="number">2.</span>, <span class="number">2.</span>, <span class="number">2.</span>]])</span><br><span class="line"><span class="comment"># b的数值发生变化，x的数值也发生变化，需要注意</span></span><br></pre></td></tr></table></figure><p>更多详情请查看<a href="https://pytorch.org/docs/stable/tensors.html">官方文档</a><br>喜欢文章可以点赞收藏，欢迎关注，如有错误请指正！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;创建Tensor的几种方式&lt;/p&gt;</summary>
    
    
    
    <category term="深度学习" scheme="https://du2279664786.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="pytorch" scheme="https://du2279664786.github.io/tags/pytorch/"/>
    
    <category term="深度学习" scheme="https://du2279664786.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>使用anacond prompt安装pytorch(CPU版)</title>
    <link href="https://du2279664786.github.io/2022/04/16/2022-04-16%E4%BD%BF%E7%94%A8anacond%20prompt%E5%AE%89%E8%A3%85pytorch(CPU%E7%89%88)/"/>
    <id>https://du2279664786.github.io/2022/04/16/2022-04-16%E4%BD%BF%E7%94%A8anacond%20prompt%E5%AE%89%E8%A3%85pytorch(CPU%E7%89%88)/</id>
    <published>2022-04-16T14:55:10.000Z</published>
    <updated>2022-10-18T09:02:26.645Z</updated>
    
    <content type="html"><![CDATA[<p>利用anaconda搭建一个新环境并安装CPU版本的pytorch</p><span id="more"></span><h1 id="使用anacond-prompt安装pytorch"><a href="#使用anacond-prompt安装pytorch" class="headerlink" title="使用anacond prompt安装pytorch"></a>使用anacond prompt安装pytorch</h1><p>GPU版本的教程<a href="https://blog.csdn.net/weixin_51756104/article/details/124398722?spm=1001.2014.3001.5501">请点击此处查看</a><br>·首先去anaconda<a href="https://www.anaconda.com/">官网</a>安装anaconda，然后打开anaconda prompt（pycharm配置环境略过）：<br>在命令行输入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Conda create –n pytorch python=<span class="number">3.8</span></span><br></pre></td></tr></table></figure><p>来创建一个关于pytorch的单独环境<br>这里的‘pytorch’是环境名称，python&#x3D;3.8是版本，都可以根据需求自行修改<br>然后就可以进入我们创建好的虚拟环境：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">activate pytorch</span><br></pre></td></tr></table></figure><p>然后我们可以切换一下源：切换源能够更快的下载 包<br>配置清华源，在命令行输入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/</span><br><span class="line">conda config --<span class="built_in">set</span> show_channel_urls yes</span><br></pre></td></tr></table></figure><p>然后一切准备工作做好之后，接下来开始安装pytorch，在命令行输入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install pytorch torchvision torchaudio cpuonly -c pytorch   </span><br></pre></td></tr></table></figure><p>输入之后等待一会再输入‘y’（确认下载）<br>最后在命令行输入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="built_in">list</span></span><br></pre></td></tr></table></figure><p>然后会列出这个环境所有的包，可以查看有没有‘torch’<br><img src="https://img-blog.csdnimg.cn/dc71bab57e4141bab8c166d8686d310d.png" alt="休闲就"><br>出现torch就代表成功了！<br>欢迎关注作者，有什么问题可以一起讨论！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;利用anaconda搭建一个新环境并安装CPU版本的pytorch&lt;/p&gt;</summary>
    
    
    
    <category term="深度学习" scheme="https://du2279664786.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="机器学习" scheme="https://du2279664786.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="pytorch" scheme="https://du2279664786.github.io/tags/pytorch/"/>
    
  </entry>
  
  <entry>
    <title>快速安装python包</title>
    <link href="https://du2279664786.github.io/2021/12/08/2021-12-08%E5%BF%AB%E9%80%9F%E5%AE%89%E8%A3%85python%E5%8C%85/"/>
    <id>https://du2279664786.github.io/2021/12/08/2021-12-08%E5%BF%AB%E9%80%9F%E5%AE%89%E8%A3%85python%E5%8C%85/</id>
    <published>2021-12-08T14:55:10.000Z</published>
    <updated>2022-10-18T08:58:45.854Z</updated>
    
    <content type="html"><![CDATA[<p>使用源快速安装python包</p><span id="more"></span><p>使用以下代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple    </span><br></pre></td></tr></table></figure><p>在最后加上你要安装的包，就OK了<br>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pandas</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用源快速安装python包&lt;/p&gt;</summary>
    
    
    
    <category term="机器学习" scheme="https://du2279664786.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="机器学习" scheme="https://du2279664786.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="逻辑回归" scheme="https://du2279664786.github.io/tags/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>Python修改论文的字体及其大小</title>
    <link href="https://du2279664786.github.io/2021/12/01/2021-12-1Python%E4%BF%AE%E6%94%B9%E8%AE%BA%E6%96%87%E7%9A%84%E5%AD%97%E4%BD%93%E5%8F%8A%E5%85%B6%E5%A4%A7%E5%B0%8F/"/>
    <id>https://du2279664786.github.io/2021/12/01/2021-12-1Python%E4%BF%AE%E6%94%B9%E8%AE%BA%E6%96%87%E7%9A%84%E5%AD%97%E4%BD%93%E5%8F%8A%E5%85%B6%E5%A4%A7%E5%B0%8F/</id>
    <published>2021-12-01T14:55:10.000Z</published>
    <updated>2022-10-18T08:57:16.043Z</updated>
    
    <content type="html"><![CDATA[<p>使用python读取数据并修改文章字体相关格式和大小</p><span id="more"></span><h2 id="对标题的格式修改"><a href="#对标题的格式修改" class="headerlink" title="对标题的格式修改"></a>对标题的格式修改</h2><p>·首先是导入包和读取word文档</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> docx <span class="keyword">import</span> Document</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> docx.shared <span class="keyword">import</span> Pt, RGBColor  <span class="comment"># 字号，颜色</span></span><br><span class="line"><span class="keyword">from</span> docx.oxml.ns <span class="keyword">import</span> qn  <span class="comment"># 中文字体</span></span><br><span class="line"></span><br><span class="line">file = Document(<span class="string">&quot;E:\\File\\大一\\大一下学期/马克思.docx&quot;</span>)</span><br></pre></td></tr></table></figure><p>然后对字体进行修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> run <span class="keyword">in</span> file.paragraphs:</span><br><span class="line">    <span class="keyword">if</span> re.<span class="keyword">match</span>(<span class="string">&#x27;^Heading \d+$&#x27;</span>, run.style.name):   <span class="comment"># 找出所有标题</span></span><br><span class="line">        <span class="keyword">for</span> kuai <span class="keyword">in</span> run.runs:</span><br><span class="line">            kuai._element.rPr.rFonts.<span class="built_in">set</span>(qn(<span class="string">&#x27;w:eastAsia&#x27;</span>), <span class="string">&#x27;黑体&#x27;</span>)</span><br><span class="line">            kuai.font.size = Pt(<span class="number">42</span>)   <span class="comment"># 修改字号</span></span><br><span class="line">            kuai.font.bold = <span class="literal">True</span>  <span class="comment"># 加粗</span></span><br></pre></td></tr></table></figure><h2 id="对文章内容对修改"><a href="#对文章内容对修改" class="headerlink" title="对文章内容对修改"></a>对文章内容对修改</h2><p>·对正文的修改：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> run <span class="keyword">in</span> file.paragraphs:</span><br><span class="line">    <span class="keyword">if</span> run.style.name == <span class="string">&quot;Normal&quot;</span>:</span><br><span class="line">        <span class="keyword">for</span> kuai <span class="keyword">in</span> run.runs:</span><br><span class="line">            kuai._element.rPr.rFonts.<span class="built_in">set</span>(qn(<span class="string">&#x27;w:eastAsia&#x27;</span>), <span class="string">&#x27;黑体&#x27;</span>)</span><br><span class="line">            kuai.font.size = Pt(<span class="number">42</span>)</span><br><span class="line">            <span class="built_in">print</span>(run.text)</span><br></pre></td></tr></table></figure><p>由于是对整篇论文进行修改，所以又改变了一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">title = []    <span class="comment"># 存入非段落内容数据</span></span><br><span class="line"><span class="keyword">for</span> run <span class="keyword">in</span> file.paragraphs:</span><br><span class="line">    <span class="keyword">if</span> re.<span class="keyword">match</span>(<span class="string">&#x27;^Heading \d+$&#x27;</span>, run.style.name):</span><br><span class="line">        title.append(run.text)</span><br><span class="line">    <span class="keyword">elif</span> run.style.name == <span class="string">&quot;Normal&quot;</span>:</span><br><span class="line">        title.append(run.text)</span><br><span class="line"><span class="keyword">for</span> run <span class="keyword">in</span> file.paragraphs:</span><br><span class="line">    <span class="keyword">if</span> run.text <span class="keyword">not</span> <span class="keyword">in</span> title:</span><br><span class="line">        <span class="keyword">for</span> kuai <span class="keyword">in</span> run.runs:</span><br><span class="line">            <span class="keyword">if</span> kuai.text <span class="keyword">not</span> <span class="keyword">in</span> title:</span><br><span class="line">                <span class="built_in">print</span>(kuai)</span><br><span class="line">                <span class="comment"># kuai.font.size = Pt(42)</span></span><br><span class="line">                kuai.font.color.rgb = RGBColor(<span class="number">200</span>, <span class="number">100</span> , <span class="number">200</span>)</span><br><span class="line">                <span class="comment"># kuai.font.name = &#x27;Arial&#x27;</span></span><br><span class="line">                <span class="comment"># kuai._element.rPr.rFonts.set(qn(&#x27;w:eastAsia&#x27;),&#x27;黑体&#x27;)</span></span><br></pre></td></tr></table></figure><p>最后不要忘记保存文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file.save(<span class="string">&quot;E:/aa.docx&quot;</span>)</span><br></pre></td></tr></table></figure><p>(在设计全文数据库系统项目中，将论文进行最后的标准化)</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用python读取数据并修改文章字体相关格式和大小&lt;/p&gt;</summary>
    
    
    
    <category term="Python办公自动化" scheme="https://du2279664786.github.io/categories/Python%E5%8A%9E%E5%85%AC%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
    
    <category term="Python办公自动化" scheme="https://du2279664786.github.io/tags/Python%E5%8A%9E%E5%85%AC%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>KNN实现手写字体的识别</title>
    <link href="https://du2279664786.github.io/2021/11/28/2021-11-28KNN%E5%AE%9E%E7%8E%B0%E6%89%8B%E5%86%99%E5%AD%97%E4%BD%93%E7%9A%84%E8%AF%86%E5%88%AB/"/>
    <id>https://du2279664786.github.io/2021/11/28/2021-11-28KNN%E5%AE%9E%E7%8E%B0%E6%89%8B%E5%86%99%E5%AD%97%E4%BD%93%E7%9A%84%E8%AF%86%E5%88%AB/</id>
    <published>2021-11-28T14:55:10.000Z</published>
    <updated>2022-10-18T08:53:55.560Z</updated>
    
    <content type="html"><![CDATA[<p>KNN实现对digits数据集分类</p><span id="more"></span><h2 id="KNN算法介绍："><a href="#KNN算法介绍：" class="headerlink" title="KNN算法介绍："></a>KNN算法介绍：</h2><p><a href="https://blog.csdn.net/weixin_51756104/article/details/120393059">点击这里查看KNN算法代码及其介绍</a></p><h2 id="数据的导入："><a href="#数据的导入：" class="headerlink" title="数据的导入："></a>数据的导入：</h2><h3 id="导入包"><a href="#导入包" class="headerlink" title="导入包"></a>导入包</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure><h3 id="导入数据集"><a href="#导入数据集" class="headerlink" title="导入数据集"></a>导入数据集</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 手写字体的数据集导入</span></span><br><span class="line">digtis = datasets.load_digits()</span><br><span class="line">target = digtis.target</span><br><span class="line">data = digtis.data</span><br></pre></td></tr></table></figure><h2 id="数据集介绍："><a href="#数据集介绍：" class="headerlink" title="数据集介绍："></a>数据集介绍：</h2><p>数据集情况：1797条数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data.shape, target.shape</span><br><span class="line"><span class="comment"># (1797, 64), (1797,))</span></span><br></pre></td></tr></table></figure><p>对于导入的数据集data里面的每个数据的形状是(64,)，我们可以将其转化为8X8像素的数据，将第一个数据进行可视化展示：<br>形状转换：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ima = data[<span class="number">0</span>].reshape(<span class="number">8</span>, <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">Out：</span><br><span class="line">array([[ <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">5.</span>, <span class="number">13.</span>,  <span class="number">9.</span>,  <span class="number">1.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>],</span><br><span class="line">       [ <span class="number">0.</span>,  <span class="number">0.</span>, <span class="number">13.</span>, <span class="number">15.</span>, <span class="number">10.</span>, <span class="number">15.</span>,  <span class="number">5.</span>,  <span class="number">0.</span>],</span><br><span class="line">       [ <span class="number">0.</span>,  <span class="number">3.</span>, <span class="number">15.</span>,  <span class="number">2.</span>,  <span class="number">0.</span>, <span class="number">11.</span>,  <span class="number">8.</span>,  <span class="number">0.</span>],</span><br><span class="line">       [ <span class="number">0.</span>,  <span class="number">4.</span>, <span class="number">12.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">8.</span>,  <span class="number">8.</span>,  <span class="number">0.</span>],</span><br><span class="line">       [ <span class="number">0.</span>,  <span class="number">5.</span>,  <span class="number">8.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">9.</span>,  <span class="number">8.</span>,  <span class="number">0.</span>],</span><br><span class="line">       [ <span class="number">0.</span>,  <span class="number">4.</span>, <span class="number">11.</span>,  <span class="number">0.</span>,  <span class="number">1.</span>, <span class="number">12.</span>,  <span class="number">7.</span>,  <span class="number">0.</span>],</span><br><span class="line">       [ <span class="number">0.</span>,  <span class="number">2.</span>, <span class="number">14.</span>,  <span class="number">5.</span>, <span class="number">10.</span>, <span class="number">12.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>],</span><br><span class="line">       [ <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">6.</span>, <span class="number">13.</span>, <span class="number">10.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>]])</span><br></pre></td></tr></table></figure><p>可视化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.imshow(ima)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/9266273c20ce45b6baf6ddc299ce7eb9.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bCP55qu6bq76Iqx,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="数据集的分割："><a href="#数据集的分割：" class="headerlink" title="数据集的分割："></a>数据集的分割：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x_train, x_test, y_train, y_test = train_test_split(data, target, test_size=<span class="number">0.2</span>, random_state=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="定义KNN函数："><a href="#定义KNN函数：" class="headerlink" title="定义KNN函数："></a>定义KNN函数：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">knn_code</span>(<span class="params">loc, k=<span class="number">5</span>, order=<span class="number">2</span></span>):  <span class="comment"># k order是超参</span></span><br><span class="line">    <span class="comment"># print(order)</span></span><br><span class="line">    diff_loc = x_train - loc</span><br><span class="line">    dis_loc = np.linalg.norm(diff_loc, <span class="built_in">ord</span>=order, axis=<span class="number">1</span>)  <span class="comment"># 没有axis得到一个数，矩阵的泛数。axis=0，得到两个数</span></span><br><span class="line">    knn = y_train[dis_loc.argsort()[:k]]</span><br><span class="line">    counts = np.bincount(knn)</span><br><span class="line">    <span class="keyword">return</span> np.argmax(counts)</span><br></pre></td></tr></table></figure><h2 id="评估准确率："><a href="#评估准确率：" class="headerlink" title="评估准确率："></a>评估准确率：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">res = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> x_test:</span><br><span class="line">    res.append(knn_code(i))</span><br><span class="line"></span><br><span class="line">acc = ((y_test == pd.Series(res))==<span class="literal">True</span>).<span class="built_in">sum</span>()/<span class="built_in">len</span>(y_test)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;准确率：&quot;</span>, acc)</span><br><span class="line"><span class="comment"># 准确率： 0.9944444444444445</span></span><br></pre></td></tr></table></figure><h2 id="完整代码："><a href="#完整代码：" class="headerlink" title="完整代码："></a>完整代码：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># datetime:2021/11/22 22:54</span></span><br><span class="line"><span class="comment"># software: PyCharm</span></span><br><span class="line"><span class="comment"># 导入包</span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 手写字体的数据集导入</span></span><br><span class="line">digtis = datasets.load_digits()</span><br><span class="line">target = digtis.target</span><br><span class="line">data = digtis.data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可视化展示</span></span><br><span class="line">ima = data[<span class="number">0</span>].reshape(<span class="number">8</span>, <span class="number">8</span>)</span><br><span class="line">plt.imshow(ima)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据集分割</span></span><br><span class="line">x_train, x_test, y_train, y_test = train_test_split(data, target, test_size=<span class="number">0.2</span>, random_state=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># KNN函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">knn_code</span>(<span class="params">loc, k=<span class="number">5</span>, order=<span class="number">2</span></span>):  <span class="comment"># k order是超参</span></span><br><span class="line">    <span class="comment"># print(order)</span></span><br><span class="line">    diff_loc = x_train - loc</span><br><span class="line">    dis_loc = np.linalg.norm(diff_loc, <span class="built_in">ord</span>=order, axis=<span class="number">1</span>)  <span class="comment"># 没有axis得到一个数，矩阵的泛数。axis=0，得到两个数</span></span><br><span class="line">    knn = y_train[dis_loc.argsort()[:k]]</span><br><span class="line">    counts = np.bincount(knn)</span><br><span class="line">    <span class="keyword">return</span> np.argmax(counts)</span><br><span class="line"></span><br><span class="line"><span class="comment"># acc</span></span><br><span class="line">res = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> x_test:</span><br><span class="line">    res.append(knn_code(i))</span><br><span class="line"></span><br><span class="line">acc = ((y_test == pd.Series(res))==<span class="literal">True</span>).<span class="built_in">sum</span>()/<span class="built_in">len</span>(y_test)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;准确率：&quot;</span>, acc)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;KNN实现对digits数据集分类&lt;/p&gt;</summary>
    
    
    
    <category term="机器学习" scheme="https://du2279664786.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="机器学习" scheme="https://du2279664786.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="KNN" scheme="https://du2279664786.github.io/tags/KNN/"/>
    
  </entry>
  
  <entry>
    <title>判断两篇文章的相似度</title>
    <link href="https://du2279664786.github.io/2021/11/27/2021-11-27%E5%88%A4%E6%96%AD%E4%B8%A4%E7%AF%87%E6%96%87%E7%AB%A0%E7%9A%84%E7%9B%B8%E4%BC%BC%E5%BA%A6/"/>
    <id>https://du2279664786.github.io/2021/11/27/2021-11-27%E5%88%A4%E6%96%AD%E4%B8%A4%E7%AF%87%E6%96%87%E7%AB%A0%E7%9A%84%E7%9B%B8%E4%BC%BC%E5%BA%A6/</id>
    <published>2021-11-27T14:55:10.000Z</published>
    <updated>2022-10-18T08:52:08.499Z</updated>
    
    <content type="html"><![CDATA[<p>textrank:将待抽取关键词的文本进行分词,以固定窗口大小，词之间的共现关系，构建图</p><span id="more"></span><h2 id="基于jieba-关键字提取的方法"><a href="#基于jieba-关键字提取的方法" class="headerlink" title="基于jieba 关键字提取的方法"></a>基于jieba 关键字提取的方法</h2><h3 id="textrank"><a href="#textrank" class="headerlink" title="textrank"></a>textrank</h3><p> 1，将待抽取关键词的文本进行分词<br> 2，以固定窗口大小(默认为5，通过span属性调整)，词之间的共现关系，构建图<br> 3，计算图中节点的PageRank，注意是无向带权图</p><h3 id="·关键字的提取代码："><a href="#·关键字的提取代码：" class="headerlink" title="·关键字的提取代码："></a>·关键字的提取代码：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#textrank</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">testRank</span>(<span class="params">corpus1, corpus2</span>):</span><br><span class="line">    keywords_textrank1 = jieba.analyse.textrank(corpus1, <span class="number">15</span>)    <span class="comment"># 提取15个关键字</span></span><br><span class="line">    keywords_textrank2 = jieba.analyse.textrank(corpus2, <span class="number">15</span>)</span><br><span class="line">    <span class="keyword">return</span> keywords_textrank1, keywords_textrank2</span><br></pre></td></tr></table></figure><h3 id="tf-idf"><a href="#tf-idf" class="headerlink" title="tf-idf"></a>tf-idf</h3><p>·词频(term frequency, tf) 指的是某一个给定的词语在该文件中出现的频率<br>·你想文档频率(inverse document frequency, idf)是一个词语普遍的重要性度量，某一特定词语的idf，可以由总文件数目除以包含该词语之文件的数目，再将得到的商取以10底的对数得到<br><img src="https://img-blog.csdnimg.cn/c9ec4584d3de48f6bb3c9976f67fe01b.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/e1888228404c4d06bc1de473cabd0799.png" alt="举例"></p><h3 id="·关键字的提取代码：-1"><a href="#·关键字的提取代码：-1" class="headerlink" title="·关键字的提取代码："></a>·关键字的提取代码：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Tfidf_extract</span>(<span class="params">corpus1, corpus2</span>):</span><br><span class="line">    <span class="comment"># tf-idf</span></span><br><span class="line">    keywords_tfidf1 = jieba.analyse.extract_tags(corpus1, <span class="number">15</span>)</span><br><span class="line">    keywords_tfidf2 = jieba.analyse.extract_tags(corpus2, <span class="number">15</span>)</span><br><span class="line">    <span class="keyword">return</span> keywords_tfidf1, keywords_tfidf2</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="统计数据"><a href="#统计数据" class="headerlink" title="统计数据"></a>统计数据</h3><p>用两篇文章提取关键字的交集除关键字的并集，得到一个简单的相似度分析</p><h3 id="统计数据的代码："><a href="#统计数据的代码：" class="headerlink" title="统计数据的代码："></a>统计数据的代码：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">count_word</span>(<span class="params">A, B</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">round</span>((<span class="built_in">len</span>(<span class="built_in">set</span>(A).intersection(<span class="built_in">set</span>(B)))/<span class="built_in">len</span>(<span class="built_in">set</span>(A).union(<span class="built_in">set</span>(B)))), <span class="number">4</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="完整代码："><a href="#完整代码：" class="headerlink" title="完整代码："></a>完整代码：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># author:小皮</span></span><br><span class="line"><span class="comment"># datetime:2021/11/21 13:06</span></span><br><span class="line"><span class="comment"># software: PyCharm</span></span><br><span class="line"><span class="keyword">import</span> jieba.analyse</span><br><span class="line"></span><br><span class="line"><span class="comment">#准备语料</span></span><br><span class="line">corpus1 = <span class="string">&quot;今天是星期日，中午我买了一个鸡腿&quot;</span></span><br><span class="line">corpus2 = <span class="string">&quot;今天是星期一，中午我买了一杯可乐&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#textrank</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">testRank</span>(<span class="params">corpus1, corpus2</span>):</span><br><span class="line">    keywords_textrank1 = jieba.analyse.textrank(corpus1, <span class="number">15</span>)</span><br><span class="line">    keywords_textrank2 = jieba.analyse.textrank(corpus2, <span class="number">15</span>)</span><br><span class="line">    <span class="keyword">return</span> keywords_textrank1, keywords_textrank2</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Tfidf_extract</span>(<span class="params">corpus1, corpus2</span>):</span><br><span class="line">    <span class="comment"># tf-idf</span></span><br><span class="line">    keywords_tfidf1 = jieba.analyse.extract_tags(corpus1, <span class="number">15</span>)</span><br><span class="line">    keywords_tfidf2 = jieba.analyse.extract_tags(corpus2, <span class="number">15</span>)</span><br><span class="line">    <span class="keyword">return</span> keywords_tfidf1, keywords_tfidf2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">count_word</span>(<span class="params">A, B</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">round</span>((<span class="built_in">len</span>(<span class="built_in">set</span>(A).intersection(<span class="built_in">set</span>(B)))/<span class="built_in">len</span>(<span class="built_in">set</span>(A).union(<span class="built_in">set</span>(B)))), <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">corpus_ran1, corpus_ran2 = testRank(corpus1, corpus2)</span><br><span class="line">corpus_tif1, corpus_tif2 = Tfidf_extract(corpus1, corpus2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;相似度：&quot;</span>, count_word(corpus1, corpus2))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;相似度：&quot;</span>, count_word(corpus_tif1, corpus_tif2))</span><br><span class="line"><span class="comment"># 相似度： 0.6316</span></span><br><span class="line"><span class="comment"># 相似度： 0.25</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;textrank:将待抽取关键词的文本进行分词,以固定窗口大小，词之间的共现关系，构建图&lt;/p&gt;</summary>
    
    
    
    <category term="机器学习" scheme="https://du2279664786.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="机器学习" scheme="https://du2279664786.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="textrank" scheme="https://du2279664786.github.io/tags/textrank/"/>
    
    <category term="tf-idf" scheme="https://du2279664786.github.io/tags/tf-idf/"/>
    
  </entry>
  
  <entry>
    <title>DBSCAN聚类算法原理以及代码</title>
    <link href="https://du2279664786.github.io/2021/11/26/2021-11-26DBSCAN%E8%81%9A%E7%B1%BB%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86%E4%BB%A5%E5%8F%8A%E4%BB%A3%E7%A0%81/"/>
    <id>https://du2279664786.github.io/2021/11/26/2021-11-26DBSCAN%E8%81%9A%E7%B1%BB%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86%E4%BB%A5%E5%8F%8A%E4%BB%A3%E7%A0%81/</id>
    <published>2021-11-26T14:55:10.000Z</published>
    <updated>2022-10-18T08:49:49.037Z</updated>
    
    <content type="html"><![CDATA[<p>算法里面有两个参数，一个是半径，另一个是数量，根据半径划分范围</p><span id="more"></span><h2 id="简单理解"><a href="#简单理解" class="headerlink" title="简单理解"></a>简单理解</h2><p>算法里面有两个参数，一个是半径，另一个是数量，根据半径划分范围，在这个范围内的数据可以称为直接密度可达，然后取在这个范围内的每个数据根据半径再继续划分范围，从而达到“传播”的效果</p><h2 id="算法优点"><a href="#算法优点" class="headerlink" title="算法优点"></a>算法优点</h2><p>不需要事先知道要形成的簇类的数量。<br>可以发现任意形状的簇类。<br>对噪声敏感，更容易找到噪声</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入包</span></span><br><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> KMeans   <span class="comment"># 算法</span></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris     <span class="comment"># 数据集</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split    <span class="comment"># 数据集划分</span></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score     <span class="comment">#评估</span></span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler   <span class="comment"># 标准化</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> GridSearchCV   <span class="comment"># 交叉验证网格搜索(没用到）</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">iris = load_iris()    <span class="comment"># 加载数据集</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取特征值和目标值，目标值在这里没什么用</span></span><br><span class="line">X = iris.data[:, <span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">Y = iris.target</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据分割，测试集为0.2，随机种子2021</span></span><br><span class="line">X_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=<span class="number">0.2</span>, random_state=<span class="number">2021</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> DBSCAN</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置半径为10，最小样本量为2，训练</span></span><br><span class="line">db = DBSCAN(eps=<span class="number">0.3</span>, min_samples=<span class="number">2</span>).fit(X_train)</span><br><span class="line">labels = db.labels_</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可视化</span></span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>, <span class="number">8</span>))</span><br><span class="line">plt.scatter(X_train[:, <span class="number">0</span>], X_train[:, <span class="number">1</span>], c=labels, s=<span class="number">100</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/160822b78e04453aa8a18bcb7032f056.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bCP55qu6bq76Iqx,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;算法里面有两个参数，一个是半径，另一个是数量，根据半径划分范围&lt;/p&gt;</summary>
    
    
    
    <category term="机器学习" scheme="https://du2279664786.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="机器学习" scheme="https://du2279664786.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="DBSCAN算法" scheme="https://du2279664786.github.io/tags/DBSCAN%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Kmeans算法提升</title>
    <link href="https://du2279664786.github.io/2021/11/25/2021-11-25Kmeans%E7%AE%97%E6%B3%95%E6%8F%90%E5%8D%87/"/>
    <id>https://du2279664786.github.io/2021/11/25/2021-11-25Kmeans%E7%AE%97%E6%B3%95%E6%8F%90%E5%8D%87/</id>
    <published>2021-11-25T14:55:10.000Z</published>
    <updated>2022-10-18T08:48:12.209Z</updated>
    
    <content type="html"><![CDATA[<p>轮廓系数的值是介于 [-1,1] ，越趋近于1代表内聚度和分离度都相对较优，计算簇内不相似度a(i)</p><span id="more"></span><h1 id="K均值调包"><a href="#K均值调包" class="headerlink" title="K均值调包"></a>K均值调包</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入包</span></span><br><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> KMeans   <span class="comment"># 算法</span></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris     <span class="comment"># 数据集</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split    <span class="comment"># 数据集划分</span></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score     <span class="comment">#评估</span></span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler   <span class="comment"># 标准化</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> GridSearchCV   <span class="comment"># 交叉验证网格搜索(没用到）</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">iris = load_iris()    <span class="comment"># 加载数据集</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取特征值和目标值，目标值在这里没什么用</span></span><br><span class="line">X = iris.data[:, <span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">Y = iris.target</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据分割，测试集为0.2，随机种子2021</span></span><br><span class="line">X_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=<span class="number">0.2</span>, random_state=<span class="number">2021</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化一个估计器</span></span><br><span class="line">estimator = KMeans(n_clusters=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练模型</span></span><br><span class="line">estimator.fit(X_train)</span><br><span class="line"></span><br><span class="line">y_pre = estimator.predict(x_test)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;模型的准确率为：&quot;</span>, accuracy_score(y_test, y_pre))</span><br></pre></td></tr></table></figure><h1 id="可视化展示"><a href="#可视化展示" class="headerlink" title="可视化展示"></a>可视化展示</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入包</span></span><br><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> KMeans   <span class="comment"># 算法</span></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris     <span class="comment"># 数据集</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split    <span class="comment"># 数据集划分</span></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score     <span class="comment">#评估</span></span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler   <span class="comment"># 标准化</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> GridSearchCV   <span class="comment"># 交叉验证网格搜索(没用到）</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">iris = load_iris()    <span class="comment"># 加载数据集</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取特征值和目标值，目标值在这里没什么用</span></span><br><span class="line">X = iris.data[:, <span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">Y = iris.target</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据分割，测试集为0.2，随机种子2021</span></span><br><span class="line">X_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=<span class="number">0.2</span>, random_state=<span class="number">2021</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义了一个函数进行训练和预测</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Kmeans_fun</span>(<span class="params">k</span>):</span><br><span class="line">    <span class="comment"># 实例化一个估计器</span></span><br><span class="line">    estimator = KMeans(n_clusters=k)</span><br><span class="line">    <span class="comment"># y_pre = KMeans(n_clusters=k, random_state=2021).fit_predict(X)</span></span><br><span class="line">    estimator.fit(X_train)</span><br><span class="line">    y_pre = estimator.predict(X)</span><br><span class="line">    <span class="keyword">return</span> y_pre</span><br><span class="line"></span><br><span class="line">cou = <span class="number">1</span></span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>, <span class="number">8</span>), dpi=<span class="number">100</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">    y_pre = Kmeans_fun(i)</span><br><span class="line">    plt.subplot(<span class="number">330</span> + cou)</span><br><span class="line">    plt.scatter(X[:, <span class="number">0</span>], X[:, <span class="number">1</span>], c=y_pre)</span><br><span class="line">    cou += <span class="number">1</span></span><br><span class="line">    plt.title(<span class="string">&quot;第&#123;0&#125;个中心分类的结果&quot;</span>.<span class="built_in">format</span>(i))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/a2de566429eb4fde941251eef8b7185e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bCP55qu6bq76Iqx,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h1 id="选取最优K值"><a href="#选取最优K值" class="headerlink" title="选取最优K值"></a>选取最优K值</h1><h2 id="手肘法"><a href="#手肘法" class="headerlink" title="手肘法"></a>手肘法</h2><p>手肘发：肉眼观察K，将每个中心的E进行可视化，选取拐点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入包</span></span><br><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> KMeans   <span class="comment"># 算法</span></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris     <span class="comment"># 数据集</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split    <span class="comment"># 数据集划分</span></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score     <span class="comment">#评估</span></span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler   <span class="comment"># 标准化</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> GridSearchCV   <span class="comment"># 交叉验证网格搜索(没用到）</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">iris = load_iris()    <span class="comment"># 加载数据集</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取特征值和目标值，目标值在这里没什么用</span></span><br><span class="line">X = iris.data[:, <span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">Y = iris.target</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据分割，测试集为0.2，随机种子2021</span></span><br><span class="line">X_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=<span class="number">0.2</span>, random_state=<span class="number">2021</span>)</span><br><span class="line"></span><br><span class="line">SSE = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">10</span>):</span><br><span class="line">    estimator = KMeans(n_clusters=i)</span><br><span class="line">    estimator.fit(X_train, y_train)</span><br><span class="line">    SSE.append(estimator.inertia_)</span><br><span class="line"></span><br><span class="line">X = <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">10</span>)</span><br><span class="line">plt.scatter(X, SSE)</span><br><span class="line">plt.plot(X, SSE)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/b7c60a7fd93b49d3aef8bbf24f94bfb4.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bCP55qu6bq76Iqx,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="轮廓系数"><a href="#轮廓系数" class="headerlink" title="轮廓系数"></a>轮廓系数</h2><p>轮廓系数的值是介于 [-1,1] ，越趋近于1代表内聚度和分离度都相对较优，计算簇内不相似度a(i)(所属的簇的其他对象之间的平均距离) ：i向量到同簇内其他点不相似程度的平均值，体现凝聚，计算 簇间不相似度b(i) ：i向量到其他簇的平均不相似程度的最小值，体现分离度<br>si接近1，则说明样本i聚类合理；si接近-1，则说明样本i更应该分类到另外的簇；若si 近似为0，则说明样本i在两个簇的边界上。<br>将所有点的轮廓系数求平均，就是该聚类结果总的轮廓系数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入包</span></span><br><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> KMeans   <span class="comment"># 算法</span></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris     <span class="comment"># 数据集</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split    <span class="comment"># 数据集划分</span></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score     <span class="comment">#评估</span></span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler   <span class="comment"># 标准化</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> GridSearchCV   <span class="comment"># 交叉验证网格搜索(没用到）</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">iris = load_iris()    <span class="comment"># 加载数据集</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取特征值和目标值，目标值在这里没什么用</span></span><br><span class="line">X = iris.data[:, <span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">Y = iris.target</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据分割，测试集为0.2，随机种子2021</span></span><br><span class="line">X_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=<span class="number">0.2</span>, random_state=<span class="number">2021</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> metrics</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Kmeans_fun</span>(<span class="params">k</span>):</span><br><span class="line">    <span class="comment"># 实例化一个估计器</span></span><br><span class="line">    estimator = KMeans(n_clusters=k)</span><br><span class="line">    <span class="comment"># y_pre = KMeans(n_clusters=k, random_state=2021).fit_predict(X)</span></span><br><span class="line">    estimator.fit(X_train)</span><br><span class="line">    res = estimator.labels_</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">lis = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">100</span>):</span><br><span class="line">    res_label = Kmeans_fun(i)</span><br><span class="line">    lis.append(metrics.silhouette_score(X_train, res_label, metric=<span class="string">&#x27;euclidean&#x27;</span>, sample_size=<span class="literal">None</span>, random_state=<span class="literal">None</span>))</span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>, <span class="number">8</span>))</span><br><span class="line">plt.plot(<span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">99</span>)),lis)</span><br><span class="line">plt.xlabel(<span class="string">&quot;聚类中心的数量&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;轮廓系数&quot;</span>)</span><br><span class="line">plt.title(<span class="string">&quot;轮廓系数和聚类中心的关系&quot;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/0e61749b3ec149e08c450eea1402ae04.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bCP55qu6bq76Iqx,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>欢迎大家关注我！！！！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;轮廓系数的值是介于 [-1,1] ，越趋近于1代表内聚度和分离度都相对较优，计算簇内不相似度a(i)&lt;/p&gt;</summary>
    
    
    
    <category term="机器学习" scheme="https://du2279664786.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="机器学习" scheme="https://du2279664786.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="手肘法" scheme="https://du2279664786.github.io/tags/%E6%89%8B%E8%82%98%E6%B3%95/"/>
    
    <category term="轮廓系数" scheme="https://du2279664786.github.io/tags/%E8%BD%AE%E5%BB%93%E7%B3%BB%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>爬虫实现百度贴吧的图片爬取</title>
    <link href="https://du2279664786.github.io/2021/11/24/2021-11-24%E7%88%AC%E8%99%AB%E5%AE%9E%E7%8E%B0%E7%99%BE%E5%BA%A6%E8%B4%B4%E5%90%A7%E7%9A%84%E5%9B%BE%E7%89%87%E7%88%AC%E5%8F%96/"/>
    <id>https://du2279664786.github.io/2021/11/24/2021-11-24%E7%88%AC%E8%99%AB%E5%AE%9E%E7%8E%B0%E7%99%BE%E5%BA%A6%E8%B4%B4%E5%90%A7%E7%9A%84%E5%9B%BE%E7%89%87%E7%88%AC%E5%8F%96/</id>
    <published>2021-11-24T14:55:10.000Z</published>
    <updated>2022-10-18T08:45:09.916Z</updated>
    
    <content type="html"><![CDATA[<p>若想爬取其他的内容，需要将xpath进行修改，以及kw赋值为你想爬取的商品，并确保电脑的目录</p><span id="more"></span><h2 id="基本流程："><a href="#基本流程：" class="headerlink" title="基本流程："></a>基本流程：</h2><p>初始化要爬取的内容，然后使用requests模块进行爬取，使用xpath进行匹配，最后再将图片和详情存入文件夹里面</p><h2 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> lxml.etree</span><br><span class="line"><span class="keyword">from</span> lxml.html <span class="keyword">import</span> tostring</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;初始化参数&quot;&quot;&quot;</span></span><br><span class="line">kw = <span class="string">&#x27;篮球&#x27;</span></span><br><span class="line">base_url = <span class="string">&#x27;http://tieba.baidu.com/f&#x27;</span></span><br><span class="line">headers = &#123;<span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.85 Safari/537.36 Edg/90.0.818.46&quot;</span>&#125;</span><br><span class="line">page_num = <span class="number">1</span>  <span class="comment"># 爬取页数</span></span><br><span class="line">title = <span class="string">&#x27;&#x27;</span></span><br><span class="line">path = <span class="string">&#x27;E:\\作业图片\\spider\\&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_text</span>(<span class="params">url, params=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;发送请求，获取响应内容&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 休眠，避免被对方反爬检测到</span></span><br><span class="line">    time.sleep(random.randint(<span class="number">1</span>, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">    req = requests.get(url, headers=headers, params=params)</span><br><span class="line">    <span class="keyword">return</span> req.text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_byte</span>(<span class="params">url, params=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;发送请求，获取响应内容&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    time.sleep(random.random() * <span class="number">2</span>)</span><br><span class="line">    req = requests.get(url, headers=headers, params=params)</span><br><span class="line">    <span class="keyword">return</span> req.content</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">page</span>(<span class="params">content, page_num=<span class="number">1</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;解析每一页&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;第&#123;&#125;页爬取中...&#x27;</span>.<span class="built_in">format</span>(page_num))</span><br><span class="line">    page_num += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 这一句就是为了把每个超链接匹配出来</span></span><br><span class="line">    url_title = re.findall(</span><br><span class="line">        <span class="string">r&#x27;&lt;a rel=&quot;noreferrer&quot; href=&quot;(/p/\d+?)&quot; title=&quot;.+?&quot; target=&quot;_blank&quot; class=&quot;j_th_tit &quot;&gt;(.+?)&lt;/a&gt;&#x27;</span>, content)</span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># html_get = etree.HTML(content)</span></span><br><span class="line">    <span class="comment"># div_ok = html_get.xpath(&#x27;//div[@id=&quot;mw-content-text&quot;]&#x27;)[0]</span></span><br><span class="line">    <span class="comment"># div_content = tostring(div_ok).decode(&#x27;utf-8&#x27;)</span></span><br><span class="line">    url_title1 = lxml.etree.HTML(content)</span><br><span class="line"></span><br><span class="line">    url_title2 = url_title1.xpath(<span class="string">&#x27;//*[@id=&quot;thread_list&quot;]/li/div/div[2]/div[1]/div[1]/a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># &#x27;//*[@id=&quot;thread_list&quot;]/li[3]/div/div[2]/div[1]/div[1]/a&#x27;</span></span><br><span class="line">    <span class="comment"># &#x27;//*[@id=&quot;thread_list&quot;]/li[5]/div/div[2]/div[1]/div[1]/a&#x27;</span></span><br><span class="line">    <span class="comment"># &#x27;//*[@id=&quot;thread_list&quot;]/li[10]/div/div[2]/div[1]/div[1]/a&#x27;</span></span><br><span class="line">    <span class="comment"># &#x27;//*[@id=&quot;thread_list&quot;]/li[4]/div/div[2]/div[1]/div[1]/a&#x27;</span></span><br><span class="line">    <span class="comment"># &#x27;//*[@id=&quot;thread_list&quot;]/li[6]/div/div[2]/div[1]/div[1]/a&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> url_title2:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> url, title <span class="keyword">in</span> url_title:</span><br><span class="line">        <span class="comment"># 去掉非中文</span></span><br><span class="line">        title = re.sub(<span class="string">&#x27;[^\u4e00-\u9fa5]+&#x27;</span>, <span class="string">&#x27;&#x27;</span>, title)</span><br><span class="line">        <span class="comment"># 细节处理：其实就是保存每个帖子的图片</span></span><br><span class="line">        detail(<span class="string">&#x27;https://tieba.baidu.com&#x27;</span> + url, title)</span><br><span class="line">        <span class="comment"># 保存标题</span></span><br><span class="line">        save_title(title)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断下一页</span></span><br><span class="line">    next_url = re.findall(<span class="string">r&#x27;&lt;a href=&quot;(.*?)&quot; .*?&gt;下一页&amp;gt;&lt;/a&gt;&#x27;</span>, content)</span><br><span class="line">    <span class="keyword">if</span> next_url:</span><br><span class="line">        next_url = <span class="string">&#x27;https:&#x27;</span> + next_url[<span class="number">0</span>]</span><br><span class="line">        content = parse_text(url=next_url)</span><br><span class="line">        page(content, page_num)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;爬虫结束...&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">detail</span>(<span class="params">url, title</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;每一个帖子的详情&quot;&quot;&quot;</span></span><br><span class="line">    content = parse_text(url=url)</span><br><span class="line">    urls = re.findall(<span class="string">r&#x27;&lt;img class=&quot;BDE_Image&quot;.*?src=&quot;(.*?)&quot;.*?&gt;&#x27;</span>, content)</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">        save_img(url, title)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_title</span>(<span class="params">title</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;保存帖子的标题&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(path + <span class="string">&#x27;tieba\\tieba_&#123;&#125;.txt&#x27;</span>.<span class="built_in">format</span>(kw), <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        file.write(title)</span><br><span class="line">        file.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_img</span>(<span class="params">url, title</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;保存图片&quot;&quot;&quot;</span></span><br><span class="line">    content = parse_byte(url=url)</span><br><span class="line">    image_path = path + <span class="string">&#x27;tieba\\images\\&#123;&#125;_&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(title, url[-<span class="number">30</span>:])</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(image_path, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        file.write(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;爬虫开始...&#x27;</span>)</span><br><span class="line">content = parse_text(url=base_url, params=&#123;<span class="string">&#x27;kw&#x27;</span>: kw, <span class="string">&#x27;ie&#x27;</span>: <span class="string">&#x27;utf-8&#x27;</span>, <span class="string">&#x27;fr&#x27;</span>: <span class="string">&#x27;search&#x27;</span>&#125;)</span><br><span class="line">page(content)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>若想爬取其他的内容，需要将xpath进行修改，以及kw赋值为你想爬取的商品，并确保电脑的目录存在方可成功</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;若想爬取其他的内容，需要将xpath进行修改，以及kw赋值为你想爬取的商品，并确保电脑的目录&lt;/p&gt;</summary>
    
    
    
    <category term="机器学习" scheme="https://du2279664786.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="机器学习" scheme="https://du2279664786.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="逻辑回归" scheme="https://du2279664786.github.io/tags/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>爬虫期末作业：爬虫+基本的天气对话机器人</title>
    <link href="https://du2279664786.github.io/2021/11/23/2021-11-23%E7%88%AC%E8%99%AB+%E5%9F%BA%E6%9C%AC%E7%9A%84%E5%A4%A9%E6%B0%94%E5%AF%B9%E8%AF%9D%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    <id>https://du2279664786.github.io/2021/11/23/2021-11-23%E7%88%AC%E8%99%AB+%E5%9F%BA%E6%9C%AC%E7%9A%84%E5%A4%A9%E6%B0%94%E5%AF%B9%E8%AF%9D%E6%9C%BA%E5%99%A8%E4%BA%BA/</id>
    <published>2021-11-23T14:55:10.000Z</published>
    <updated>2022-10-18T08:43:23.849Z</updated>
    
    <content type="html"><![CDATA[<p>使用的是PyAudio库进行录音，存为wav格式的文件，这里使用的是借用科大讯飞API进行语音转文字，然后进行语音播报</p><span id="more"></span><p>@<a href="%E6%9F%A5%E8%AF%A2%E5%A4%A9%E6%B0%94%E7%9A%84%E5%AF%B9%E8%AF%9D%E6%9C%BA%E5%99%A8%E4%BA%BA">TOC</a></p><h2 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h2><p>&amp;emsp;&amp;emsp;使用selenium模块来进行谷歌驱动，爬取相关的数据，然后将数据进行处理，利用正则分离数据，然后就是把每个功能包装成一个函数，利用得到的数据，实现存入数据库，以及存入csv等相关功能，还有一个就是数据可视化，先后荣立使用的是matplotlib和Pyecharts两个库，相对于matplotlib而言，Pyecharts做出的数据可视化更加的真实，可以动态交互的展现图表，然后对于语音处理方面，主要分为两个方面，一方面是录音转文字，录音的话，使用的是PyAudio库进行录音，存为wav格式的文件，这里使用的是借用科大讯飞API进行语音转文字，然后进行语音播报，使用的是Pyttsx3进行语音播报，然后可以进行死板式聊天，能力有限，并不能搭建出一套完整的人机对话项目。</p><h2 id="关于数据的爬取"><a href="#关于数据的爬取" class="headerlink" title="关于数据的爬取"></a>关于数据的爬取</h2><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><p>&amp;emsp;&amp;emsp;爬取是用的谷歌驱动后来又换成了谷歌驱动，爬取前需要安装谷歌驱动<a href="http://npm.taobao.org/mirrors/chromedriver/">（下载地址)</a>，然后才可以导入，然后就是爬取对应代码里面的spider_jinan()函数和spider_shandong()函数分别爬取</p><h3 id="爬取的过程分析"><a href="#爬取的过程分析" class="headerlink" title="爬取的过程分析"></a>爬取的过程分析</h3><p>&amp;emsp;&amp;emsp;用驱动打开浏览器，打开网页，通过xpath找到想要的数据，然后将数据保存为txt文件，最后关闭浏览器</p><h2 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h2><p>&amp;emsp;&amp;emsp;使用matplotlib和pyecharts两个画图</p><h2 id="数据的保存"><a href="#数据的保存" class="headerlink" title="数据的保存"></a>数据的保存</h2><p>&amp;emsp;&amp;emsp;存入数据库，存入csv</p><h2 id="声音处理"><a href="#声音处理" class="headerlink" title="声音处理"></a>声音处理</h2><h3 id="录音及其转文字"><a href="#录音及其转文字" class="headerlink" title="录音及其转文字"></a>录音及其转文字</h3><p>&amp;emsp;&amp;emsp;使用的是PyAudio库，进行录音，设置的讲话时间为4秒，然后把数据保存下来，存成wav文件，然后使用wave库进行读取wav文件，设置声道数为1，采样宽度为2字节，采样率设为16000，最后将读入的文件传输给speech2text(speech, TOKEN, int(1536))函数，speech是数据，TOKEN是借助的API，int（1536）表示的是普通话，补充一下，也可以说英语，传入1737就是英语，传入1637就是粤语，传入1837就是四川话，可以传入多种数据，这里的语音识别，借助的是科大讯飞转的文字，使用科大讯飞前要进行数据的注册，注册之后会生成相应的数据，base_url,APIKey,SecretKey,这三个数据要保证传入正确才能正确的将语音转化成文字</p><h3 id="关于语音播报"><a href="#关于语音播报" class="headerlink" title="关于语音播报"></a>关于语音播报</h3><p>&amp;emsp;&amp;emsp;使用的是pyttsx3库，这个播报库使用起来非常的方便，首先用pyttsx3.init()函数进行初始化，然后就是用say（）函数写出要说的内容，最后就是使用runAndWait函数进行播报，一共分为这三个步骤</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>&amp;emsp;&amp;emsp;首先要去<a href="https://www.xfyun.cn/services/online_tts">讯飞平台</a>注册账号，然后就会获得APIKey和SecretKey，才能进行语音转文字<br>需填入方可使用</p><p><img src="https://img-blog.csdnimg.cn/17921d845ceb4f5fa903a091e88e43af.png" alt="在这里插入图片描述"><br>代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># author:杜小皮</span></span><br><span class="line"><span class="comment"># datetime:2021/6/23 10:41</span></span><br><span class="line"><span class="comment"># software: PyCharm</span></span><br><span class="line"><span class="keyword">import</span> wave</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> pyaudio <span class="keyword">import</span> PyAudio, paInt16</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">import</span> pyttsx3</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</span><br><span class="line"><span class="keyword">from</span> imageio <span class="keyword">import</span> imread</span><br><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> pyecharts</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># from pyecharts import Pie</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">spider_jinan</span>():  <span class="comment"># 爬取所有数据</span></span><br><span class="line">    js = <span class="string">&quot;var q=document.documentElement.scrollTop=100000&quot;</span></span><br><span class="line"></span><br><span class="line">    driver = webdriver.Chrome()  <span class="comment"># 打开浏览器</span></span><br><span class="line">    driver.maximize_window()  <span class="comment"># 最大化窗口</span></span><br><span class="line"></span><br><span class="line">    url = <span class="string">&#x27;https://www.tianqi.com/jinan/&#x27;</span>  <span class="comment"># 打开网页</span></span><br><span class="line">    driver.get(url)</span><br><span class="line">    content = driver.page_source</span><br><span class="line"></span><br><span class="line">    cl = driver.find_elements_by_xpath(<span class="string">&quot;/html/body/div[5]/div/div[2]/div[1]/span[2]/a[2]/h3&quot;</span>)  <span class="comment"># 查看未来30天</span></span><br><span class="line">    cl[<span class="number">0</span>].click()  <span class="comment"># 此处是根据老师讲的京东代码而写</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">list</span> = driver.find_elements_by_xpath(<span class="string">&quot;/html/body/div[6]/div[2]/ul[1]&quot;</span>)  <span class="comment"># 匹配所有数据</span></span><br><span class="line">    result = <span class="built_in">list</span>[<span class="number">0</span>].text.split(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    driver.close()</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">spider_res_jinan</span>(<span class="params">result</span>):  <span class="comment"># 数据的分离</span></span><br><span class="line">    weather = []</span><br><span class="line">    temp = []</span><br><span class="line">    data = []</span><br><span class="line">    month = []</span><br><span class="line">    day = []</span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> result:</span><br><span class="line">        a += <span class="number">1</span></span><br><span class="line">        <span class="comment"># print(i)</span></span><br><span class="line">        <span class="comment"># print(a)</span></span><br><span class="line">        b = (a % <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (b == <span class="number">0</span>):</span><br><span class="line">            <span class="comment"># print(i)</span></span><br><span class="line">            weather.append(i)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 利用正则表达式找出温度，日期，天气</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> result:</span><br><span class="line">        <span class="comment"># print(i)</span></span><br><span class="line">        lista = re.findall(<span class="string">&quot;\d&#123;2&#125;-\d&#123;2&#125;&quot;</span>, i)</span><br><span class="line">        <span class="comment"># print(data)</span></span><br><span class="line">        <span class="comment"># print(tem)</span></span><br><span class="line">        tem = re.findall(<span class="string">&quot;\d&#123;2&#125;~\d&#123;2&#125;℃&quot;</span>, i)</span><br><span class="line">        <span class="comment"># print(tem)</span></span><br><span class="line">        <span class="keyword">if</span> tem == []:</span><br><span class="line">            <span class="keyword">del</span> tem</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> iii <span class="keyword">in</span> tem:</span><br><span class="line">                temp.append(iii)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> lista == []:</span><br><span class="line">            <span class="keyword">del</span> lista</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># print(data)</span></span><br><span class="line">            <span class="keyword">for</span> ii <span class="keyword">in</span> lista:</span><br><span class="line">                <span class="comment"># print(ii)</span></span><br><span class="line">                data.append(ii)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">            month.append(i.split(<span class="string">&quot;-&quot;</span>)[<span class="number">0</span>])</span><br><span class="line">            day.append(i.split(<span class="string">&quot;-&quot;</span>)[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> weather, temp, data, month, day</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mean_temp_jinan</span>(<span class="params">temp</span>):  <span class="comment"># 求出未来30天的平均温度</span></span><br><span class="line">    temp_mean = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> temp:</span><br><span class="line">        t = <span class="number">0</span></span><br><span class="line">        <span class="comment"># print(i)</span></span><br><span class="line">        z = re.findall(<span class="string">&quot;\d&#123;2&#125;&quot;</span>, i)</span><br><span class="line">        <span class="keyword">for</span> ii <span class="keyword">in</span> z:</span><br><span class="line">            <span class="comment"># print(ii)</span></span><br><span class="line">            ii = <span class="built_in">int</span>(ii)</span><br><span class="line">            t += ii</span><br><span class="line">        temp_mean.append(t / <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> temp_mean</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">image_jinan</span>(<span class="params">weather</span>):  <span class="comment"># 画出词云</span></span><br><span class="line">    res = pd.Series()</span><br><span class="line">    res[<span class="string">&quot;weather&quot;</span>] = pd.Series(weather)</span><br><span class="line">    qq = pd.DataFrame(&#123;<span class="string">&quot;天气&quot;</span>: res[<span class="string">&quot;weather&quot;</span>]&#125;)</span><br><span class="line">    qq.to_csv(<span class="string">&quot;E:\\tianqi.txt&quot;</span>, index=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    stop = pd.read_csv(<span class="string">&#x27;E:\\tianqi.txt&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>, engine=<span class="string">&#x27;python&#x27;</span>, sep=<span class="string">&#x27;limh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    back_pic = imread(<span class="string">&quot;E:\\code\\spider\\week8\\word_cloud\\helle.jpg&quot;</span>)  <span class="comment"># aixin.jpg # 设置背景图片</span></span><br><span class="line">    wc = WordCloud(font_path=<span class="string">&#x27;C:\\Windows\\Fonts\\simkai.TTF&#x27;</span>,  <span class="comment"># 设置字体 使用的 windows 自带的字体</span></span><br><span class="line">                   background_color=<span class="string">&quot;white&quot;</span>,  <span class="comment"># =&quot;white&quot;, #背景颜色</span></span><br><span class="line">                   max_words=<span class="number">2000</span>,  <span class="comment"># 词云显示的最大数</span></span><br><span class="line">                   mask=back_pic,  <span class="comment"># 设置背景图片</span></span><br><span class="line">                   max_font_size=<span class="number">200</span>,  <span class="comment"># =200, #字体最大值</span></span><br><span class="line">                   random_state=<span class="number">42</span>,</span><br><span class="line">                   collocations=<span class="literal">True</span>, )</span><br><span class="line"></span><br><span class="line">    tupian = Image.<span class="built_in">open</span>(<span class="string">&quot;E:\\helle.jpg&quot;</span>)  <span class="comment"># 打开图片路径，形成轮廓</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 绘图</span></span><br><span class="line">    plt.figure(figsize=(<span class="number">16</span>, <span class="number">8</span>))</span><br><span class="line">    plt.imshow(tupian)</span><br><span class="line">    plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">temp_to_csv</span>(<span class="params">weather, temp, data</span>):  <span class="comment"># 将数据转存为csv</span></span><br><span class="line">    results = pd.DataFrame()</span><br><span class="line">    res = pd.Series()</span><br><span class="line">    res[<span class="string">&quot;weather&quot;</span>] = pd.Series(weather)</span><br><span class="line">    res[<span class="string">&quot;temp&quot;</span>] = pd.Series(temp)</span><br><span class="line">    res[<span class="string">&quot;data&quot;</span>] = pd.Series(data)</span><br><span class="line">    results.insert(<span class="number">0</span>, <span class="string">&#x27;天气&#x27;</span>, res[<span class="string">&quot;weather&quot;</span>])</span><br><span class="line">    results.insert(<span class="number">0</span>, <span class="string">&#x27;温度&#x27;</span>, res[<span class="string">&quot;temp&quot;</span>])</span><br><span class="line">    results.insert(<span class="number">0</span>, <span class="string">&#x27;日期&#x27;</span>, res[<span class="string">&quot;data&quot;</span>])</span><br><span class="line">    <span class="comment"># print(results)</span></span><br><span class="line">    results.to_csv(<span class="string">&quot;E:\\weather.csv&quot;</span>, index=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">plt_mean_temp_jinan</span>(<span class="params">data, mean__temp</span>):  <span class="comment"># 画平均温度折线图</span></span><br><span class="line">    plt.xlabel(<span class="string">&quot;天气&quot;</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&quot;平均温度&quot;</span>)</span><br><span class="line">    plt.title(<span class="string">&quot;温度变化&quot;</span>)</span><br><span class="line">    plt.plot(data, mean__temp)</span><br><span class="line">    plt.grid(<span class="literal">True</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">plt_fer_weather</span>(<span class="params">weather</span>):</span><br><span class="line">    tianqi = []</span><br><span class="line">    pinlv = []</span><br><span class="line">    word_counts = collections.Counter(weather)  <span class="comment"># 对分词做词频统计</span></span><br><span class="line">    word_counts_top10 = word_counts.most_common(<span class="number">10</span>)  <span class="comment"># 获取前10最高频的词</span></span><br><span class="line">    <span class="comment"># print(word_counts_top10)  # 输出检查</span></span><br><span class="line">    sun = <span class="number">0</span></span><br><span class="line">    cloud = <span class="number">0</span></span><br><span class="line">    lit_rain = <span class="number">0</span></span><br><span class="line">    mit_rain = <span class="number">0</span></span><br><span class="line">    sail = <span class="number">0</span></span><br><span class="line">    shadom = <span class="number">0</span></span><br><span class="line">    z_rain = <span class="number">0</span></span><br><span class="line">    th_rain = <span class="number">0</span></span><br><span class="line">    xiaoyu = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> word_counts_top10:</span><br><span class="line">        <span class="built_in">print</span>(i[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">if</span> i[<span class="number">0</span>] == <span class="string">&#x27;多云&#x27;</span>:</span><br><span class="line">            sun += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> i[<span class="number">0</span>] == <span class="string">&#x27;阴转雨&#x27;</span>:</span><br><span class="line">            cloud += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> i[<span class="number">0</span>] == <span class="string">&#x27;多云转晴&#x27;</span>:</span><br><span class="line">            lit_rain += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> i[<span class="number">0</span>] == <span class="string">&#x27;小雨到大雨&#x27;</span>:</span><br><span class="line">            mit_rain += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> i[<span class="number">0</span>] == <span class="string">&#x27;中雨到大雨&#x27;</span>:</span><br><span class="line">            shadom += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> i[<span class="number">0</span>] == <span class="string">&#x27;多云转雨&#x27;</span>:</span><br><span class="line">            z_rain += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> i[<span class="number">0</span>] == <span class="string">&#x27;小雨到中雨&#x27;</span>:</span><br><span class="line">            th_rain += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> i[<span class="number">0</span>] == <span class="string">&#x27;小雨转多云&#x27;</span>:</span><br><span class="line">            sail += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> i[<span class="number">0</span>] == <span class="string">&#x27;小雨转阴&#x27;</span>:</span><br><span class="line">            xiaoyu += <span class="number">1</span></span><br><span class="line">        <span class="comment"># print(i[0])</span></span><br><span class="line">        tianqi = [<span class="string">&quot;小雨转阴&quot;</span>, <span class="string">&#x27;小雨到大雨&#x27;</span>, <span class="string">&#x27;多云转晴&#x27;</span>, <span class="string">&#x27;小雨转多云&#x27;</span>, <span class="string">&#x27;多云&#x27;</span>, <span class="string">&#x27;小雨到中雨&#x27;</span>, <span class="string">&#x27;阴转雨&#x27;</span>, <span class="string">&#x27;中雨到大雨&#x27;</span>, <span class="string">&#x27;多云转雨&#x27;</span>]</span><br><span class="line">    pie = pyecharts.Pie(<span class="string">&quot;山东天气比例&quot;</span>, <span class="string">&#x27;2020-7-11&#x27;</span>)</span><br><span class="line">    pie.add(<span class="string">&#x27;天气类型&#x27;</span>, tianqi, [xiaoyu, mit_rain, lit_rain, sail, sun, th_rain, cloud, shadom, z_rain], is_label_show=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    pie = pyecharts.Pie(<span class="string">&quot;全国天气类型比例&quot;</span>, <span class="string">&#x27;2018-4-16&#x27;</span>)</span><br><span class="line">    pie.render(<span class="string">&#x27;C:\\Users\\dupeibo\\Desktop\\未来30天天气概况.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">spider_shandong</span>():</span><br><span class="line">    city = []</span><br><span class="line">    temp = []</span><br><span class="line">    weather = []</span><br><span class="line">    js = <span class="string">&quot;var q=document.documentElement.scrollTop=100000&quot;</span></span><br><span class="line"></span><br><span class="line">    driver = webdriver.Chrome()  <span class="comment"># 打开浏览器</span></span><br><span class="line">    driver.maximize_window()  <span class="comment"># 最大化窗口</span></span><br><span class="line"></span><br><span class="line">    url = <span class="string">&#x27;https://www.tianqi.com/province/shandong/&#x27;</span>  <span class="comment"># 打开网页</span></span><br><span class="line">    driver.get(url)</span><br><span class="line">    content = driver.page_source</span><br><span class="line"></span><br><span class="line">    <span class="built_in">list</span> = driver.find_elements_by_xpath(<span class="string">&quot;/html/body/div[7]/div[1]/div[5]/ul&quot;</span>)  <span class="comment"># 山东数据</span></span><br><span class="line">    result = <span class="built_in">list</span>[<span class="number">0</span>].text.split(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    driver.close()</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shandong_data</span>(<span class="params">result</span>):  <span class="comment"># 爬取山东数据并分离</span></span><br><span class="line">    city = []</span><br><span class="line">    temp = []</span><br><span class="line">    weather = []</span><br><span class="line">    max_temp = []</span><br><span class="line">    min_temp = []</span><br><span class="line">    a = <span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> result:  <span class="comment"># 求出每个城市的天气</span></span><br><span class="line">        a += <span class="number">1</span></span><br><span class="line">        <span class="comment"># print(i)</span></span><br><span class="line">        <span class="comment"># print(a)</span></span><br><span class="line">        b = (a % <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (b == <span class="number">0</span>):</span><br><span class="line">            <span class="comment"># print(i)</span></span><br><span class="line">            weather.append(i)</span><br><span class="line"></span><br><span class="line">    a = <span class="number">3</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> result:  <span class="comment"># 求出山东的城市</span></span><br><span class="line">        a += <span class="number">1</span></span><br><span class="line">        <span class="comment"># print(i)</span></span><br><span class="line">        <span class="comment"># print(a)</span></span><br><span class="line">        b = (a % <span class="number">4</span>)</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="number">0</span>):</span><br><span class="line">            <span class="comment"># print(i)</span></span><br><span class="line">            city.append(i)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> result:  <span class="comment"># 求出每个城市的温度</span></span><br><span class="line">        tem = re.findall(<span class="string">&#x27;\d&#123;2&#125; ~ \d&#123;2&#125;℃&#x27;</span>, i)</span><br><span class="line">        <span class="comment"># print(tem)</span></span><br><span class="line">        <span class="keyword">if</span> tem == []:</span><br><span class="line">            <span class="keyword">del</span> tem</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> iii <span class="keyword">in</span> tem:</span><br><span class="line">                temp.append(iii)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> temp:  <span class="comment"># 求出温度的最大值和最小值</span></span><br><span class="line">        t = <span class="number">0</span></span><br><span class="line">        <span class="comment"># print(i)</span></span><br><span class="line">        z = re.findall(<span class="string">&quot;\d&#123;2&#125;&quot;</span>, i)</span><br><span class="line">        <span class="comment"># print(z[0])</span></span><br><span class="line">        min_temp.append(z[<span class="number">0</span>])</span><br><span class="line">        max_temp.append(z[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> city, temp, weather, max_temp, min_temp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shandong_Parallel</span>(<span class="params">city, max_temp, min_temp</span>):</span><br><span class="line">    parallel = pyecharts.Parallel(<span class="string">&quot;高低温度的平行坐标系图&quot;</span>, <span class="string">&quot;2021-7-13&quot;</span>, width=<span class="number">1200</span>,</span><br><span class="line">                                  height=<span class="number">600</span>)</span><br><span class="line">    parallel.config(city)</span><br><span class="line">    parallel.add(<span class="string">&quot;高低温&quot;</span>, [max_temp, min_temp], is_random=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    parallel.render(<span class="string">&#x27;C:\\Users\\dupeibo\\Desktop\\山东温度分析.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">jinan_to_sql</span>(<span class="params">weather, temp, data</span>):</span><br><span class="line">    <span class="comment"># result = spider_jinan()</span></span><br><span class="line">    <span class="comment"># weather, temp, data = spider_res_jinan(result)</span></span><br><span class="line">    results = pd.DataFrame()</span><br><span class="line">    res = pd.Series()</span><br><span class="line">    res[<span class="string">&quot;weather&quot;</span>] = pd.Series(weather)</span><br><span class="line">    res[<span class="string">&quot;temp&quot;</span>] = pd.Series(temp)</span><br><span class="line">    res[<span class="string">&quot;data&quot;</span>] = pd.Series(data)</span><br><span class="line">    results.insert(<span class="number">0</span>, <span class="string">&#x27;天气&#x27;</span>, res[<span class="string">&quot;weather&quot;</span>])</span><br><span class="line">    results.insert(<span class="number">0</span>, <span class="string">&#x27;温度&#x27;</span>, res[<span class="string">&quot;temp&quot;</span>])</span><br><span class="line">    results.insert(<span class="number">0</span>, <span class="string">&#x27;日期&#x27;</span>, res[<span class="string">&quot;data&quot;</span>])</span><br><span class="line">    <span class="comment"># print(results)</span></span><br><span class="line">    conn = create_engine(<span class="string">&#x27;mysql+pymysql://root:dpb238031@localhost:3306/weather?charset=utf8&#x27;</span>)</span><br><span class="line">    sql = <span class="string">&#x27;select * from runoob_tbl&#x27;</span></span><br><span class="line">    rub = pd.read_sql(sql, conn)</span><br><span class="line">    results.to_sql(name=<span class="string">&#x27;jinan_weather&#x27;</span>, con=conn, if_exists=<span class="string">&#x27;append&#x27;</span>, index=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shandong_to_sql</span>(<span class="params">city, weather, min_temp, max_temp</span>):</span><br><span class="line">    <span class="comment"># result = spider_shandong()</span></span><br><span class="line">    <span class="comment"># city, temp, weather, max_temp, min_temp = shandong_data(result)</span></span><br><span class="line">    results = pd.DataFrame()</span><br><span class="line">    res = pd.Series()</span><br><span class="line">    res[<span class="string">&quot;city&quot;</span>] = pd.Series(city)</span><br><span class="line">    res[<span class="string">&quot;weather&quot;</span>] = pd.Series(weather)</span><br><span class="line">    res[<span class="string">&quot;max_temp&quot;</span>] = pd.Series(max_temp)</span><br><span class="line">    res[<span class="string">&quot;min_temp&quot;</span>] = pd.Series(min_temp)</span><br><span class="line">    results.insert(<span class="number">0</span>, <span class="string">&#x27;城市&#x27;</span>, res[<span class="string">&quot;city&quot;</span>])</span><br><span class="line">    results.insert(<span class="number">0</span>, <span class="string">&#x27;天气&#x27;</span>, res[<span class="string">&quot;weather&quot;</span>])</span><br><span class="line">    results.insert(<span class="number">0</span>, <span class="string">&#x27;最低温&#x27;</span>, res[<span class="string">&quot;min_temp&quot;</span>])</span><br><span class="line">    results.insert(<span class="number">0</span>, <span class="string">&#x27;最高温&#x27;</span>, res[<span class="string">&quot;max_temp&quot;</span>])</span><br><span class="line">    conn = create_engine(<span class="string">&#x27;mysql+pymysql://root:dpb238031@localhost:3306/weather?charset=utf8&#x27;</span>)</span><br><span class="line">    <span class="comment"># sql = &#x27;select * from runoob_tbl&#x27;</span></span><br><span class="line">    <span class="comment"># rub = pd.read_sql(sql, conn)</span></span><br><span class="line">    results.to_sql(name=<span class="string">&#x27;shandong_weather&#x27;</span>, con=conn, if_exists=<span class="string">&#x27;append&#x27;</span>, index=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">audio</span>(<span class="params">exam, weather, temp, month, day</span>):</span><br><span class="line">    <span class="comment"># put = input(&quot;请输入要查看的信息，例如：今天，明天，后天&quot;)</span></span><br><span class="line">    <span class="keyword">if</span> exam == <span class="string">&quot;今天&quot;</span>:</span><br><span class="line">        pt = pyttsx3.init()</span><br><span class="line">        pt.say(<span class="string">&quot;今天是：&quot;</span> + month[<span class="number">0</span>] + <span class="string">&quot;月&quot;</span> + day[<span class="number">1</span>] + <span class="string">&quot;日\n\n&quot;</span> + <span class="string">&quot;今天的天气是\n&quot;</span> + weather[<span class="number">0</span>] + <span class="string">&quot;\n\n今天的气温是&quot;</span> + temp[<span class="number">0</span>])</span><br><span class="line">        pt.runAndWait()</span><br><span class="line">        <span class="comment"># print(&quot;天气：&quot; + weather[0] + &quot; ，温度为：&quot; + temp[0] + &quot; ，日期：&quot; + data[0])</span></span><br><span class="line">    <span class="keyword">elif</span> exam == <span class="string">&quot;明天&quot;</span>:</span><br><span class="line">        pt = pyttsx3.init()</span><br><span class="line">        pt.say(<span class="string">&quot;明天是：&quot;</span> + month[<span class="number">1</span>] + <span class="string">&quot;月&quot;</span> + day[<span class="number">1</span>] + <span class="string">&quot;日\n\n&quot;</span> + <span class="string">&quot;明天的天气是\n&quot;</span> + weather[<span class="number">1</span>] + <span class="string">&quot;\n\n明天的气温是&quot;</span> + temp[<span class="number">1</span>])</span><br><span class="line">        pt.runAndWait()</span><br><span class="line">    <span class="keyword">elif</span> exam == <span class="string">&quot;后天&quot;</span>:</span><br><span class="line">        pt = pyttsx3.init()</span><br><span class="line">        pt.say(<span class="string">&quot;后天是：&quot;</span> + month[<span class="number">2</span>] + <span class="string">&quot;月&quot;</span> + day[<span class="number">1</span>] + <span class="string">&quot;日\n\n&quot;</span> + <span class="string">&quot;后天的天气是\n&quot;</span> + weather[<span class="number">2</span>] + <span class="string">&quot;\n\n后天的气温是&quot;</span> + temp[<span class="number">2</span>])</span><br><span class="line">        pt.runAndWait()</span><br><span class="line">    <span class="keyword">elif</span> exam == <span class="string">&quot;大后天&quot;</span>:</span><br><span class="line">        pt = pyttsx3.init()</span><br><span class="line">        pt.say(<span class="string">&quot;大后天是：&quot;</span> + month[<span class="number">3</span>] + <span class="string">&quot;月&quot;</span> + day[<span class="number">1</span>] + <span class="string">&quot;日\n\n&quot;</span> + <span class="string">&quot;大后天的天气是\n&quot;</span> + weather[<span class="number">3</span>] + <span class="string">&quot;\n\n大后天的气温是&quot;</span> + temp[<span class="number">3</span>])</span><br><span class="line">        pt.runAndWait()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">framerate = <span class="number">16000</span>  <span class="comment"># 采样率</span></span><br><span class="line">num_samples = <span class="number">2000</span>  <span class="comment"># 采样点</span></span><br><span class="line">channels = <span class="number">1</span>  <span class="comment"># 声道</span></span><br><span class="line">sampwidth = <span class="number">2</span>  <span class="comment"># 采样宽度2bytes</span></span><br><span class="line">FILEPATH = <span class="string">&#x27;speech.wav&#x27;</span></span><br><span class="line"></span><br><span class="line">base_url = <span class="string">&quot;https://openapi.baidu.com/oauth/2.0/token?grant_type=client_credentials&amp;client_id=%s&amp;client_secret=%s&quot;</span></span><br><span class="line">APIKey = <span class="string">&quot;注册的APIKey&quot;</span></span><br><span class="line">SecretKey = <span class="string">&quot;注册的SecretKey&quot;</span></span><br><span class="line"></span><br><span class="line">HOST = base_url % (APIKey, SecretKey)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getToken</span>(<span class="params">host</span>):</span><br><span class="line">    res = requests.post(host)</span><br><span class="line">    <span class="keyword">return</span> res.json()[<span class="string">&#x27;access_token&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_wave_file</span>(<span class="params">filepath, data</span>):</span><br><span class="line">    wf = wave.<span class="built_in">open</span>(filepath, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">    wf.setnchannels(channels)   <span class="comment">#声道数</span></span><br><span class="line">    wf.setsampwidth(sampwidth)    <span class="comment">#采样宽度2bytes</span></span><br><span class="line">    wf.setframerate(framerate)    <span class="comment"># 采样率</span></span><br><span class="line">    wf.writeframes(<span class="string">b&#x27;&#x27;</span>.join(data))</span><br><span class="line">    wf.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_record</span>():     <span class="comment">#录音函数</span></span><br><span class="line">    pa = PyAudio()</span><br><span class="line">    stream = pa.<span class="built_in">open</span>(<span class="built_in">format</span>=paInt16, channels=channels,</span><br><span class="line">                     rate=framerate, <span class="built_in">input</span>=<span class="literal">True</span>, frames_per_buffer=num_samples)</span><br><span class="line">    my_buf = []</span><br><span class="line">    <span class="comment"># count = 0</span></span><br><span class="line">    t = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;请讲话...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> time.time() &lt; t + <span class="number">4</span>:  <span class="comment"># 秒</span></span><br><span class="line">        string_audio_data = stream.read(num_samples)</span><br><span class="line">        my_buf.append(string_audio_data)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;录音结束.&#x27;</span>)</span><br><span class="line">    save_wave_file(FILEPATH, my_buf)</span><br><span class="line">    stream.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_audio</span>(<span class="params">file</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">speech2text</span>(<span class="params">speech_data, token, dev_pid=<span class="number">1537</span></span>):</span><br><span class="line">    FORMAT = <span class="string">&#x27;wav&#x27;</span></span><br><span class="line">    RATE = <span class="string">&#x27;16000&#x27;</span></span><br><span class="line">    CHANNEL = <span class="number">1</span></span><br><span class="line">    CUID = <span class="string">&#x27;24422381&#x27;</span></span><br><span class="line">    SPEECH = base64.b64encode(speech_data).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;format&#x27;</span>: FORMAT,</span><br><span class="line">        <span class="string">&#x27;rate&#x27;</span>: RATE,</span><br><span class="line">        <span class="string">&#x27;channel&#x27;</span>: CHANNEL,</span><br><span class="line">        <span class="string">&#x27;cuid&#x27;</span>: CUID,</span><br><span class="line">        <span class="string">&#x27;len&#x27;</span>: <span class="built_in">len</span>(speech_data),</span><br><span class="line">        <span class="string">&#x27;speech&#x27;</span>: SPEECH,</span><br><span class="line">        <span class="string">&#x27;token&#x27;</span>: token,</span><br><span class="line">        <span class="string">&#x27;dev_pid&#x27;</span>: dev_pid</span><br><span class="line">    &#125;</span><br><span class="line">    url = <span class="string">&#x27;https://vop.baidu.com/server_api&#x27;</span></span><br><span class="line">    headers = &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>&#125;</span><br><span class="line">    <span class="comment"># r=requests.post(url,data=json.dumps(data),headers=headers)</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;正在识别...&#x27;</span>)</span><br><span class="line">    r = requests.post(url, json=data, headers=headers)</span><br><span class="line">    Result = r.json()</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;result&#x27;</span> <span class="keyword">in</span> Result:</span><br><span class="line">        <span class="keyword">return</span> Result[<span class="string">&#x27;result&#x27;</span>][<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> Result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    flag = <span class="string">&#x27;重新开始&#x27;</span></span><br><span class="line">    <span class="keyword">while</span> flag.lower() == <span class="string">&#x27;重新开始&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;您是要查看&#x27;济南天气&#x27;还是&#x27;山东所有城市的天气&#x27;？&quot;</span>)</span><br><span class="line">        pt = pyttsx3.init()</span><br><span class="line">        pt.say(<span class="string">&quot;您是要查看济南天气还是山东所有城市的天气？&quot;</span>)</span><br><span class="line">        pt.runAndWait()</span><br><span class="line">        sleep(<span class="number">2</span>)</span><br><span class="line">        <span class="comment"># print(&#x27;请输入数字选择语言：&#x27;)</span></span><br><span class="line">        <span class="comment"># devpid = input(&#x27;1536：普通话(简单英文),1537:普通话(有标点),1737:英语,1637:粤语,1837:四川话\n&#x27;)</span></span><br><span class="line">        my_record()</span><br><span class="line">        TOKEN = getToken(HOST)</span><br><span class="line">        speech = get_audio(FILEPATH)</span><br><span class="line">        result = speech2text(speech, TOKEN, <span class="built_in">int</span>(<span class="number">1536</span>))</span><br><span class="line">        sleep(<span class="number">2</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;识别结果：&quot;</span> + result)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;开始收集数据....&quot;</span>)</span><br><span class="line">        sleep(<span class="number">2</span>)</span><br><span class="line">        <span class="comment"># abc = &quot;返回上一级&quot;</span></span><br><span class="line">        <span class="keyword">if</span> result == <span class="string">&quot;济南天气&quot;</span>:</span><br><span class="line">            <span class="comment"># while abc == &quot;返回上一级&quot;:</span></span><br><span class="line">            result = spider_jinan()</span><br><span class="line">            weather, temp, data, month, day = spider_res_jinan(result)</span><br><span class="line">            mean__temp = mean_temp_jinan(temp)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;目前有的功能\n\n查看最近天气\n查看未来30天的温度\n画出天气词云\n平均温度折线图\n保存数据\n查看未来天气类型\n将数据存入数据库\n\n请选择你要使用的功能&quot;</span>)</span><br><span class="line">            <span class="comment"># print(&quot;查看最近天气\n查看未来30天的温度\n画出天气词云\n画平均温度折线图\n保存数据\n画出柱状图&quot;)</span></span><br><span class="line">            pt = pyttsx3.init()</span><br><span class="line">            pt.say(<span class="string">&quot;\n\n\n\n\n\n\n目前有的功能\n\n查看最近天气\n查看未来30天的温度\n画出天气词云\n平均温度折线图\n保存数据\n查看未来天气类型\n将数据存入数据库\n\n请选择你要使用的功能&quot;</span>)</span><br><span class="line">            pt.runAndWait()</span><br><span class="line">            my_record()</span><br><span class="line">            <span class="comment"># sleep(2)</span></span><br><span class="line">            TOKEN = getToken(HOST)</span><br><span class="line">            speech = get_audio(FILEPATH)</span><br><span class="line">            func = speech2text(speech, TOKEN, <span class="built_in">int</span>(<span class="number">1536</span>))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;识别结果:&quot;</span> + func)</span><br><span class="line">            sleep(<span class="number">2</span>)</span><br><span class="line">            <span class="comment"># func = input()</span></span><br><span class="line">            <span class="keyword">if</span> func == <span class="string">&quot;查看最近天气&quot;</span>:</span><br><span class="line">                <span class="comment"># exam = input(&quot;请输入要查看的信息，例如：今天，明天，后天，大后天&quot;)</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;请输入要查看的信息，例如：今天，明天，后天，大后天&quot;</span>)</span><br><span class="line">                pt = pyttsx3.init()</span><br><span class="line">                pt.say(<span class="string">&quot;请输入要查看的信息，例如：今天，明天，后天，大后天&quot;</span>)</span><br><span class="line">                pt.runAndWait()</span><br><span class="line">                my_record()</span><br><span class="line">                TOKEN = getToken(HOST)</span><br><span class="line">                speech = get_audio(FILEPATH)</span><br><span class="line">                apple = speech2text(speech, TOKEN, <span class="built_in">int</span>(<span class="number">1536</span>))</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;识别结果：&quot;</span> + apple)</span><br><span class="line">                audio(apple, weather, temp, month, day)</span><br><span class="line">                pt1 = pyttsx3.init()</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;重新开始还是退出？&quot;</span>)</span><br><span class="line">                pt1.say(<span class="string">&quot;是否重新开始还是退出？&quot;</span>)</span><br><span class="line">                pt1.runAndWait()</span><br><span class="line">                my_record()</span><br><span class="line">                <span class="comment"># sleep(2)</span></span><br><span class="line">                TOKEN = getToken(HOST)</span><br><span class="line">                speech = get_audio(FILEPATH)</span><br><span class="line">                flag = speech2text(speech, TOKEN, <span class="built_in">int</span>(<span class="number">1536</span>))</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;识别结果：&quot;</span> + flag)</span><br><span class="line">            <span class="keyword">elif</span> func == <span class="string">&quot;查看未来三十天的温度&quot;</span>:</span><br><span class="line">                mean__temp = mean_temp_jinan(temp)</span><br><span class="line">                plt_mean_temp_jinan(data, mean__temp)</span><br><span class="line">                pt = pyttsx3.init()</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;重新开始还是退出？&quot;</span>)</span><br><span class="line">                pt.say(<span class="string">&quot;是否重新开始还是退出？&quot;</span>)</span><br><span class="line">                pt.runAndWait()</span><br><span class="line">                my_record()</span><br><span class="line">                <span class="comment"># sleep(2)</span></span><br><span class="line">                TOKEN = getToken(HOST)</span><br><span class="line">                speech = get_audio(FILEPATH)</span><br><span class="line">                flag = speech2text(speech, TOKEN, <span class="built_in">int</span>(<span class="number">1536</span>))</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;识别结果：&quot;</span> + flag)</span><br><span class="line">            <span class="keyword">elif</span> func == <span class="string">&quot;画出天气词云&quot;</span>:</span><br><span class="line">                image_jinan(weather)</span><br><span class="line">                <span class="comment"># os.system(&quot;E:\\code\\spider\\week8\\word_cloud\\bodies.png&quot;)</span></span><br><span class="line">                pt = pyttsx3.init()</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;重新开始还是退出？&quot;</span>)</span><br><span class="line">                pt.say(<span class="string">&quot;是否重新开始还是退出？&quot;</span>)</span><br><span class="line">                pt.runAndWait()</span><br><span class="line">                my_record()</span><br><span class="line">                <span class="comment"># sleep(2)</span></span><br><span class="line">                TOKEN = getToken(HOST)</span><br><span class="line">                speech = get_audio(FILEPATH)</span><br><span class="line">                flag = speech2text(speech, TOKEN, <span class="built_in">int</span>(<span class="number">1536</span>))</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;识别结果：&quot;</span> + flag)</span><br><span class="line">            <span class="keyword">elif</span> func == <span class="string">&quot;平均温度折线图&quot;</span>:</span><br><span class="line">                plt_mean_temp_jinan(data, mean__temp)</span><br><span class="line">                pt = pyttsx3.init()</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;重新开始还是退出？&quot;</span>)</span><br><span class="line">                pt.say(<span class="string">&quot;重新开始还是退出？&quot;</span>)</span><br><span class="line">                pt.runAndWait()</span><br><span class="line">                my_record()</span><br><span class="line">                <span class="comment"># sleep(2)</span></span><br><span class="line">                TOKEN = getToken(HOST)</span><br><span class="line">                speech = get_audio(FILEPATH)</span><br><span class="line">                flag = speech2text(speech, TOKEN, <span class="built_in">int</span>(<span class="number">1536</span>))</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;识别结果：&quot;</span> + flag)</span><br><span class="line">            <span class="keyword">elif</span> func == <span class="string">&quot;保存数据&quot;</span>:</span><br><span class="line">                temp_to_csv(weather, temp, data)</span><br><span class="line">                <span class="comment"># print(&quot;csv文件保存成功&quot;)</span></span><br><span class="line">                pt = pyttsx3.init()</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;重新开始还是退出？&quot;</span>)</span><br><span class="line">                pt.say(<span class="string">&quot;重新开始还是退出？&quot;</span>)</span><br><span class="line">                pt.runAndWait()</span><br><span class="line">                my_record()</span><br><span class="line">                <span class="comment"># sleep(2)</span></span><br><span class="line">                TOKEN = getToken(HOST)</span><br><span class="line">                speech = get_audio(FILEPATH)</span><br><span class="line">                flag = speech2text(speech, TOKEN, <span class="built_in">int</span>(<span class="number">1536</span>))</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;识别结果：&quot;</span> + flag)</span><br><span class="line">            <span class="keyword">elif</span> func == <span class="string">&quot;查看未来天气类型&quot;</span>:</span><br><span class="line">                plt_fer_weather(weather)</span><br><span class="line">                os.system(<span class="string">&#x27;C:\\Users\\dupeibo\\Desktop\\未来30天天气概况.html&#x27;</span>)</span><br><span class="line">                pt = pyttsx3.init()</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;重新开始还是退出？&quot;</span>)</span><br><span class="line">                pt.say(<span class="string">&quot;重新开始还是退出？&quot;</span>)</span><br><span class="line">                pt.runAndWait()</span><br><span class="line">                my_record()</span><br><span class="line">                <span class="comment"># sleep(2)</span></span><br><span class="line">                TOKEN = getToken(HOST)</span><br><span class="line">                speech = get_audio(FILEPATH)</span><br><span class="line">                flag = speech2text(speech, TOKEN, <span class="built_in">int</span>(<span class="number">1536</span>))</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;识别结果：&quot;</span> + flag)</span><br><span class="line">            <span class="keyword">elif</span> func == <span class="string">&quot;将数据存入数据库&quot;</span>:</span><br><span class="line">                jinan_to_sql(weather, temp, data)</span><br><span class="line">                pt = pyttsx3.init()</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;重新开始还是退出？&quot;</span>)</span><br><span class="line">                pt.say(<span class="string">&quot;数据库保存成功\n\n重新开始还是退出？&quot;</span>)</span><br><span class="line">                pt.runAndWait()</span><br><span class="line">                my_record()</span><br><span class="line">                <span class="comment"># sleep(2)</span></span><br><span class="line">                TOKEN = getToken(HOST)</span><br><span class="line">                speech = get_audio(FILEPATH)</span><br><span class="line">                flag = speech2text(speech, TOKEN, <span class="built_in">int</span>(<span class="number">1536</span>))</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;识别结果：&quot;</span> + flag)</span><br><span class="line">                <span class="comment"># print(&quot;数据库保存成功&quot;)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> result == <span class="string">&quot;山东所有城市的天气&quot;</span>:</span><br><span class="line">            result = spider_shandong()</span><br><span class="line">            city, temp, weather, max_temp, min_temp = shandong_data(result)</span><br><span class="line">            pt = pyttsx3.init()</span><br><span class="line">            sleep(<span class="number">3</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;目前有的功能\n\n\n查看各城市天气状况\n将数据存入数据库&quot;</span>)</span><br><span class="line">            pt.say(<span class="string">&quot;目前有的功能\n\n\n查看各城市天气状况\n将数据存入数据库&quot;</span>)</span><br><span class="line">            pt.runAndWait()</span><br><span class="line">            my_record()</span><br><span class="line">            sleep(<span class="number">2</span>)</span><br><span class="line">            TOKEN = getToken(HOST)</span><br><span class="line">            speech = get_audio(FILEPATH)</span><br><span class="line">            fun2 = speech2text(speech, TOKEN, <span class="built_in">int</span>(<span class="number">1536</span>))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;识别结果：&quot;</span> + fun2)</span><br><span class="line">            <span class="keyword">if</span> fun2 == <span class="string">&quot;查看各城市天气状况&quot;</span>:</span><br><span class="line">                <span class="comment"># shandong_Parallel(city, max_temp, min_temp)</span></span><br><span class="line">                os.system(<span class="string">&quot;C:\\Users\\dupeibo\\Desktop\\山东温度分析.html&quot;</span>)</span><br><span class="line">                pt = pyttsx3.init()</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;重新开始还是退出？&quot;</span>)</span><br><span class="line">                pt.say(<span class="string">&quot;重新开始还是退出？&quot;</span>)</span><br><span class="line">                pt.runAndWait()</span><br><span class="line">                my_record()</span><br><span class="line">                <span class="comment"># sleep(2)</span></span><br><span class="line">                TOKEN = getToken(HOST)</span><br><span class="line">                speech = get_audio(FILEPATH)</span><br><span class="line">                flag = speech2text(speech, TOKEN, <span class="built_in">int</span>(<span class="number">1536</span>))</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;识别结果：&quot;</span> + flag)</span><br><span class="line">            <span class="keyword">elif</span> fun2 == <span class="string">&quot;将数据存入数据库&quot;</span>:</span><br><span class="line">                shandong_to_sql(city, weather, min_temp, max_temp)</span><br><span class="line">                pt = pyttsx3.init()</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;重新开始还是退出？&quot;</span>)</span><br><span class="line">                pt.say(<span class="string">&quot;重新开始还是退出？&quot;</span>)</span><br><span class="line">                pt.runAndWait()</span><br><span class="line">                my_record()</span><br><span class="line">                <span class="comment"># sleep(2)</span></span><br><span class="line">                TOKEN = getToken(HOST)</span><br><span class="line">                speech = get_audio(FILEPATH)</span><br><span class="line">                flag = speech2text(speech, TOKEN, <span class="built_in">int</span>(<span class="number">1536</span>))</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;识别结果：&quot;</span> + flag)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用的是PyAudio库进行录音，存为wav格式的文件，这里使用的是借用科大讯飞API进行语音转文字，然后进行语音播报&lt;/p&gt;</summary>
    
    
    
    <category term="爬虫" scheme="https://du2279664786.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="爬虫" scheme="https://du2279664786.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
    <category term="对话机器人" scheme="https://du2279664786.github.io/tags/%E5%AF%B9%E8%AF%9D%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>爬虫动态爬取京东商品的数据</title>
    <link href="https://du2279664786.github.io/2021/11/22/2021-11-22%E7%88%AC%E8%99%AB%E5%8A%A8%E6%80%81%E7%88%AC%E5%8F%96%E4%BA%AC%E4%B8%9C%E5%95%86%E5%93%81%E7%9A%84%E6%95%B0%E6%8D%AE/"/>
    <id>https://du2279664786.github.io/2021/11/22/2021-11-22%E7%88%AC%E8%99%AB%E5%8A%A8%E6%80%81%E7%88%AC%E5%8F%96%E4%BA%AC%E4%B8%9C%E5%95%86%E5%93%81%E7%9A%84%E6%95%B0%E6%8D%AE/</id>
    <published>2021-11-22T14:55:10.000Z</published>
    <updated>2022-10-18T08:41:17.658Z</updated>
    
    <content type="html"><![CDATA[<p>根据xpath进行定位分析，提取信息、翻页等操作</p><span id="more"></span><p>@<a href="%E5%8A%A8%E6%80%81%E7%88%AC%E5%8F%96%E4%BA%AC%E4%B8%9C">TOC</a></p><h2 id="导入包"><a href="#导入包" class="headerlink" title="导入包"></a>导入包</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br></pre></td></tr></table></figure><h2 id="对DataFrame处理"><a href="#对DataFrame处理" class="headerlink" title="对DataFrame处理"></a>对DataFrame处理</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pd.set_option(<span class="string">&#x27;display.max_columns&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">pd.set_option(<span class="string">&#x27;display.width&#x27;</span>, <span class="number">150</span>)</span><br></pre></td></tr></table></figure><h2 id="评论处理"><a href="#评论处理" class="headerlink" title="评论处理"></a>评论处理</h2><p>如果含有“万”，则进行分割处理，将评论转化为int类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">com_count</span>(<span class="params">text</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;万&#x27;</span> <span class="keyword">in</span> text:</span><br><span class="line">        num = <span class="built_in">float</span>(text.split(<span class="string">&#x27;万&#x27;</span>)[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(num * <span class="number">10000</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(re.<span class="keyword">match</span>(<span class="string">&#x27;\d+&#x27;</span>, text).group())</span><br></pre></td></tr></table></figure><p>浏览器初始化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">driver = webdriver.Chrome()  <span class="comment"># 打开浏览器</span></span><br><span class="line">driver.maximize_window()  <span class="comment"># 最大化窗口</span></span><br></pre></td></tr></table></figure><h2 id="查询的网页"><a href="#查询的网页" class="headerlink" title="查询的网页"></a>查询的网页</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">key = <span class="string">&#x27;红酒&#x27;</span>  <span class="comment"># 设置搜索商品关键词</span></span><br><span class="line">url = <span class="string">&#x27;https://search.jd.com/Search?keyword=&#x27;</span> + quote(key) + <span class="string">&#x27;&amp;enc=utf-8&#x27;</span>  <span class="comment"># 构造url</span></span><br><span class="line">driver.get(url)  <span class="comment"># 打开url</span></span><br><span class="line">driver.implicitly_wait(<span class="number">3</span>)  <span class="comment"># 等待</span></span><br></pre></td></tr></table></figure><h2 id="爬取过程"><a href="#爬取过程" class="headerlink" title="爬取过程"></a>爬取过程</h2><p>&amp;emsp;&amp;emsp;分析过程如下：根据xpath进行定位分析，首先是找到价格的xpath，然后提取数据，对于商品名称，提取之后根据换行进行分割，然后保存， 然后就是分别找到商品的链接和编号，根据for遍历先储存商品名称和价格，评论的话就是调用上面的评论修正函数最有就是把数据进行保存，保存之后就进行翻页，继续爬取下一页的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">page_crawl</span>(<span class="params">results</span>):</span><br><span class="line">    res = pd.Series()  <span class="comment"># 记录单条商品信息</span></span><br><span class="line">    prices = driver.find_elements_by_xpath(<span class="string">&#x27;//*[@id=&quot;J_goodsList&quot;]/ul/li/div/div[2]/strong/i&#x27;</span>)</span><br><span class="line">    prices = [<span class="built_in">float</span>(price.text) <span class="keyword">for</span> price <span class="keyword">in</span> prices]</span><br><span class="line">    goods = driver.find_elements_by_xpath(<span class="string">&#x27;//*[@id=&quot;J_goodsList&quot;]/ul/li/div/div[3]/a/em&#x27;</span>)</span><br><span class="line">    goods = [good.text.replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>) <span class="keyword">for</span> good <span class="keyword">in</span> goods]</span><br><span class="line">    links = driver.find_elements_by_xpath(<span class="string">&#x27;//*[@id=&quot;J_goodsList&quot;]/ul/li/div/div[3]/a&#x27;</span>)  <span class="comment"># 查找当前页面的商品链接</span></span><br><span class="line">    urls = [l.get_attribute(<span class="string">&#x27;href&#x27;</span>) <span class="keyword">for</span> l <span class="keyword">in</span> links]</span><br><span class="line">    codes = [re.search(<span class="string">&#x27;\d+&#x27;</span>, url).group() <span class="keyword">for</span> url <span class="keyword">in</span> urls]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(prices)):</span><br><span class="line">        <span class="comment"># print(len(prices))</span></span><br><span class="line">        res.name = codes[ii]  <span class="comment"># 这个name是Series的名字</span></span><br><span class="line">        res[<span class="string">&#x27;good_name&#x27;</span>] = goods[ii]</span><br><span class="line">        res[<span class="string">&#x27;good_price&#x27;</span>] = prices[ii]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 评论数的抽取稍微复杂一些</span></span><br><span class="line">        <span class="comment"># 1、他的xpath不再是排序的，而是J_comment_商品编号</span></span><br><span class="line">        <span class="comment"># 2、有的单位是条，有单位是万条</span></span><br><span class="line">        com = driver.find_elements_by_xpath(<span class="string">&#x27;//*[@id=&quot;J_comment_&#123;&#125;&quot;]&#x27;</span>.<span class="built_in">format</span>(codes[ii]))</span><br><span class="line">        <span class="comment"># print(com)</span></span><br><span class="line">        res[<span class="string">&#x27;com_count&#x27;</span>] = com_count(com[<span class="number">0</span>].text)  <span class="comment"># 调用上面的万条评论的修正的函数</span></span><br><span class="line">        <span class="built_in">print</span>(res[<span class="string">&#x27;com_count&#x27;</span>])</span><br><span class="line"></span><br><span class="line">        results = results.append(res)  <span class="comment"># 各商品记录</span></span><br><span class="line">    <span class="comment"># 翻页</span></span><br><span class="line">    cl = driver.find_elements_by_xpath(<span class="string">&#x27;//*[@id=&quot;J_bottomPage&quot;]/span[1]/a[9]&#x27;</span>)</span><br><span class="line">    cl[<span class="number">0</span>].click()  <span class="comment"># 点击“下一页”</span></span><br><span class="line">    sleep(<span class="number">5</span>)  <span class="comment"># 等待</span></span><br><span class="line">    <span class="keyword">return</span> results</span><br><span class="line"></span><br><span class="line">results = pd.DataFrame()</span><br></pre></td></tr></table></figure><h2 id="关闭浏览器"><a href="#关闭浏览器" class="headerlink" title="关闭浏览器"></a>关闭浏览器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(datetime.now(), ii)</span><br><span class="line">    results = page_crawl(results)</span><br><span class="line"></span><br><span class="line">driver.close()</span><br></pre></td></tr></table></figure><p>本文和爬取苏宁的代码相似，如有不明白的请看<a href="https://blog.csdn.net/weixin_51756104/article/details/121286518?spm=1001.2014.3001.5502">爬取苏宁</a>这个文章</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;根据xpath进行定位分析，提取信息、翻页等操作&lt;/p&gt;</summary>
    
    
    
    <category term="爬虫" scheme="https://du2279664786.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="selenium" scheme="https://du2279664786.github.io/tags/selenium/"/>
    
    <category term="爬虫" scheme="https://du2279664786.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>动态爬取苏宁的商品信息</title>
    <link href="https://du2279664786.github.io/2021/11/21/2021-11-21%E7%88%AC%E8%99%AB%E5%8A%A8%E6%80%81%E7%88%AC%E5%8F%96%E8%8B%8F%E5%AE%81%E7%9A%84%E5%95%86%E5%93%81%E5%90%8D%E7%A7%B0%E3%80%81%E8%AF%84%E8%AE%BA%E6%95%B0%E3%80%81%E4%BB%B7%E6%A0%BC/"/>
    <id>https://du2279664786.github.io/2021/11/21/2021-11-21%E7%88%AC%E8%99%AB%E5%8A%A8%E6%80%81%E7%88%AC%E5%8F%96%E8%8B%8F%E5%AE%81%E7%9A%84%E5%95%86%E5%93%81%E5%90%8D%E7%A7%B0%E3%80%81%E8%AF%84%E8%AE%BA%E6%95%B0%E3%80%81%E4%BB%B7%E6%A0%BC/</id>
    <published>2021-11-21T14:55:10.000Z</published>
    <updated>2022-10-18T08:38:31.515Z</updated>
    
    <content type="html"><![CDATA[<p>爬虫动态爬取苏宁的商品名称、评论数、价格</p><span id="more"></span><p>&amp;emsp;&amp;emsp;·爬取苏宁的商品信息我们需要使用chrome浏览器，需要下载相应版本的去驱动，然后将驱动放在解释器的根目录下面，驱动版本要和浏览器的版本一致，下面是下载驱动的链接：<br><a href="http://npm.taobao.org/mirrors/chromedriver/">http://npm.taobao.org/mirrors/chromedriver/</a><br>下面就是爬取的代码以及详细的解释：</p><h2 id="导入包"><a href="#导入包" class="headerlink" title="导入包"></a>导入包</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br></pre></td></tr></table></figure><h2 id="对DataFrame进行基本的处理"><a href="#对DataFrame进行基本的处理" class="headerlink" title="对DataFrame进行基本的处理"></a>对DataFrame进行基本的处理</h2><p>   ·第一个是设置最大的列数，如果超过特定数值就会显示省略号，输入参数为None就显示所有的数据<br>    ·第二行是设置宽度，横向最多显示150个字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pd.set_option(<span class="string">&#x27;display.max_columns&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">pd.set_option(<span class="string">&#x27;display.width&#x27;</span>, <span class="number">150</span>)</span><br></pre></td></tr></table></figure><h2 id="设置网页的像素"><a href="#设置网页的像素" class="headerlink" title="设置网页的像素"></a>设置网页的像素</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">js = <span class="string">&quot;var q=document.documentElement.scrollTop=100000&quot;</span></span><br></pre></td></tr></table></figure><h2 id="处理评论"><a href="#处理评论" class="headerlink" title="处理评论"></a>处理评论</h2><p>如果评论中含有“万”，则使用split进行分割，转换成int型的评论，如果不含有“万”，则可以直接提取出来评论数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">com_count</span>(<span class="params">text</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;万&#x27;</span> <span class="keyword">in</span> text:</span><br><span class="line">        num = <span class="built_in">float</span>(text.split(<span class="string">&#x27;万&#x27;</span>)[<span class="number">0</span>])</span><br><span class="line">        <span class="built_in">print</span>(num)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(num * <span class="number">10000</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        a = re.<span class="keyword">match</span>(<span class="string">&#x27;\d+&#x27;</span>, text)</span><br><span class="line">        <span class="keyword">if</span> a:</span><br><span class="line">            <span class="keyword">return</span> a.group()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="浏览器初始化"><a href="#浏览器初始化" class="headerlink" title="浏览器初始化"></a>浏览器初始化</h2><p>Python模块selenium中的webdriver对Chrome的调用，从而进行初始化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">driver = webdriver.Chrome()  <span class="comment"># 打开浏览器</span></span><br><span class="line">driver.maximize_window()  <span class="comment"># 最大化窗口</span></span><br></pre></td></tr></table></figure><h2 id="爬取过程"><a href="#爬取过程" class="headerlink" title="爬取过程"></a>爬取过程</h2><p>&amp;emsp;&amp;emsp;接下来就是最主要的爬取数据的函数：第一部分：先定义一个Series一维的数组，然后根据xpath找到正在浏览网页的所有内容，prouduct_list是一个list，然后将list转化为str，就是product_text，然后根据特使符号进行分割，得到的是一个list，每个商品的所有数据作为列表中的一个元素，然后删除空字符串，查看一下列表的长度。第二部分：由分析得出，正常状态下，每页得到的数据应该为120个，有的含有超级会员的商品会有两个价格，这样的话就会导致数据大于120，不准确，然后就进行翻页，此页的数据不要，提取下一页的数据。如果是超级会员的话，进行分析，每个商品看成一个列表，进行分析，不难发现，每个列表的第一个数据是price，第二个数据是名称，第三个数据是评论，然后就可以进行处理了。第三部分：将每个商品的名称，价格，评论数通过遍历存入一个DataFrame二位结构的表中，然后利用append添加进去数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">results = pd.DataFrame()</span><br><span class="line"><span class="comment"># 爬取功能主函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">page_crawl</span>(<span class="params">results</span>):</span><br><span class="line">    res = pd.Series()</span><br><span class="line">    product_list = driver.find_elements_by_xpath(<span class="string">&#x27;//*[@id=&quot;product-list&quot;]&#x27;</span>)</span><br><span class="line">    product_text = product_list[<span class="number">0</span>].text</span><br><span class="line">    text_list = product_text.split(<span class="string">&#x27;¥&#x27;</span>)</span><br><span class="line">    <span class="keyword">del</span> text_list[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;len(text_list):&#x27;</span>, <span class="built_in">len</span>(text_list))</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(text_list) != <span class="number">120</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;超级会员异常，放弃！&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;没有超级会员异常，进行取数！&#x27;</span>)</span><br><span class="line">        text_list_split = [ii.split(<span class="string">&#x27;\n&#x27;</span>) <span class="keyword">for</span> ii <span class="keyword">in</span> text_list]</span><br><span class="line">        prices = [ii[<span class="number">0</span>] <span class="keyword">for</span> ii <span class="keyword">in</span> text_list_split]</span><br><span class="line">        goods = [ii[<span class="number">1</span>] <span class="keyword">for</span> ii <span class="keyword">in</span> text_list_split]</span><br><span class="line">        counts = [com_count(ii[<span class="number">2</span>]) <span class="keyword">for</span> ii <span class="keyword">in</span> text_list_split]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果有错误，可以拥入这段代码，具体定位问题</span></span><br><span class="line">        <span class="comment"># for ii in text_list_split:</span></span><br><span class="line">        <span class="comment">#     print(ii[0], ii[1], ii[2])</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(prices)):</span><br><span class="line">            res.name = goods[ii]</span><br><span class="line">            res[<span class="string">&#x27;good_name&#x27;</span>] = goods[ii]</span><br><span class="line">            res[<span class="string">&#x27;good_price&#x27;</span>] = prices[ii]</span><br><span class="line">            res[<span class="string">&#x27;com_count&#x27;</span>] = counts[ii]</span><br><span class="line"></span><br><span class="line">            results = results.append(res)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> results</span><br></pre></td></tr></table></figure><h2 id="浏览器的操作"><a href="#浏览器的操作" class="headerlink" title="浏览器的操作"></a>浏览器的操作</h2><p>&amp;emsp;&amp;emsp;自己找出url的规律，然后format格式化字符串进行连接，打开浏览器，进行翻页等操作，最后关闭浏览器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(datetime.now(), ii)</span><br><span class="line">    url = <span class="string">&#x27;https://search.suning.com/%E5%8F%A3%E7%BD%A9/&amp;iy=0&amp;isNoResult=0&amp;cp=&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(ii)</span><br><span class="line">    driver.get(url)  <span class="comment"># 打开url</span></span><br><span class="line">    sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 下翻页</span></span><br><span class="line">    driver.execute_script(js)</span><br><span class="line">    sleep(<span class="number">3</span>)</span><br><span class="line">    driver.execute_script(js)</span><br><span class="line">    sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    results = page_crawl(results)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(results.shape)</span><br><span class="line"></span><br><span class="line">driver.close()</span><br></pre></td></tr></table></figure><h2 id="写入数据库或存入CSV文件"><a href="#写入数据库或存入CSV文件" class="headerlink" title="写入数据库或存入CSV文件"></a>写入数据库或存入CSV文件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"></span><br><span class="line">conn = create_engine(<span class="string">&#x27;mysql+pymysql://root:dpb238031@localhost:3306/data?charset=utf8&#x27;</span>)</span><br><span class="line">results.to_sql(<span class="string">&#x27;data&#x27;</span>, conn, index=<span class="literal">False</span>, if_exists=<span class="string">&#x27;replace&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/66cb1a1021fd4ad997a4fddf40a698a7.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bCP55qu6bq76Iqx,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;爬虫动态爬取苏宁的商品名称、评论数、价格&lt;/p&gt;</summary>
    
    
    
    <category term="爬虫" scheme="https://du2279664786.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="爬虫，selenium" scheme="https://du2279664786.github.io/tags/%E7%88%AC%E8%99%AB%EF%BC%8Cselenium/"/>
    
  </entry>
  
</feed>
