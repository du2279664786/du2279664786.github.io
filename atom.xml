<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>江东的博客</title>
  
  <subtitle>Be overcome difficulties is victory</subtitle>
  <link href="http://www.example.com/atom.xml" rel="self"/>
  
  <link href="http://www.example.com/"/>
  <updated>2022-10-15T15:38:34.946Z</updated>
  <id>http://www.example.com/</id>
  
  <author>
    <name>xiaopi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.example.com/2022/10/15/hello-world/"/>
    <id>http://www.example.com/2022/10/15/hello-world/</id>
    <published>2022-10-15T03:00:57.930Z</published>
    <updated>2022-10-15T15:38:34.946Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><!--人体时钟背景透明--><script charset="Shift_JIS" src="http://chabudai.sakura.ne.jp/blogparts/honehoneclock/honehone_clock_tr.js"></script><!--人体时钟背景白--><script charset="Shift_JIS" src="http://chabudai.sakura.ne.jp/blogparts/honehoneclock/honehone_clock_wh.js"></script><div id="binft"></div>  <script>    var binft = function (r) {      function t() {        return b[Math.floor(Math.random() * b.length)]      }        function e() {        return String.fromCharCode(94 * Math.random() + 33)      }      function n(r) {        for (var n = document.createDocumentFragment(), i = 0; r > i; i++) {          var l = document.createElement("span");          l.textContent = e(), l.style.color = t(), n.appendChild(l)        }        return n      }      function i() {        var t = o[c.skillI];        c.step ? c.step-- : (c.step = g, c.prefixP < l.length ? (c.prefixP >= 0 && (c.text += l[c.prefixP]), c.prefixP++) : "forward" === c.direction ? c.skillP < t.length ? (c.text += t[c.skillP], c.skillP++) : c.delay ? c.delay-- : (c.direction = "backward", c.delay = a) : c.skillP > 0 ? (c.text = c.text.slice(0, -1), c.skillP--) : (c.skillI = (c.skillI + 1) % o.length, c.direction = "forward")), r.textContent = c.text, r.appendChild(n(c.prefixP < l.length ? Math.min(s, s + c.prefixP) : Math.min(s, t.length - c.skillP))), setTimeout(i, d)      }      var l = "",      o = ["青青陵上柏，磊磊涧中石。", "人生天地间，忽如远行客。","斗酒相娱乐，聊厚不为薄。", "驱车策驽马，游戏宛与洛。","洛中何郁郁，冠带自相索。","长衢罗夹巷，王侯多第宅。","两宫遥相望，双阙百余尺。","极宴娱心意，戚戚何所迫？"].map(function (r) {      return r + ""      }),      a = 2,      g = 1,      s = 5,      d = 75,      b = ["rgb(110,64,170)", "rgb(150,61,179)", "rgb(191,60,175)", "rgb(228,65,157)", "rgb(254,75,131)", "rgb(255,94,99)", "rgb(255,120,71)", "rgb(251,150,51)", "rgb(226,183,47)", "rgb(198,214,60)", "rgb(175,240,91)", "rgb(127,246,88)", "rgb(82,246,103)", "rgb(48,239,130)", "rgb(29,223,163)", "rgb(26,199,194)", "rgb(35,171,216)", "rgb(54,140,225)", "rgb(76,110,219)", "rgb(96,84,200)"],      c = {        text: "",        prefixP: -s,        skillI: 0,        skillP: 0,        direction: "forward",        delay: a,        step: g      };      i()      };      binft(document.getElementById('binft'));  </script><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Kmeans实战-实现二维的bolo分析</title>
    <link href="http://www.example.com/2021/10/21/2021-10-21Kmeans%E5%AE%9E%E6%88%98-%E5%AE%9E%E7%8E%B0%E4%BA%8C%E7%BB%B4%E7%9A%84bolo%E5%88%86%E6%9E%90/"/>
    <id>http://www.example.com/2021/10/21/2021-10-21Kmeans%E5%AE%9E%E6%88%98-%E5%AE%9E%E7%8E%B0%E4%BA%8C%E7%BB%B4%E7%9A%84bolo%E5%88%86%E6%9E%90/</id>
    <published>2021-10-21T14:55:10.000Z</published>
    <updated>2022-10-15T15:25:19.815Z</updated>
    
    <content type="html"><![CDATA[<p>对二维的bolo数据集分析与可视化</p><span id="more"></span><h1 id="首先导入包："><a href="#首先导入包：" class="headerlink" title="首先导入包："></a>首先导入包：</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入包</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt     <span class="comment"># 画图的包</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np     </span><br><span class="line"><span class="keyword">import</span> pylab <span class="keyword">as</span> mpl  <span class="comment"># import matplotlib as mpl</span></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> make_blobs   <span class="comment"># 产生数据集</span></span><br></pre></td></tr></table></figure><h1 id="默认设置："><a href="#默认设置：" class="headerlink" title="默认设置："></a>默认设置：</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mpl.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;FangSong&#x27;</span>]  <span class="comment"># 指定默认字体</span></span><br><span class="line">mpl.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span>  <span class="comment"># 解决保存图像是负号&#x27;-&#x27;显示为方块的问题</span></span><br></pre></td></tr></table></figure><h1 id="进行初始化："><a href="#进行初始化：" class="headerlink" title="进行初始化："></a>进行初始化：</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">n_samples = <span class="number">1500</span>  <span class="comment"># 生成1500个数据集</span></span><br><span class="line">random_state = <span class="number">170</span>  <span class="comment"># 170这个是随机种子</span></span><br><span class="line">k = <span class="number">3</span>  <span class="comment"># 超参数</span></span><br><span class="line">np.random.seed(<span class="number">26</span>)    <span class="comment">#给numpy设置一个随机种子，保证每次都能产生相同的值</span></span><br><span class="line">X, y = make_blobs(n_samples=n_samples, random_state=random_state)    <span class="comment"># 生成数据集，包括1500个样本</span></span><br><span class="line">ages = np.vstack((X[y == <span class="number">0</span>][:<span class="number">500</span>], X[y == <span class="number">1</span>][:<span class="number">500</span>], X[y == <span class="number">2</span>][:<span class="number">500</span>]))   <span class="comment"># 将数据进行堆叠，shape为(1500, 2)</span></span><br><span class="line">y = np.array(([<span class="number">0</span>] * <span class="number">500</span> + [<span class="number">1</span>] * <span class="number">500</span> + [<span class="number">2</span>] * <span class="number">500</span>))  <span class="comment">#生成0 1 2 各500个</span></span><br></pre></td></tr></table></figure><h1 id="迭代初始化："><a href="#迭代初始化：" class="headerlink" title="迭代初始化："></a>迭代初始化：</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">centers = np.zeros([<span class="number">3</span>, <span class="number">2</span>])    <span class="comment"># 生成0矩阵</span></span><br><span class="line">centers_random = np.random.choice(<span class="built_in">range</span>(<span class="built_in">len</span>(y)), <span class="number">3</span>)  <span class="comment"># 迭代起点</span></span><br><span class="line">centers_new = ages[centers_random]   <span class="comment"># 随机选取中心</span></span><br><span class="line">dis_to_cent = np.zeros((k, <span class="built_in">len</span>(ages)))  <span class="comment"># 一个二维数据，相当于一个空的容器</span></span><br></pre></td></tr></table></figure><h1 id="实现预测："><a href="#实现预测：" class="headerlink" title="实现预测："></a>实现预测：</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> (centers_new == centers).<span class="built_in">all</span>():</span><br><span class="line">    centers = centers_new.copy()  <span class="comment"># 注意python的赋值过程，进行展开讲解，== is 和复制方式</span></span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">        dis_to_cent[ii] = np.linalg.norm(ages - centers[ii], axis=<span class="number">1</span>)    <span class="comment"># 计算每个数值到中心的距离</span></span><br><span class="line"></span><br><span class="line">    clusters = dis_to_cent.argmin(axis=<span class="number">0</span>)   <span class="comment"># 划分出每个类别</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(k):   <span class="comment"># 重新计算中心</span></span><br><span class="line">        cluster = ages[clusters == ii]</span><br><span class="line">        centers_new[ii] = ages[clusters == ii].mean(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(centers, centers_new)</span><br><span class="line">    <span class="built_in">print</span>(centers_new)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;centers_new==centers?&#x27;</span>, (centers_new == centers).<span class="built_in">all</span>())</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;对二维的bolo数据集分析与可视化&lt;/p&gt;</summary>
    
    
    
    <category term="机器学习" scheme="http://www.example.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="机器学习" scheme="http://www.example.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Kmeans可视化" scheme="http://www.example.com/tags/Kmeans%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>KMeans算法分析以及可视化展示</title>
    <link href="http://www.example.com/2021/10/10/2021-10-10KMeans%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%BB%A5%E5%8F%8A%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B1%95%E7%A4%BA/"/>
    <id>http://www.example.com/2021/10/10/2021-10-10KMeans%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%BB%A5%E5%8F%8A%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B1%95%E7%A4%BA/</id>
    <published>2021-10-10T14:55:10.000Z</published>
    <updated>2022-10-15T15:23:27.831Z</updated>
    
    <content type="html"><![CDATA[<p>手动生成数据集并进行可视化</p><span id="more"></span><h1 id="基本流程："><a href="#基本流程：" class="headerlink" title="基本流程："></a>基本流程：</h1><h2 id="导入包"><a href="#导入包" class="headerlink" title="导入包"></a>导入包</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pylab <span class="keyword">as</span> mpl  <span class="comment"># import matplotlib as mpl</span></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> make_blobs</span><br></pre></td></tr></table></figure><h2 id="画图问题："><a href="#画图问题：" class="headerlink" title="画图问题："></a>画图问题：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mpl.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;FangSong&#x27;</span>]  <span class="comment"># 指定默认字体</span></span><br><span class="line">mpl.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span>  <span class="comment"># 解决保存图像是负号&#x27;-&#x27;显示为方块的问题</span></span><br></pre></td></tr></table></figure><h2 id="数据集的生成"><a href="#数据集的生成" class="headerlink" title="数据集的生成"></a>数据集的生成</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n_samples = 1500  # 生成1500个数据集</span><br><span class="line">random_state = 170  # 170这个是随机种子</span><br><span class="line">X, y = make_blobs(n_samples=n_samples, random_state=random_state)    # 生成数据集，包括1500个样本</span><br><span class="line">ages = np.vstack((X[y == 0][:500], X[y == 1][:500], X[y == 2][:500]))   # 将数据进行堆叠，shape为(1500, 2)</span><br><span class="line">y = np.array(([0] * 500 + [1] * 500 + [2] * 500))  #生成0 1 2 各500个</span><br></pre></td></tr></table></figure><h2 id="定义聚类中心："><a href="#定义聚类中心：" class="headerlink" title="定义聚类中心："></a>定义聚类中心：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">k = <span class="number">3</span>  <span class="comment"># 超参数</span></span><br></pre></td></tr></table></figure><h2 id="随机种子"><a href="#随机种子" class="headerlink" title="随机种子"></a>随机种子</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.seed(<span class="number">26</span>)    <span class="comment">#给numpy设置一个随机种子，保证每次都能产生相同的值</span></span><br></pre></td></tr></table></figure><h2 id="初始化："><a href="#初始化：" class="headerlink" title="初始化："></a>初始化：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">centers = np.zeros([<span class="number">3</span>, <span class="number">2</span>])    <span class="comment"># 生成0矩阵</span></span><br><span class="line">centers_random = np.random.choice(<span class="built_in">range</span>(<span class="built_in">len</span>(y)), <span class="number">3</span>)  <span class="comment"># 迭代起点</span></span><br><span class="line">centers_new = ages[centers_random]   <span class="comment"># 随机选取中心</span></span><br><span class="line">dis_to_cent = np.zeros((k, <span class="built_in">len</span>(ages)))  <span class="comment"># 一个二维数据，相当于一个空的容器</span></span><br></pre></td></tr></table></figure><h2 id="进行聚类中心的判断："><a href="#进行聚类中心的判断：" class="headerlink" title="进行聚类中心的判断："></a>进行聚类中心的判断：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> (centers_new == centers).<span class="built_in">all</span>():</span><br><span class="line">    centers = centers_new.copy()  <span class="comment"># 注意python的赋值过程，进行展开讲解，== is 和复制方式，这里是浅拷贝</span></span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">        dis_to_cent[ii] = np.linalg.norm(ages - centers[ii], axis=<span class="number">1</span>)    <span class="comment"># 计算每个数值到中心的距离</span></span><br><span class="line"></span><br><span class="line">    clusters = dis_to_cent.argmin(axis=<span class="number">0</span>)   <span class="comment"># 划分出每个类别</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(k):   <span class="comment"># 重新计算中心</span></span><br><span class="line">        cluster = ages[clusters == ii]</span><br><span class="line">        centers_new[ii] = ages[clusters == ii].mean(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(centers, centers_new)</span><br><span class="line">    <span class="built_in">print</span>(centers_new)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;centers_new==centers?&#x27;</span>, (centers_new == centers).<span class="built_in">all</span>())</span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><h2 id="最后实现可视化的展示："><a href="#最后实现可视化的展示：" class="headerlink" title="最后实现可视化的展示："></a>最后实现可视化的展示：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">**plt.figure(figsize=(<span class="number">8</span>, <span class="number">4</span>))   <span class="comment">#创建画布</span></span><br><span class="line">ax = plt.subplot(<span class="number">121</span>)  <span class="comment"># 几行，几列，第几个，先按行数</span></span><br><span class="line">ax.scatter(ages[:, <span class="number">0</span>], ages[:, <span class="number">1</span>], c=y)  <span class="comment"># x, y, 颜色，系统有基本的选择机制，不用写得太细</span></span><br><span class="line"></span><br><span class="line">ax.set_title(<span class="string">&#x27;数据本身的标签&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ax = plt.subplot(<span class="number">122</span>)  <span class="comment"># 几行，几列，第几个，先按行数</span></span><br><span class="line">ax.scatter(ages[:, <span class="number">0</span>], ages[:, <span class="number">1</span>], c=clusters)  <span class="comment"># x, y, 颜色，系统有基本的选择机制，不用写得太细</span></span><br><span class="line"></span><br><span class="line">ax.set_title(<span class="string">&#x27;聚类的结果&#x27;</span>)**</span><br></pre></td></tr></table></figure><h2 id="可视化的结果："><a href="#可视化的结果：" class="headerlink" title="可视化的结果："></a>可视化的结果：</h2><p><img src="https://img-blog.csdnimg.cn/43e3ae4a0ea548ffb2550a154cfca28b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bCP55qu6bq76Iqx,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;手动生成数据集并进行可视化&lt;/p&gt;</summary>
    
    
    
    <category term="机器学习" scheme="http://www.example.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="机器学习" scheme="http://www.example.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Kmeans" scheme="http://www.example.com/tags/Kmeans/"/>
    
  </entry>
  
  <entry>
    <title>KNN实现鸢尾花数据集的可视化</title>
    <link href="http://www.example.com/2021/10/09/2021-10-09KNN%E5%AE%9E%E7%8E%B0%E9%B8%A2%E5%B0%BE%E8%8A%B1%E6%95%B0%E6%8D%AE%E9%9B%86%E7%9A%84%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    <id>http://www.example.com/2021/10/09/2021-10-09KNN%E5%AE%9E%E7%8E%B0%E9%B8%A2%E5%B0%BE%E8%8A%B1%E6%95%B0%E6%8D%AE%E9%9B%86%E7%9A%84%E5%8F%AF%E8%A7%86%E5%8C%96/</id>
    <published>2021-10-09T14:55:10.000Z</published>
    <updated>2022-10-15T14:57:13.550Z</updated>
    
    <content type="html"><![CDATA[<p>kNN实现鸢尾花可视化代码</p><span id="more"></span><h1 id="首先导入包："><a href="#首先导入包：" class="headerlink" title="首先导入包："></a>首先导入包：</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib.colors <span class="keyword">import</span> ListedColormap</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br></pre></td></tr></table></figure><h1 id="获取数据："><a href="#获取数据：" class="headerlink" title="获取数据："></a>获取数据：</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iris = load_iris()  <span class="comment"># 加载数据</span></span><br><span class="line">X = iris.data[:, (<span class="number">1</span>, <span class="number">3</span>)]  <span class="comment"># 为方便画图，仅采用数据的其中两个特征</span></span><br><span class="line">y = iris.target</span><br></pre></td></tr></table></figure><h1 id="设置画图的颜色深浅："><a href="#设置画图的颜色深浅：" class="headerlink" title="设置画图的颜色深浅："></a>设置画图的颜色深浅：</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cmap_light = ListedColormap([<span class="string">&#x27;#FFAAAA&#x27;</span>, <span class="string">&#x27;#AAFFAA&#x27;</span>, <span class="string">&#x27;#AAAAFF&#x27;</span>])</span><br><span class="line">cmap_bold = ListedColormap([<span class="string">&#x27;#FF0000&#x27;</span>, <span class="string">&#x27;#00FF00&#x27;</span>, <span class="string">&#x27;#0000FF&#x27;</span>]</span><br></pre></td></tr></table></figure><h1 id="决策边界，用不同的颜色表示："><a href="#决策边界，用不同的颜色表示：" class="headerlink" title="决策边界，用不同的颜色表示："></a>决策边界，用不同的颜色表示：</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x_min, x_max = X[:, <span class="number">0</span>].<span class="built_in">min</span>() - <span class="number">0.1</span>, X[:, <span class="number">0</span>].<span class="built_in">max</span>() + <span class="number">0.1</span></span><br><span class="line">y_min, y_max = X[:, <span class="number">1</span>].<span class="built_in">min</span>() - <span class="number">0.1</span>, X[:, <span class="number">1</span>].<span class="built_in">max</span>() + <span class="number">0.1</span></span><br><span class="line">xx, yy = np.meshgrid(np.arange(x_min, x_max, <span class="number">0.02</span>),</span><br><span class="line">                     np.arange(y_min, y_max, <span class="number">0.02</span>))</span><br></pre></td></tr></table></figure><h1 id="KNN原理："><a href="#KNN原理：" class="headerlink" title="KNN原理："></a>KNN原理：</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">knn_code</span>(<span class="params">loc, k=<span class="number">5</span>, order=<span class="number">2</span> </span>):  <span class="comment"># k order是超参</span></span><br><span class="line">    diff_loc = X - loc</span><br><span class="line">    dis_loc = np.linalg.norm(diff_loc, <span class="built_in">ord</span>=order, axis=<span class="number">1</span>) <span class="comment"># 没有axis得到一个数，矩阵的泛数。axis=0，得到两个数</span></span><br><span class="line">    knn = y[dis_loc.argsort()[:k]]</span><br><span class="line">    counts = np.bincount(knn)</span><br><span class="line">    <span class="keyword">return</span> np.argmax(counts</span><br></pre></td></tr></table></figure><h1 id="将数据合并："><a href="#将数据合并：" class="headerlink" title="将数据合并："></a>将数据合并：</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">line_loc = np.array(<span class="built_in">list</span>(<span class="built_in">zip</span>(xx.ravel(), yy.ravel())))</span><br></pre></td></tr></table></figure><h1 id="进行画图："><a href="#进行画图：" class="headerlink" title="进行画图："></a>进行画图：</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">15</span>, <span class="number">12</span>))  <span class="comment"># 图的尺寸</span></span><br><span class="line"></span><br><span class="line">pos = <span class="number">1</span>  <span class="comment"># 位置计数器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> [<span class="number">2</span>, <span class="number">6</span>]:</span><br><span class="line">    <span class="keyword">for</span> order <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>]:</span><br><span class="line"></span><br><span class="line">        Z = np.array([knn_code(ii, k, order) <span class="keyword">for</span> ii <span class="keyword">in</span> line_loc]).reshape(xx.shape)  <span class="comment"># 这个是不支持向量化运算的</span></span><br><span class="line">        ax = plt.subplot(<span class="number">220</span> + pos)  <span class="comment"># 几行，几列，第几个，先按行数</span></span><br><span class="line">        ax.pcolormesh(xx, yy, Z, cmap=cmap_light, shading=<span class="string">&#x27;auto&#x27;</span>)  <span class="comment"># 绘制预测结果图</span></span><br><span class="line">        ax.scatter(X[:, <span class="number">0</span>], X[:, <span class="number">1</span>], c=y, cmap=cmap_bold)  <span class="comment"># 补充训练数据点</span></span><br><span class="line">        ax.set_title(<span class="string">f&#x27;k: <span class="subst">&#123;k&#125;</span>, distance order: <span class="subst">&#123;order&#125;</span>&#x27;</span>)</span><br><span class="line">        pos += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">plt.suptitle(<span class="string">&#x27;I am a tuner!&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h1 id="可视化展示"><a href="#可视化展示" class="headerlink" title="可视化展示:"></a>可视化展示:</h1><p><img src="https://img-blog.csdnimg.cn/895a06844b024714835b82441349e3f4.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bCP55qu6bq76Iqx,size_20,color_FFFFFF,t_70,g_se,x_16" alt="可视化"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;kNN实现鸢尾花可视化代码&lt;/p&gt;</summary>
    
    
    
    <category term="机器学习" scheme="http://www.example.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="机器学习" scheme="http://www.example.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="KNN可视化" scheme="http://www.example.com/tags/KNN%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>查找list中出现次数最多的元素</title>
    <link href="http://www.example.com/2021/09/21/2021-09-21%E8%8E%B7%E5%8F%96List%E4%B8%AD%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E6%9C%80%E5%A4%9A%E7%9A%84%E9%82%A3%E4%B8%AA%E6%95%B0/"/>
    <id>http://www.example.com/2021/09/21/2021-09-21%E8%8E%B7%E5%8F%96List%E4%B8%AD%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E6%9C%80%E5%A4%9A%E7%9A%84%E9%82%A3%E4%B8%AA%E6%95%B0/</id>
    <published>2021-09-21T14:55:10.000Z</published>
    <updated>2022-10-15T15:16:01.779Z</updated>
    
    <content type="html"><![CDATA[<p>用三种方法来查看列表中出现次数最多的元素</p><span id="more"></span><h1 id="·步骤一首先将元素存入词典"><a href="#·步骤一首先将元素存入词典" class="headerlink" title="·步骤一首先将元素存入词典"></a>·步骤一首先将元素存入词典</h1><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">data = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>]</span><br><span class="line">dic = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">in</span> dic.keys():</span><br><span class="line">        dic[i] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        dic[i] = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(dic)</span><br></pre></td></tr></table></figure><h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法二 </span></span><br><span class="line">data = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>]</span><br><span class="line">dic = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">    i = <span class="built_in">str</span>(i)</span><br><span class="line">    dic[i] = dic.get(i, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(dic)</span><br></pre></td></tr></table></figure><h3 id="方法三："><a href="#方法三：" class="headerlink" title="方法三："></a>方法三：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line">data = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>]</span><br><span class="line">dic = Counter(data)</span><br></pre></td></tr></table></figure><h1 id="·步骤二：统计次数："><a href="#·步骤二：统计次数：" class="headerlink" title="·步骤二：统计次数："></a>·步骤二：统计次数：</h1><h3 id="方法一：argman函数"><a href="#方法一：argman函数" class="headerlink" title="方法一：argman函数"></a>方法一：argman函数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"># 添加数据</span><br><span class="line">lis = []</span><br><span class="line">for i in dic:</span><br><span class="line">    lis.append(dic[i])</span><br><span class="line">    </span><br><span class="line">tem = np.array(lis)</span><br><span class="line">print(&quot;在列表中出现最多的那个数是：&quot;,list(dic.keys())[tem.argmax()])</span><br></pre></td></tr></table></figure><h3 id="方法二：argsort方法"><a href="#方法二：argsort方法" class="headerlink" title="方法二：argsort方法"></a>方法二：argsort方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 添加数据</span></span><br><span class="line">lis = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> dic:</span><br><span class="line">    lis.append(dic[i])</span><br><span class="line">    </span><br><span class="line">tem = np.array(lis)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;在列表中出现最多的那个数是：&quot;</span>,<span class="built_in">list</span>(dic.keys())[tem.argsort()[-<span class="number">1</span>]])</span><br></pre></td></tr></table></figure><h3 id="方法三：打擂台法"><a href="#方法三：打擂台法" class="headerlink" title="方法三：打擂台法"></a>方法三：打擂台法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">lis = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> dic:</span><br><span class="line">    lis.append(dic[i])</span><br><span class="line"></span><br><span class="line">diff = lis[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> lis:</span><br><span class="line">    <span class="keyword">if</span> i &gt; diff:</span><br><span class="line">        diff = i</span><br><span class="line">        inde = lis.index(i)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;在列表中出现最多的那个数是：&quot;</span>, <span class="built_in">list</span>(dic.keys())[inde])</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;用三种方法来查看列表中出现次数最多的元素&lt;/p&gt;</summary>
    
    
    
    <category term="机器学习" scheme="http://www.example.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="机器学习" scheme="http://www.example.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>机器学习算法-KNN</title>
    <link href="http://www.example.com/2021/09/20/2021-09-20%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95-KNN/"/>
    <id>http://www.example.com/2021/09/20/2021-09-20%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95-KNN/</id>
    <published>2021-09-20T14:55:10.000Z</published>
    <updated>2022-10-15T15:17:01.077Z</updated>
    
    <content type="html"><![CDATA[<p>根据knn的步骤写出knn的代码并画出决策边界</p><span id="more"></span><h1 id="·KNN算法的基本过程："><a href="#·KNN算法的基本过程：" class="headerlink" title="·KNN算法的基本过程："></a>·KNN算法的基本过程：</h1><p>1）计算测试数据与各个训练数据之间的距离<br>2）按照距离的递增关系进行排序</p><p>3）选取距离最小的K个点<br>4）确定前K个点所在类别的出现频率<br>5）返回前K个点中出现频率最高的类别作为测试数据的预测分类</p><h1 id="·算法的优缺点"><a href="#·算法的优缺点" class="headerlink" title="·算法的优缺点"></a>·算法的优缺点</h1><p>优点：精度高、对异常值不敏<br>缺点：计算复杂度高、空间复杂度高</p><p>基本实现流程：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入包</span></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载数据集</span></span><br><span class="line">iris = load_iris()</span><br><span class="line"><span class="comment"># 数据集的划分</span></span><br><span class="line">x_train, x_test, y_train, y_test = train_test_split(iris.data, iris.target, random_state=<span class="number">666</span>, test_size=<span class="number">0.2</span>)</span><br><span class="line"><span class="comment"># 设置邻居数，即n_neighbors的大小</span></span><br><span class="line">knn = KNeighborsClassifier(n_neighbors=<span class="number">5</span>)</span><br><span class="line">knn.fit(x_train, y_train)</span><br><span class="line"></span><br><span class="line">y_pre = knn.predict(x_test)</span><br><span class="line"><span class="comment"># print(y_pre=y_test)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;准确率为：\n&quot;</span>, knn.score(x_test, y_pre))</span><br></pre></td></tr></table></figure><h1 id="·手撕KNN代码，刨析KNN原理"><a href="#·手撕KNN代码，刨析KNN原理" class="headerlink" title="·手撕KNN代码，刨析KNN原理"></a>·手撕KNN代码，刨析KNN原理</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib.colors <span class="keyword">import</span> ListedColormap</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"></span><br><span class="line"><span class="comment"># %matplotlib inline</span></span><br><span class="line"></span><br><span class="line">iris = load_iris()  <span class="comment"># 加载数据</span></span><br><span class="line">X = iris.data[:, (<span class="number">1</span>, <span class="number">3</span>)]  <span class="comment"># 为方便画图，仅采用数据的其中两个特征</span></span><br><span class="line">y = iris.target</span><br><span class="line"></span><br><span class="line">cmap_light = ListedColormap([<span class="string">&#x27;#FFAAAA&#x27;</span>, <span class="string">&#x27;#AAFFAA&#x27;</span>, <span class="string">&#x27;#AAAAFF&#x27;</span>])</span><br><span class="line">cmap_bold = ListedColormap([<span class="string">&#x27;#FF0000&#x27;</span>, <span class="string">&#x27;#00FF00&#x27;</span>, <span class="string">&#x27;#0000FF&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 决策边界，用不同颜色表示</span></span><br><span class="line">x_min, x_max = X[:, <span class="number">0</span>].<span class="built_in">min</span>() - <span class="number">0.1</span>, X[:, <span class="number">0</span>].<span class="built_in">max</span>() + <span class="number">0.1</span></span><br><span class="line">y_min, y_max = X[:, <span class="number">1</span>].<span class="built_in">min</span>() - <span class="number">0.1</span>, X[:, <span class="number">1</span>].<span class="built_in">max</span>() + <span class="number">0.1</span></span><br><span class="line">xx, yy = np.meshgrid(np.arange(x_min, x_max, <span class="number">0.02</span>),</span><br><span class="line">                     np.arange(y_min, y_max, <span class="number">0.02</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">knn_code</span>(<span class="params">loc, k=<span class="number">5</span>, order=<span class="number">2</span> </span>):  <span class="comment"># k order是超参</span></span><br><span class="line">    <span class="comment"># print(order)</span></span><br><span class="line">    diff_loc = X - loc</span><br><span class="line">    dis_loc = np.linalg.norm(diff_loc, <span class="built_in">ord</span>=order, axis=<span class="number">1</span>) <span class="comment"># 没有axis得到一个数，矩阵的泛数。axis=0，得到两个数</span></span><br><span class="line">    knn = y[dis_loc.argsort()[:k]]</span><br><span class="line">    counts = np.bincount(knn)</span><br><span class="line">    <span class="keyword">return</span> np.argmax(counts)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">line_loc = np.array(<span class="built_in">list</span>(<span class="built_in">zip</span>(xx.ravel(), yy.ravel())))</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">15</span>, <span class="number">12</span>))  <span class="comment"># 图的尺寸</span></span><br><span class="line"></span><br><span class="line">pos = <span class="number">1</span>  <span class="comment"># 位置计数器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> [<span class="number">2</span>, <span class="number">6</span>]:</span><br><span class="line">    <span class="keyword">for</span> order <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>]:</span><br><span class="line">        Z = np.array([knn_code(ii, k, order) <span class="keyword">for</span> ii <span class="keyword">in</span> line_loc]).reshape(xx.shape)  <span class="comment"># 这个是不支持向量化运算的</span></span><br><span class="line">        ax = plt.subplot(<span class="number">220</span> + pos)  <span class="comment"># 几行，几列，第几个，先按行数</span></span><br><span class="line">        ax.pcolormesh(xx, yy, Z, cmap=cmap_light, shading=<span class="string">&#x27;auto&#x27;</span>)  <span class="comment"># 绘制预测结果图</span></span><br><span class="line">        ax.scatter(X[:, <span class="number">0</span>], X[:, <span class="number">1</span>], c=y, cmap=cmap_bold)  <span class="comment"># 补充训练数据点</span></span><br><span class="line">        ax.set_title(<span class="string">f&#x27;k: <span class="subst">&#123;k&#125;</span>, distance order: <span class="subst">&#123;order&#125;</span>&#x27;</span>)</span><br><span class="line">        pos += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">plt.suptitle(<span class="string">&#x27;I am a tuner!&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>KNN实现鸢尾花可视化<img src="https://img-blog.csdnimg.cn/0e791c3af82341aa966760e72856e78c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bCP55qu6bq76Iqx,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;根据knn的步骤写出knn的代码并画出决策边界&lt;/p&gt;</summary>
    
    
    
    <category term="机器学习" scheme="http://www.example.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="机器学习" scheme="http://www.example.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="KNN" scheme="http://www.example.com/tags/KNN/"/>
    
  </entry>
  
  <entry>
    <title>机器学习算法-Logistic Regressi</title>
    <link href="http://www.example.com/2021/09/03/2021-09-03%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95-Logistic%20Regressi%20(1)/"/>
    <id>http://www.example.com/2021/09/03/2021-09-03%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95-Logistic%20Regressi%20(1)/</id>
    <published>2021-09-03T14:55:10.000Z</published>
    <updated>2022-10-15T15:17:48.101Z</updated>
    
    <content type="html"><![CDATA[<p>逻辑回归并不是一个回归算法，它是一个分类算法；通过拟合一个逻辑函数来预测一个离散型因变量的值（预测一个概率值，基于0与1）</p><span id="more"></span><h1 id="·逻辑回归"><a href="#·逻辑回归" class="headerlink" title="·逻辑回归"></a>·逻辑回归</h1><ul><li>与线性回归不同的是，逻辑回归并不是一个回归算法，它是一个分类算法；通过拟合一个逻辑函数来预测一个离散型因变量的值（预测一个概率值，基于0与1），来描述自变量对因变量的影响程度。</li></ul><p>自变量可以有一个，也可以有多个。其中，一个自变量被称为一元逻辑回归，而多个自变量被称为多元逻辑回归。以实例而言，逻辑回归可以预测一封邮件是垃圾邮件的概率是多少。同时，因为结果是概率值，它同样可以对点击率等结果做排名模型预测</p><ul><li>基本代码实现：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 关于逻辑回</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//# 首先导入包：</span></span><br><span class="line"><span class="keyword">from</span> sklearn.<span class="property">datasets</span> <span class="keyword">import</span> load_iris</span><br><span class="line"></span><br><span class="line">iris = <span class="title function_">load_iris</span>()</span><br><span class="line"></span><br><span class="line"># 前两列数据（花萼长度与宽度）进行回归分类</span><br><span class="line">X = iris.<span class="property">data</span>[:, :<span class="number">2</span>]</span><br><span class="line">Y = iris.<span class="property">target</span></span><br><span class="line"></span><br><span class="line"># 分割数据集：</span><br><span class="line"><span class="keyword">from</span> sklearn.<span class="property">model_selection</span> <span class="keyword">import</span> train_test_split</span><br><span class="line"></span><br><span class="line">x_train, x_test, y_train, y_test = <span class="title function_">train_test_split</span>(X, Y, random_state=<span class="number">66</span>, test_size=<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line"># 导入模型， 调佣逻辑回归函数<span class="title class_">LogisticRegrssion</span>()函数</span><br><span class="line"><span class="keyword">from</span> sklearn.<span class="property">linear_model</span> <span class="keyword">import</span> <span class="title class_">LogisticRegression</span></span><br><span class="line"></span><br><span class="line"># 训练模型</span><br><span class="line">lr = <span class="title class_">LogisticRegression</span>(penalty=<span class="string">&quot;l2&quot;</span>, solver=<span class="string">&#x27;newton-cg&#x27;</span>, multi_class=<span class="string">&#x27;multinomial&#x27;</span>)</span><br><span class="line">lr.<span class="title function_">fit</span>(x_train, y_train)</span><br><span class="line"># 关于模型的参数：</span><br><span class="line"># penalty：正则化选择参数，默认方式为 <span class="variable constant_">L2</span> 正则化</span><br><span class="line"># solver：优化算法选择参数，有&#123;‘newton-cg’, ‘lbfgs’, ‘liblinear’, ‘sag’&#125;四种参数，如果你是用的是 <span class="variable constant_">L1</span> 正则化，则只能使用 libinear，这是因为 <span class="variable constant_">L1</span> 正则化并不是一个连续可导的损失函数。</span><br><span class="line"># muti_class：分类方式选择参数，包括&#123;‘ovr’, ‘multinomial’&#125;两种参数。简单来说，<span class="title class_">OvR</span> 相对简单，但分类效果相对略差（这里指大多数样本分布情况，某些样本分布下 <span class="title class_">OvR</span> 可能更好）。而 <span class="title class_">MvM</span> 分类相对精确，但是分类速度没有 <span class="title class_">OvR</span> 快。</span><br><span class="line"></span><br><span class="line"># 预测数据</span><br><span class="line">y_pre = lr.<span class="title function_">predict</span>(x_test)</span><br><span class="line"></span><br><span class="line"># 准确率的评估</span><br><span class="line"><span class="title function_">print</span>(<span class="string">&quot;逻辑回归训练集数据的准确率为\n&quot;</span>, lr.<span class="title function_">score</span>(x_train, y_train))</span><br><span class="line"><span class="title function_">print</span>(<span class="string">&quot;逻辑回归测试集数据的准确率为\n&quot;</span>, lr.<span class="title function_">score</span>(x_test, y_test))</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> metrics</span><br><span class="line">accuracy = metrics.<span class="title function_">accuracy_score</span>(y_pre, y_test)</span><br><span class="line"><span class="title function_">print</span>(<span class="string">&#x27;逻辑回归模型准确率：%.3f&#x27;</span>% accuracy)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>公众号：欢迎转发和关注本公众号，经常分享一些基础的学习知识。欢迎关注！！！</p><p><img src="https://img-blog.csdnimg.cn/b45ed81227604d569a2ca4f50cfee1aa.jpg?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bCP55qu6bq76Iqx,size_20,color_FFFFFF,t_70,g_se,x_16" alt="请添加图片描述"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;逻辑回归并不是一个回归算法，它是一个分类算法；通过拟合一个逻辑函数来预测一个离散型因变量的值（预测一个概率值，基于0与1）&lt;/p&gt;</summary>
    
    
    
    <category term="机器学习" scheme="http://www.example.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="机器学习" scheme="http://www.example.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="逻辑回归" scheme="http://www.example.com/tags/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>Pandas基础</title>
    <link href="http://www.example.com/2021/05/21/2021-05-02-Pandas%E5%9F%BA%E7%A1%80/"/>
    <id>http://www.example.com/2021/05/21/2021-05-02-Pandas%E5%9F%BA%E7%A1%80/</id>
    <published>2021-05-21T14:55:10.000Z</published>
    <updated>2022-10-15T15:18:10.703Z</updated>
    
    <content type="html"><![CDATA[<p>DataFrame是一个表格型的数据结构，它含有一组 有序 的列，每列可以是不同的值类型</p><span id="more"></span><p>DataFrame介绍：</p><p>DataFrame是一个表格型的数据结构，它含有一组 有序 的列，每列可以是不同的值类型（数值、字符串、布尔值等）。</p><p>导入包：</p><p><img src="https://img-blog.csdnimg.cn/20210502192544593.png" alt="在这里插入图片描述"></p><p>  1.将字典转化为DataFrame</p><p>  定义字典：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;<span class="string">&quot;grammer&quot;</span>:[<span class="string">&quot;Python&quot;</span>,<span class="string">&quot;C&quot;</span>,<span class="string">&quot;Java&quot;</span>,<span class="string">&quot;GO&quot;</span>,np.nan,<span class="string">&quot;SQL&quot;</span>,<span class="string">&quot;PHP&quot;</span>,<span class="string">&quot;Python&quot;</span>],</span><br><span class="line">       <span class="string">&quot;score&quot;</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">10</span>]&#125;</span><br></pre></td></tr></table></figure><p>   将字典转化为DataFrame：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(data)</span><br></pre></td></tr></table></figure><pre><code>得到：</code></pre><p> <img src="https://img-blog.csdnimg.cn/20210502192739302.png" alt="在这里插入图片描述"></p><p>2.提取含有字符串“Python”行：</p><p>方法一：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">df[df[<span class="string">&#x27;grammer&#x27;</span>] == <span class="string">&#x27;Python&#x27;</span>]</span><br></pre></td></tr></table></figure><p>方法二：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">results = df[<span class="string">&#x27;grammer&#x27;</span>].<span class="built_in">str</span>.contains(<span class="string">&quot;Python&quot;</span>)</span><br><span class="line">results.fillna(value=<span class="literal">False</span>,inplace = <span class="literal">True</span>)</span><br><span class="line">df[results]</span><br></pre></td></tr></table></figure><p>得到的结果：<br><img src="https://img-blog.csdnimg.cn/20210502192812667.png" alt="在这里插入图片描述"></p><p>3.输出列名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(df.columns)</span><br></pre></td></tr></table></figure><p>得到的结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Out[<span class="number">28</span>]: Index([<span class="string">&#x27;grammer&#x27;</span>, <span class="string">&#x27;score&#x27;</span>], dtype=<span class="string">&#x27;object&#x27;</span>)</span><br></pre></td></tr></table></figure><p>4.将第二列改成“popularity”:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">df.rename(columns = &#123;<span class="string">&#x27;score&#x27;</span>:<span class="string">&#x27;popularity&#x27;</span>&#125;, inplace = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>输出df：</p><p><img src="https://img-blog.csdnimg.cn/20210502192842315.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTc1NjEwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>5.统计grammer每一列中编程语言出现的次数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">&#x27;grammer&#x27;</span>].value_counts()</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://img-blog.csdnimg.cn/20210502192858266.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTc1NjEwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>6.提取popularity中大于三的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[df[<span class="string">&#x27;score&#x27;</span>]&gt;<span class="number">3</span>]</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://img-blog.csdnimg.cn/20210502192910111.png" alt="在这里插入图片描述"></p><p>7.按照grammer列进行去除重复值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">df.drop_duplicates([<span class="string">&#x27;grammer&#x27;</span>])</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210502192948980.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTc1NjEwNA==,size_16,color_FFFFFF,t_70" alt="图片"></p><p>8.计算popularity列的平均值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">&#x27;score&#x27;</span>].mean()</span><br></pre></td></tr></table></figure><p>9.将grammer列转化为list：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">df[<span class="string">&#x27;grammer&#x27;</span>].tolist()</span><br></pre></td></tr></table></figure><p>10.将DataFrame保存为csv</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.to_csv(<span class="string">&quot;text.csv&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果得到了一个csv文件：</p><p><img src="https://img-blog.csdnimg.cn/20210502192956593.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTc1NjEwNA==,size_16,color_FFFFFF,t_70" alt="图片"></p><p><a href="https://www.heywhale.com/mw/project/6047189c89c874001524f6c9?token=43ba0f12bfd74662">task来源于和鲸训练营</a></p>]]></content>
    
    
    <summary type="html">这是显示在首页的概述，正文内容均会被隐藏。</summary>
    
    
    
    <category term="机器学习" scheme="http://www.example.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="机器学习" scheme="http://www.example.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="数据处理" scheme="http://www.example.com/tags/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
</feed>
