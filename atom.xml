<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>江东的笔记</title>
  
  <subtitle>Be overcome difficulties is victory</subtitle>
  <link href="https://du2279664786.github.io/atom.xml" rel="self"/>
  
  <link href="https://du2279664786.github.io/"/>
  <updated>2023-01-06T11:21:02.342Z</updated>
  <id>https://du2279664786.github.io/</id>
  
  <author>
    <name>江东</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>单片机复习</title>
    <link href="https://du2279664786.github.io/posts/c57f0e83.html"/>
    <id>https://du2279664786.github.io/posts/c57f0e83.html</id>
    <published>2023-01-05T14:55:10.000Z</published>
    <updated>2023-01-06T11:21:02.342Z</updated>
    
    <content type="html"><![CDATA[<p>单片机四个实验</p><span id="more"></span><h1 id="单片机复习"><a href="#单片机复习" class="headerlink" title="单片机复习"></a>单片机复习</h1><h2 id="实验一带有数码管的交通信号灯"><a href="#实验一带有数码管的交通信号灯" class="headerlink" title="实验一带有数码管的交通信号灯"></a>实验一带有数码管的交通信号灯</h2><p>代码  带有数码管的交通信号灯</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;reg51.h&gt;</span><br><span class="line">#include&lt;intrins.h&gt;</span><br><span class="line">#define uchar unsigned char</span><br><span class="line">#define uint unsigned int</span><br><span class="line">uchar code DSY_CODE[]=&#123;0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6ff&#125;;</span><br><span class="line">sbit GREEN_A=P0^0;</span><br><span class="line">sbit YELLOW_A=P0^1;</span><br><span class="line">sbit RED_A=P0^2;</span><br><span class="line">sbit GREEN_B=P0^3;</span><br><span class="line">sbit YELLOW_B=P0^4;</span><br><span class="line">sbit RED_B=P0^5;</span><br><span class="line">void DelayMS(uint x)//延时程序</span><br><span class="line">&#123;</span><br><span class="line">uchar i;</span><br><span class="line">while(x--)</span><br><span class="line">for(i=0;i&lt;120;i++);</span><br><span class="line">&#125;</span><br><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">int i=0;</span><br><span class="line">int j=0;</span><br><span class="line">while(1)</span><br><span class="line">&#123;</span><br><span class="line">RED_A=1;YELLOW_A=1;GREEN_A=0;//A方向绿灯亮</span><br><span class="line">RED_B=0;YELLOW_B=1;GREEN_B=1;//B方向红灯亮</span><br><span class="line">P1=0x00;P2=0x00;</span><br><span class="line">for(i=1;i&gt;=0;i--)//数码管第一位循环函数</span><br><span class="line">&#123;</span><br><span class="line">P1=DSY_CODE[i];//数码管第一位数字</span><br><span class="line">for(j=9;j&gt;=0;j--)//数码管第二位循环函数</span><br><span class="line">&#123;</span><br><span class="line">P2=DSY_CODE[j];//数码管第二位数字</span><br><span class="line">DelayMS(500);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">RED_A=1;YELLOW_A=1;GREEN_A=1;//A方向绿灯灭</span><br><span class="line">for(i=0;i&lt;3;i++)//黄灯闪烁函数</span><br><span class="line">&#123;</span><br><span class="line">RED_A=1;YELLOW_A=0;GREEN_A=1;</span><br><span class="line">DelayMS(200);</span><br><span class="line">RED_A=1;YELLOW_A=1;GREEN_A=1;</span><br><span class="line">DelayMS(200);</span><br><span class="line">&#125;</span><br><span class="line">RED_A=0;YELLOW_A=1;GREEN_A=1;</span><br><span class="line">RED_B=1;YELLOW_B=1;GREEN_B=0;</span><br><span class="line">for(i=1;i&gt;=0;i--)</span><br><span class="line">&#123;</span><br><span class="line">P1=DSY_CODE[i];</span><br><span class="line">for(j=9;j&gt;=0;j--)</span><br><span class="line">&#123;</span><br><span class="line">P2=DSY_CODE[j];</span><br><span class="line">DelayMS(500);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">RED_B=1;YELLOW_B=1;GREEN_B=1;</span><br><span class="line">for(i=0;i&lt;3;i++)</span><br><span class="line">&#123;</span><br><span class="line">RED_B=1;YELLOW_B=0;GREEN_B=1;</span><br><span class="line">DelayMS(200);</span><br><span class="line">RED_B=1;YELLOW_B=1;GREEN_B=1;</span><br><span class="line">DelayMS(200);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/01/06/sBOy3ExFLMoQtud.png" alt="Snipaste_2023-01-06_19-11-28.png"></p><h2 id="实验二按键控制的流水灯"><a href="#实验二按键控制的流水灯" class="headerlink" title="实验二按键控制的流水灯"></a>实验二按键控制的流水灯</h2><p>代码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;reg51.h&gt;</span><br><span class="line">#include&lt;intrins.h&gt;</span><br><span class="line">#define uchar unsigned char</span><br><span class="line">#define uint unsigned int</span><br><span class="line">void DelayMS(uint x)</span><br><span class="line">&#123;</span><br><span class="line">uchar i;</span><br><span class="line">while(x--)</span><br><span class="line">&#123;</span><br><span class="line">for(i=0;i&lt;120;i++);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">P0=0xfe;</span><br><span class="line">while(1)</span><br><span class="line">&#123;</span><br><span class="line">P0=_crol_(P0,1);</span><br><span class="line">DelayMS(150);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/01/06/WDPCM4X391t2bGA.png" alt="Snipaste_2023-01-06_19-13-41.png"></p><h2 id="实验三-按键计数显示-四个button"><a href="#实验三-按键计数显示-四个button" class="headerlink" title="实验三  按键计数显示(四个button)"></a>实验三  按键计数显示(四个button)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;reg51.h&gt;</span><br><span class="line">unsigned char code table[]=&#123;0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f&#125;;</span><br><span class="line">//unsigned   int   count=0;</span><br><span class="line">unsigned   int   decade=0;</span><br><span class="line">#define uchar unsigned char</span><br><span class="line">#define uint unsigned int </span><br><span class="line">uint gewei=0;//可舍弃</span><br><span class="line">int count=0;</span><br><span class="line">//int decade=0;</span><br><span class="line">//sbit  P35=P3^5;</span><br><span class="line">void DelayMS(uint x)</span><br><span class="line">&#123;</span><br><span class="line">uchar i;</span><br><span class="line">while(x--)</span><br><span class="line">&#123;</span><br><span class="line">for(i=0;i&lt;120;i++);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">void int0_srv()interrupt 1</span><br><span class="line">          &#123;//定义T0中断函数-计数功能</span><br><span class="line">          //gewei=0;</span><br><span class="line">  count++;</span><br><span class="line">  decade=count/10;</span><br><span class="line">  if(decade==10)decade=0;</span><br><span class="line">  gewei=count%10;   </span><br><span class="line">  P1=table[count/10];//显示十位</span><br><span class="line">  P2=table[count%10];//显示个位</span><br><span class="line">  &#125;</span><br><span class="line">void int1_srv()interrupt 0&#123; </span><br><span class="line">         decade=count=0;//count置0</span><br><span class="line"> P1=table[decade];//显示十位</span><br><span class="line"> P2=table[count%10];//显示个位</span><br><span class="line"> &#125;</span><br><span class="line">int3_srv()interrupt 3&#123;   //十位加1</span><br><span class="line">          //DelayMS(50);</span><br><span class="line"> //decade=7;</span><br><span class="line"> decade=(count/10);</span><br><span class="line"> if(decade==9) </span><br><span class="line">&#123;decade=0;&#125;</span><br><span class="line"> else</span><br><span class="line">          decade=decade+1;</span><br><span class="line"> count=decade*10+count%10;//实时计算出conunt值</span><br><span class="line"> if((count-100)&gt;=10) count=0;</span><br><span class="line"> P1=table[decade];//显示十位</span><br><span class="line"> P2=table[count%10];//显示个位</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> &#125;</span><br><span class="line">int0_gewei()interrupt 2&#123;//个位加1</span><br><span class="line">         DelayMS(100);</span><br><span class="line"> count++;</span><br><span class="line"> decade=count/10; </span><br><span class="line"> if(count==100) count=0;</span><br><span class="line"> P1=table[count/10];//显示十位</span><br><span class="line"> P2=table[count%10];//显示个位</span><br><span class="line"> &#125;</span><br><span class="line">         </span><br><span class="line">main()&#123; </span><br><span class="line">    //static int decade=0;</span><br><span class="line">//static int count=1;</span><br><span class="line">int count=0;</span><br><span class="line">P1=table[count/10];</span><br><span class="line">P2=table[count%10];//显示初值00</span><br><span class="line">TMOD=0x66;//定义T0计数模式方式2,T1计数模式方式2</span><br><span class="line">TCON=0X55;//脉冲触发</span><br><span class="line">TH0=TL0=0xff;</span><br><span class="line">TH1=0xff;</span><br><span class="line">TL1=0xff;//装载初值</span><br><span class="line">ET0=1;</span><br><span class="line">EA=1;//开总中断和T0中断</span><br><span class="line">ET1=1;//开T1中断</span><br><span class="line">//TR0=1;//启动T0</span><br><span class="line">//TR1=1;//启动T1</span><br><span class="line">EX0=1;//启动外部中断0</span><br><span class="line">EX1=1;//启动外部中断T1</span><br><span class="line">//可以用IE=0X8F;来代替？</span><br><span class="line">while(1); //等待</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/01/06/cfjibRSOLamvl93.png" alt="Snipaste_2023-01-06_19-15-50.png"></p><h2 id="实验四用定时器的中断与查询两种方法产生方波"><a href="#实验四用定时器的中断与查询两种方法产生方波" class="headerlink" title="实验四用定时器的中断与查询两种方法产生方波"></a>实验四用定时器的中断与查询两种方法产生方波</h2><p>查询法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;reg51.h&gt;</span><br><span class="line">sbit P2_0=P2^0;</span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">TMOD =0x10;</span><br><span class="line">TR1=1;</span><br><span class="line">for(;;)&#123;</span><br><span class="line">TH1=0xfc;</span><br><span class="line">TL1=0x18;</span><br><span class="line">do&#123;&#125;</span><br><span class="line">while(!TF1);</span><br><span class="line">P2_0=!P2_0;</span><br><span class="line">TF1=0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中断法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> #include&lt;reg51.h&gt;</span><br><span class="line">sbit P2_0=P2^0;</span><br><span class="line">sbit P2_1=P2^1;</span><br><span class="line">timer1 () interrupt 3 &#123;</span><br><span class="line">P2_0=!P2_0;</span><br><span class="line">TH1=0xfc;</span><br><span class="line">TL1=0x18;</span><br><span class="line">&#125;</span><br><span class="line">timer0 () interrupt 1 &#123;   </span><br><span class="line">P2_1=!P2_1;</span><br><span class="line">TH0=0xf8;</span><br><span class="line">TL0=0x30;</span><br><span class="line">&#125;</span><br><span class="line">main()&#123;</span><br><span class="line">TMOD=0x11;</span><br><span class="line">TH0=0xf8;</span><br><span class="line">TL0=0x30;</span><br><span class="line">TH1=0xfc;</span><br><span class="line">TL1=0x18;</span><br><span class="line">EA=1;</span><br><span class="line">ET0=1;</span><br><span class="line">ET1=1;</span><br><span class="line">TR1=1;</span><br><span class="line">TR0=1;</span><br><span class="line">while(1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/01/06/Ez9vIm2CTbJn8cp.png" alt="Snipaste_2023-01-06_19-18-07.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;单片机四个实验&lt;/p&gt;</summary>
    
    
    
    <category term="项目" scheme="https://du2279664786.github.io/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="单片机" scheme="https://du2279664786.github.io/tags/%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>期末复习</title>
    <link href="https://du2279664786.github.io/posts/da581d3f.html"/>
    <id>https://du2279664786.github.io/posts/da581d3f.html</id>
    <published>2022-12-30T14:55:10.000Z</published>
    <updated>2022-12-30T11:00:03.214Z</updated>
    
    <content type="html"><![CDATA[<p>期末复习</p><span id="more"></span><table><thead><tr><th>题目类型</th><th>填空</th><th>选择</th><th>判断</th><th>名词解释</th><th>简答</th><th>程序</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p><strong>注：本试题并非考试题，仅作为考试参考重点题型（原题率百分之<strong><strong>70</strong></strong>）</strong></p><p><strong>填空（每小题<strong><strong>1</strong></strong>分）</strong></p><p>1.图像数字化包括   采样  和  量化   两过程。</p><p>2.图像识别方法主要有  模板匹配     、  统计识别      ，    句法&#x2F;结构识别     、    神经网络方法     4类方法。</p><p>3.图像处理中常用的两种邻域是   3x3  和   5x5   。</p><p>4.从图像工程的角度上，机器视觉过程一般分为四个阶段，包括数字化成像、图像处理、图像分析和   模型匹配   等，  图像分割   技术是由图像处理向图像分析阶段过渡过程中必须的。</p><p>5.OpenCV用于将图像写入文件的函数是  imwrite（）。</p><p>6.机器视觉系统通常由光源、     光学成像系统  、    图像捕捉系统    ，     图像采集与数字化    、       智能图像处理与决策模块</p><p>​       和控制执行机构等部分组成。</p><p>7.一般来说，采样间距越大，图像数据量   越少   ，质量   越低   ：反之亦然。</p><p>8.在OpenCV的绘图函数中，可用于设置绘制填充图形的参数是 thinkness 。</p><p>9.结构元素S在区域X内移动时其原点位置的集合就是S对X的    腐蚀    。</p><p>10.细线化处理是把线宽不均匀的边缘线整理成   一线宽     的处理，在阈值处理后的 二值图像上进行。</p><p><strong>选择（每小题<strong><strong>2</strong></strong>分）</strong></p><p>1.一幅灰度级均匀分布的圈像，其灰度范围在[0，255]，则该图像像素的存储位数为 ( D )。</p><p>A.  2           B.  4         C.  6         D.  8  </p><p>2.下列哪项丕是机器视觉的优点( D )</p><p>A.不会疲劳，持久工作、</p><p>B.不受主观影响、</p><p>C.不受情绪影响、</p><p>D.对温度湿度空气质量有要求</p><p>3.图像与灰度直方图间的对应关系是：( B )。</p><p>A.  一一对应    B.  多对一    C.  一对多    D.  多对多</p><p>4.人工视觉的特点是( A )</p><p>A.适应性差、</p><p>B.精度低、</p><p>C.效率低、</p><p>D.成本高</p><p>5.机器视觉的应用已经从最初的( A )，扩展至如今消费电子、制药、食品包装等多个领域。</p><p>A:汽车制造领域</p><p>B:军事领域</p><p>C:实验室</p><p>D.医疗领域</p><p>6.下列关于区域形状的特征描述中，不正确是：( B )。</p><p>A.  矩形度是物体面积与其最小外接矩形面积之比</p><p>B.  边界的形状数具有平移、旋转和比例缩放不变性</p><p>C.  当区域为圆时，圈形度达到最大值1</p><p>D.  归一化的中心矩具有平移、旋转、比例缩放不变性</p><p>7.计算机显示器的颜色模型为：( C )。</p><p>A. CMYK      B. HIS          C. RGB           D. YIQ</p><p>8.大小为1024X1024，灰度级别为256色的图像文件大小为：( B )。</p><p>A. 512KB       B.1MB         C.1.5MB          D.2MB</p><p>9.下列图像边缘检测算子中抗噪性能最好的是：( B )。</p><p>A. 梯度算子    B. Prewitt算子   C. Roberts算子    D. Laplacian算子</p><p>10.关于数学形态学处理，以下说法正确的是：( D )。</p><p>A. 先膨胀后腐蚀的运算称为开运算。</p><p>B. 先腐蚀后膨胀的运算称为闭运算。</p><p>C. 细化是将一个曲线型物体细化为一条单像素宽的线，以图形化显示其拓扑性质。</p><p>D. 消除连续区域内的小噪声点，可以通过连续多次使用开闭运算。</p><p><strong>判断（每小题<strong><strong>1</strong></strong>分）</strong></p><p>（ 对 ）1.灰度直方图能反映一幅图像各灰度级像元占图像的面积比。</p><p>（ 错 ）2.数字化幅度值称为取样，数字化坐标值称为量化。</p><p>（ 对 ）3.模式识别的目的和作用就在于面对某一具体事物时将其正确的归入某一类别。</p><p>（ 错 ）4.动态范围越大，所能表现的层次越少，所包含的色彩空间也越少</p><p>（ 对 ）5.共点直线群的Hough变换是一条正弦曲线。</p><p>（ 错 ）6.在高频荧光灯、卤素灯、LED环形光中，LED环形光的光源的亮度是最大的</p><p>（ 对 ）7.边缘检测是将边缘像素标识出来的一种图像分割技术。</p><p>（ 对 ）8.Laplacian算子是一种局部运算，图像的二值化则是一种点运算。</p><p>（ 错 ）9.腐蚀运算满足交换律和结合律。</p><p>（ 对 ）10.机器视觉是计算机视觉在工业场景中的应用，目的是替代传统的人工。</p><p><strong>名词解释（每小题<strong><strong>8</strong></strong>分）（注：不可只答一句话）</strong></p><p>1.数字图像</p><p>数字图像是一种用数字表示的图像，其中每个像素都由一个或多个数字来表示。数字图像可以通过数字图像处理技术来创建、处理和分析，用于各种应用，包括摄影、医学成像、工程图像和卫星图像。数字图像通常由颜色或灰度值组成，这些值表示每个像素的颜色或亮度。数字图像处理技术可以用来压缩图像，以便更有效地存储和传输，也可以用来改善图像的质量，例如去除噪声或增强图像的对比度。</p><p>（1）数字图像是指由被称作<a href="https://so.csdn.net/so/search?q=%E5%83%8F%E7%B4%A0&spm=1001.2101.3001.7020">像素</a>的小块区域组成的二维矩阵。</p><p>（2）将物理图像行列划分后，每个小块区域称为像素。</p><p>（3）每个像素包括两个属性：位置和亮度（或色彩）</p><p>2.图像增强：</p><p>图像增强是指通过改变图像的各种参数，来提高图像质量或增强图像的可读性。图像增强通常是通过数字图像处理技术实现的，包括对图像进行滤波、边缘检测、对比度增强和去噪等。图像增强可以用来消除图像中的噪声、提高图像的对比度和清晰度，以及提取图像中的细节信息。图像增强在计算机视觉领域中非常重要，因为它可以提高计算机视觉系统的分析能力和准确性。</p><p>（1）图像增强是对图像进行处理，使其比原始图像更适合于特定的应用，</p><p>（2）它需要与实际应用相结合。</p><p>（3）对于图像的某些特征如边缘、轮廓、对比度等，</p><p>（4）图像增强是进行强调或锐化，以便于显示、观察或进一步分析与处理。</p><p>3.灰度直方图：</p><p>灰度直方图是一种表示图像灰度分布的图表，用于描述图像中不同灰度级别的像素数量。灰度直方图通常是通过将图像灰度值划分为若干个级别来构建的，然后统计每个级别的像素数量，并将这些数据可视化为柱状图。灰度直方图可以用来分析图像的灰度分布，从而推断出图像的对比度、亮度和阴影信息等。灰度直方图在数字图像处理中被广泛应用，用于图像增强、分类和检索等多种应用。</p><p>（1）灰度直方图是灰度级的函数，</p><p>（2）描述图像中该灰度级的像素个数(或该灰度级像素出现的频率):</p><p>（3）其横坐标是灰度级，纵坐标表示图像中该灰度级出现的个数（频率)。</p><p>（4）反映了图像灰度的分布情况-</p><p>4.图像平滑：</p><p>图像平滑操作是指通过消除图像中的噪声和细节，使图像变得更加平滑和柔和的操作。图像平滑通常是通过滤波技术实现的，例如均值滤波和高斯滤波等。图像平滑可以用来消除图像中的噪声和瑕疵，以及提高图像的整体质量。图像平滑在数字图像处理中非常重要，用于许多应用，包括图像增强、边缘检测和图像分割等。</p><p>（1）图像平滑是一种区域增强的算法，平滑算法有邻域平均法、中指滤波、边界保持类滤波等。</p><p>（2）在图像产生、传输和复制过程中，常常会因为多方面原因而被噪声干扰或出现数据丢失，</p><p>（3）降低了图像的质量（某一像素，如果它与周围像素点相比有明显的不同，则该点被噪声所感染）。</p><p>（4）这就需要对图像进行一定的增强处理以减小这些缺陷带来的影响。</p><p><strong>简答题（每小题<strong><strong>8</strong></strong>分）</strong></p><p>1、机器视觉系统一般由哪几部分组成? 机器视觉系统应用的核心目标是什么?主要的分成几部分实现?</p><p>用机器来延伸或代替人眼对事物做测量、定位和判断的装置。</p><p>组成:光源、场景、摄像机、图像卡、计算机。用机器来延伸或代替人眼对事物做测量、定位和判断。</p><p>三部分:图像的获取、图像的处理和分析、输出或显示。</p><p>2、简述直方图均衡化的原理和特点</p><p>（1）直方图均衡化是把原始图像的灰度直方图从比较集中的某个灰度区间变成在全部灰度范围内的均匀分布。</p><p>（2）直方图均衡化就是对图像进行非线性拉伸，重新分配图像像素值，使一定灰度范围内的像素数量大致相同。</p><p>（3）直方图均衡化就是把给定图像的直方图分布改变成“均匀”分布直方图分布。</p><p>（4）特点：增加像素灰度值的动态范围，提高图像对比度。</p><p>3、采样和量化是什么含义?</p><p>（1）数字化坐标值称为取样，数字化幅度值称为量化。</p><p>（2）采样指空间上或时域上连续的图像(模拟图像)变换成离散采样点(像素)集合的操作</p><p>（3）量化指把采样后所得的各像素的灰度值从模拟量到离散量的转换。</p><p>（4）采样和量化实现了图像的数字化。</p><p>4.简述区域生长算法的一般步骤。（仅需步骤，无需具体解释）</p><p>（1）.确定分割的区域数目，</p><p>（2）并在每个区域选择或确定一个能正确代表该区域灰度取值的像素点（种子点）；</p><p>（3）选择有意义特征和领城方式；</p><p>（4）确定相似性准则。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;期末复习&lt;/p&gt;</summary>
    
    
    
    <category term="机器视觉" scheme="https://du2279664786.github.io/categories/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89/"/>
    
    
    <category term="机器视觉" scheme="https://du2279664786.github.io/tags/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89/"/>
    
    <category term="期末考试" scheme="https://du2279664786.github.io/tags/%E6%9C%9F%E6%9C%AB%E8%80%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>图像平移</title>
    <link href="https://du2279664786.github.io/posts/576024a4.html"/>
    <id>https://du2279664786.github.io/posts/576024a4.html</id>
    <published>2022-12-21T14:55:10.000Z</published>
    <updated>2022-12-21T07:41:09.969Z</updated>
    
    <content type="html"><![CDATA[<p>图像平移</p><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#– src表示原始图像</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#– M表示平移矩阵</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#– dsize表示变换后的输出图像的尺寸大小</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#– dst为输出图像，其大小为dsize，类型与src相同</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#– flag表示插值方法的组合和可选值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#– borderValue表示像素外推法，当borderMode = BORDER_TRANSPARENT时，表示目标图像中的像素不会修改源图像中的“异常值”。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#– borderValue用于边界不变的情况，默认情况下为0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#下面代码是图像平移的一个简单案例，它定义了图像平移矩阵M，然后调用warpAffine()函数将原始图像垂直向下平移了50个像素，水平向右平移了100个像素。</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># By：Eastmount</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment">#读取图片</span></span><br><span class="line">src = cv2.imread(<span class="string">&#x27;scenery.png&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#图像平移矩阵</span></span><br><span class="line">M = np.float32([[<span class="number">1</span>, <span class="number">0</span>, <span class="number">100</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">50</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取原始图像列数和行数</span></span><br><span class="line">rows, cols = src.shape[:<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#图像平移</span></span><br><span class="line">result = cv2.warpAffine(src, M, (cols, rows)) </span><br><span class="line"></span><br><span class="line"><span class="comment">#显示图像</span></span><br><span class="line">cv2.imshow(<span class="string">&quot;original&quot;</span>, src)</span><br><span class="line">cv2.imshow(<span class="string">&quot;result&quot;</span>, result)</span><br><span class="line"></span><br><span class="line"><span class="comment">#等待显示</span></span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  下面一个案例是将图像分别向下、向上、向右、向左平移，再调用matplotlib绘图库依次绘制的过程。</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># By：Eastmount</span></span><br><span class="line"><span class="keyword">import</span> cv2  </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"> </span><br><span class="line"><span class="comment">#读取图片</span></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;scenery.png&#x27;</span>)</span><br><span class="line">image = cv2.cvtColor(img,cv2.COLOR_BGR2RGB)</span><br><span class="line"></span><br><span class="line"><span class="comment">#图像平移</span></span><br><span class="line"><span class="comment">#垂直方向 向下平移100</span></span><br><span class="line">M = np.float32([[<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">100</span>]])</span><br><span class="line">img1 = cv2.warpAffine(image, M, (image.shape[<span class="number">1</span>], image.shape[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment">#垂直方向 向上平移100</span></span><br><span class="line">M = np.float32([[<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>, -<span class="number">100</span>]])</span><br><span class="line">img2 = cv2.warpAffine(image, M, (image.shape[<span class="number">1</span>], image.shape[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment">#水平方向 向右平移100</span></span><br><span class="line">M = np.float32([[<span class="number">1</span>, <span class="number">0</span>, <span class="number">100</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]])</span><br><span class="line">img3 = cv2.warpAffine(image, M, (image.shape[<span class="number">1</span>], image.shape[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment">#水平方向 向左平移100</span></span><br><span class="line">M = np.float32([[<span class="number">1</span>, <span class="number">0</span>, -<span class="number">100</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]])</span><br><span class="line">img4 = cv2.warpAffine(image, M, (image.shape[<span class="number">1</span>], image.shape[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment">#循环显示图形</span></span><br><span class="line">titles = [ <span class="string">&#x27;Image1&#x27;</span>, <span class="string">&#x27;Image2&#x27;</span>, <span class="string">&#x27;Image3&#x27;</span>, <span class="string">&#x27;Image4&#x27;</span>]  </span><br><span class="line">images = [img1, img2, img3, img4]  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):  </span><br><span class="line">   plt.subplot(<span class="number">2</span>,<span class="number">2</span>,i+<span class="number">1</span>), plt.imshow(images[i], <span class="string">&#x27;gray&#x27;</span>)  </span><br><span class="line">   plt.title(titles[i])  </span><br><span class="line">   plt.xticks([]),plt.yticks([])  </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;图像平移&lt;/p&gt;</summary>
    
    
    
    <category term="机器视觉" scheme="https://du2279664786.github.io/categories/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89/"/>
    
    
    <category term="机器视觉" scheme="https://du2279664786.github.io/tags/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89/"/>
    
    <category term="期末考试" scheme="https://du2279664786.github.io/tags/%E6%9C%9F%E6%9C%AB%E8%80%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>图像缩放</title>
    <link href="https://du2279664786.github.io/posts/682f46ac.html"/>
    <id>https://du2279664786.github.io/posts/682f46ac.html</id>
    <published>2022-12-21T14:55:10.000Z</published>
    <updated>2022-12-21T07:41:09.966Z</updated>
    
    <content type="html"><![CDATA[<p>图像缩放</p><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&#x27;&#x27;&#x27;– src表示原始图像</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#– dsize表示图像缩放的大小</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#– result表示图像结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#– fx表示图像x轴方向缩放大小的倍数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#– fy表示图像y轴方向缩放大小的倍数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#– interpolation表示变换方法。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># CV_INTER_NN表示最近邻插值；CV_INTER_LINEAR表示双线性插值（缺省使用）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># CV_INTER_AREA表示使用像素关系重采样，当图像缩小时，该方法可以避免波纹出现，当图像放大时，类似于CV_INTER_NN；</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># CV_INTER_CUBIC表示立方插值&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###  下面是Python实现图像缩放的代码，它将所读取的风景图像进行缩小。</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># By：Eastmount</span></span><br><span class="line"><span class="keyword">import</span> cv2  </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line"> </span><br><span class="line"><span class="comment">#读取图片</span></span><br><span class="line">src = cv2.imread(<span class="string">&#x27;scenery.png&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#图像缩放</span></span><br><span class="line">result = cv2.resize(src, (<span class="number">200</span>,<span class="number">100</span>))</span><br><span class="line"><span class="built_in">print</span>(result.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment">#显示图像</span></span><br><span class="line">cv2.imshow(<span class="string">&quot;original&quot;</span>, src)</span><br><span class="line">cv2.imshow(<span class="string">&quot;result&quot;</span>, result)</span><br><span class="line"></span><br><span class="line"><span class="comment">#等待显示</span></span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##  第二种  下面讲解另一种图像缩放变换的方法，通过原始图像像素乘以缩放系数进行图像变换，代码如下：</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># By：Eastmount</span></span><br><span class="line"><span class="keyword">import</span> cv2  </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line"> </span><br><span class="line"><span class="comment">#读取图片</span></span><br><span class="line">src = cv2.imread(<span class="string">&#x27;scenery.png&#x27;</span>)</span><br><span class="line">rows, cols = src.shape[:<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(rows, cols)</span><br><span class="line"></span><br><span class="line"><span class="comment">#图像缩放 dsize(列,行)</span></span><br><span class="line">result = cv2.resize(src, (<span class="built_in">int</span>(cols*<span class="number">0.6</span>), <span class="built_in">int</span>(rows*<span class="number">1.2</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#显示图像</span></span><br><span class="line">cv2.imshow(<span class="string">&quot;src&quot;</span>, src)</span><br><span class="line">cv2.imshow(<span class="string">&quot;result&quot;</span>, result)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##   最后讲解调用(fx,fy)参数设置缩放倍数的方法，对原始图像进行放大或缩小操作。</span></span><br><span class="line"><span class="comment">#    下面代码是fx和fy方向缩小至原始图像0.3倍的操作。</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># By：Eastmount</span></span><br><span class="line"><span class="keyword">import</span> cv2  </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line"> </span><br><span class="line"><span class="comment">#读取图片</span></span><br><span class="line">src = cv2.imread(<span class="string">&#x27;scenery.png&#x27;</span>)</span><br><span class="line">rows, cols = src.shape[:<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(rows, cols)</span><br><span class="line"></span><br><span class="line"><span class="comment">#图像缩放</span></span><br><span class="line">result = cv2.resize(src, <span class="literal">None</span>, fx=<span class="number">0.3</span>, fy=<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#显示图像</span></span><br><span class="line">cv2.imshow(<span class="string">&quot;src&quot;</span>, src)</span><br><span class="line">cv2.imshow(<span class="string">&quot;result&quot;</span>, result)</span><br><span class="line"></span><br><span class="line"><span class="comment">#等待显示</span></span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;图像缩放&lt;/p&gt;</summary>
    
    
    
    <category term="机器视觉" scheme="https://du2279664786.github.io/categories/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89/"/>
    
    
    <category term="机器视觉" scheme="https://du2279664786.github.io/tags/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89/"/>
    
    <category term="期末考试" scheme="https://du2279664786.github.io/tags/%E6%9C%9F%E6%9C%AB%E8%80%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>图像旋转</title>
    <link href="https://du2279664786.github.io/posts/a2382f00.html"/>
    <id>https://du2279664786.github.io/posts/a2382f00.html</id>
    <published>2022-12-21T14:55:10.000Z</published>
    <updated>2023-01-05T07:47:31.925Z</updated>
    
    <content type="html"><![CDATA[<p>图像旋转</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"># 图像旋转变换主要调用getRotationMatrix2D()函数和warpAffine()函数实现，绕图像的中心旋转，函数原型如下：</span><br><span class="line"></span><br><span class="line"># M = cv2.getRotationMatrix2D(center, angle, scale)</span><br><span class="line"></span><br><span class="line">#– center表示旋转中心点，通常设置为(cols/2, rows/2)</span><br><span class="line"></span><br><span class="line">#– angle表示旋转角度，正值表示逆时针旋转，坐标原点被定为左上角</span><br><span class="line"></span><br><span class="line">#– scale表示比例因子</span><br><span class="line"></span><br><span class="line"># rotated = cv2.warpAffine(src, M, (cols, rows))</span><br><span class="line"></span><br><span class="line">#– src表示原始图像</span><br><span class="line"></span><br><span class="line">#– M表示旋转参数，即getRotationMatrix2D()函数定义的结果</span><br><span class="line"></span><br><span class="line">#– (cols, rows)表示原始图像的宽度和高度</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># By：Eastmount</span></span><br><span class="line"><span class="keyword">import</span> cv2  </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line"> </span><br><span class="line"><span class="comment">#读取图片</span></span><br><span class="line">src = cv2.imread(<span class="string">&#x27;scenery.png&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#源图像的高、宽 以及通道数</span></span><br><span class="line">rows, cols, channel = src.shape</span><br><span class="line"></span><br><span class="line"><span class="comment">#绕图像的中心旋转</span></span><br><span class="line"><span class="comment">#函数参数：旋转中心 旋转度数 scale</span></span><br><span class="line">M = cv2.getRotationMatrix2D((cols/<span class="number">2</span>, rows/<span class="number">2</span>), <span class="number">30</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#函数参数：原始图像 旋转参数 元素图像宽高</span></span><br><span class="line">rotated = cv2.warpAffine(src, M, (cols, rows))  </span><br><span class="line"></span><br><span class="line"><span class="comment">#显示图像</span></span><br><span class="line">cv2.imshow(<span class="string">&quot;src&quot;</span>, src)</span><br><span class="line">cv2.imshow(<span class="string">&quot;rotated&quot;</span>, rotated)</span><br><span class="line"></span><br><span class="line"><span class="comment">#等待显示</span></span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;图像旋转&lt;/p&gt;</summary>
    
    
    
    <category term="Coggle 30 Days of ML打卡" scheme="https://du2279664786.github.io/categories/Coggle-30-Days-of-ML%E6%89%93%E5%8D%A1/"/>
    
    
    <category term="机器视觉" scheme="https://du2279664786.github.io/tags/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89/"/>
    
    <category term="期末考试" scheme="https://du2279664786.github.io/tags/%E6%9C%9F%E6%9C%AB%E8%80%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>OpenCV实现相机标定</title>
    <link href="https://du2279664786.github.io/posts/bbb91615.html"/>
    <id>https://du2279664786.github.io/posts/bbb91615.html</id>
    <published>2022-12-21T14:55:10.000Z</published>
    <updated>2022-12-21T07:41:09.973Z</updated>
    
    <content type="html"><![CDATA[<p>OpenCV实现相机标定</p><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找棋盘格角点</span></span><br><span class="line"><span class="comment"># 阈值</span></span><br><span class="line">criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, <span class="number">30</span>, <span class="number">0.001</span>)</span><br><span class="line"><span class="comment">#棋盘格模板规格</span></span><br><span class="line">w = <span class="number">7</span>   <span class="comment">#内角点个数，内角点是和其他格子连着的点</span></span><br><span class="line">h = <span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 世界坐标系中的棋盘格点,例如(0,0,0), (1,0,0), (2,0,0) ....,(8,5,0)，去掉Z坐标，记为二维矩阵</span></span><br><span class="line">objp = np.zeros((w*h,<span class="number">3</span>), np.float32)</span><br><span class="line">objp[:,:<span class="number">2</span>] = np.mgrid[<span class="number">0</span>:w,<span class="number">0</span>:h].T.reshape(-<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 储存棋盘格角点的世界坐标和图像坐标对</span></span><br><span class="line">objpoints = [] <span class="comment"># 在世界坐标系中的三维点</span></span><br><span class="line">imgpoints = [] <span class="comment"># 在图像平面的二维点</span></span><br><span class="line"></span><br><span class="line">images = glob.glob(<span class="string">&#x27;picture/*.jpg&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> fname <span class="keyword">in</span> images:</span><br><span class="line">    img = cv2.imread(fname)</span><br><span class="line">    gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)</span><br><span class="line">    <span class="comment"># 找到棋盘格角点</span></span><br><span class="line">    <span class="comment"># 棋盘图像(8位灰度或彩色图像)  棋盘尺寸  存放角点的位置</span></span><br><span class="line">    ret, corners = cv2.findChessboardCorners(gray, (w,h),<span class="literal">None</span>)</span><br><span class="line">    <span class="comment"># 如果找到足够点对，将其存储起来</span></span><br><span class="line">    <span class="keyword">if</span> ret == <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 角点精确检测</span></span><br><span class="line">        <span class="comment"># 输入图像 角点初始坐标 搜索窗口为2*winsize+1 死区 求角点的迭代终止条件</span></span><br><span class="line">        cv2.cornerSubPix(gray,corners,(<span class="number">11</span>,<span class="number">11</span>),(-<span class="number">1</span>,-<span class="number">1</span>),criteria)</span><br><span class="line">        objpoints.append(objp)</span><br><span class="line">        imgpoints.append(corners)</span><br><span class="line">        <span class="comment"># 将角点在图像上显示</span></span><br><span class="line">        cv2.drawChessboardCorners(img, (w,h), corners, ret)</span><br><span class="line">        cv2.imshow(<span class="string">&#x27;findCorners&#x27;</span>,img)</span><br><span class="line">        cv2.waitKey(<span class="number">1000</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br><span class="line"><span class="comment">#标定、去畸变</span></span><br><span class="line"><span class="comment"># 输入：世界坐标系里的位置 像素坐标 图像的像素尺寸大小 3*3矩阵，相机内参数矩阵 畸变矩阵</span></span><br><span class="line"><span class="comment"># 输出：标定结果 相机的内参数矩阵 畸变系数 旋转矩阵 平移向量</span></span><br><span class="line">ret, mtx, dist, rvecs, tvecs = cv2.calibrateCamera(objpoints, imgpoints, gray.shape[::-<span class="number">1</span>], <span class="literal">None</span>, <span class="literal">None</span>)</span><br><span class="line"><span class="comment"># mtx：内参数矩阵</span></span><br><span class="line"><span class="comment"># dist：畸变系数</span></span><br><span class="line"><span class="comment"># rvecs：旋转向量 （外参数）</span></span><br><span class="line"><span class="comment"># tvecs ：平移向量 （外参数）</span></span><br><span class="line"><span class="built_in">print</span> ((<span class="string">&quot;ret:&quot;</span>),ret)</span><br><span class="line"><span class="built_in">print</span> ((<span class="string">&quot;mtx:\n&quot;</span>),mtx)        <span class="comment"># 内参数矩阵</span></span><br><span class="line"><span class="built_in">print</span> ((<span class="string">&quot;dist:\n&quot;</span>),dist)      <span class="comment"># 畸变系数   distortion cofficients = (k_1,k_2,p_1,p_2,k_3)</span></span><br><span class="line"><span class="built_in">print</span> ((<span class="string">&quot;rvecs:\n&quot;</span>),rvecs)    <span class="comment"># 旋转向量  # 外参数</span></span><br><span class="line"><span class="built_in">print</span> ((<span class="string">&quot;tvecs:\n&quot;</span>),tvecs)    <span class="comment"># 平移向量  # 外参数</span></span><br><span class="line"><span class="comment"># 去畸变</span></span><br><span class="line">img2 = cv2.imread(<span class="string">&#x27;picture/6.jpg&#x27;</span>)</span><br><span class="line">h,w = img2.shape[:<span class="number">2</span>]</span><br><span class="line"><span class="comment"># 我们已经得到了相机内参和畸变系数，在将图像去畸变之前，</span></span><br><span class="line"><span class="comment"># 我们还可以使用cv.getOptimalNewCameraMatrix()优化内参数和畸变系数，</span></span><br><span class="line"><span class="comment"># 通过设定自由自由比例因子alpha。当alpha设为0的时候，</span></span><br><span class="line"><span class="comment"># 将会返回一个剪裁过的将去畸变后不想要的像素去掉的内参数和畸变系数；</span></span><br><span class="line"><span class="comment"># 当alpha设为1的时候，将会返回一个包含额外黑色像素点的内参数和畸变系数，并返回一个ROI用于将其剪裁掉</span></span><br><span class="line">newcameramtx, roi=cv2.getOptimalNewCameraMatrix(mtx,dist,(w,h),<span class="number">0</span>,(w,h)) <span class="comment"># 自由比例参数</span></span><br><span class="line"></span><br><span class="line">dst = cv2.undistort(img2, mtx, dist, <span class="literal">None</span>, newcameramtx)</span><br><span class="line"><span class="comment"># 根据前面ROI区域裁剪图片</span></span><br><span class="line">x,y,w,h = roi</span><br><span class="line">dst = dst[y:y+h, x:x+w]</span><br><span class="line">cv2.imwrite(<span class="string">&#x27;calibresult.jpg&#x27;</span>,dst)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 反投影误差</span></span><br><span class="line"><span class="comment"># 通过反投影误差，我们可以来评估结果的好坏。越接近0，说明结果越理想。</span></span><br><span class="line"><span class="comment"># 通过之前计算的内参数矩阵、畸变系数、旋转矩阵和平移向量，使用cv2.projectPoints()计算三维点到二维图像的投影，</span></span><br><span class="line"><span class="comment"># 然后计算反投影得到的点与图像上检测到的点的误差，最后计算一个对于所有标定图像的平均误差，这个值就是反投影误差。</span></span><br><span class="line">total_error = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(objpoints)):</span><br><span class="line">    imgpoints2, _ = cv2.projectPoints(objpoints[i], rvecs[i], tvecs[i], mtx, dist)</span><br><span class="line">    error = cv2.norm(imgpoints[i],imgpoints2, cv2.NORM_L2)/<span class="built_in">len</span>(imgpoints2)</span><br><span class="line">    total_error += error</span><br><span class="line"><span class="built_in">print</span> ((<span class="string">&quot;total error: &quot;</span>), total_error/<span class="built_in">len</span>(objpoints))</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;OpenCV实现相机标定&lt;/p&gt;</summary>
    
    
    
    <category term="机器视觉" scheme="https://du2279664786.github.io/categories/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89/"/>
    
    
    <category term="机器视觉" scheme="https://du2279664786.github.io/tags/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89/"/>
    
    <category term="期末考试" scheme="https://du2279664786.github.io/tags/%E6%9C%9F%E6%9C%AB%E8%80%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Python实现图片查找轮廓、多边形拟合、最小外接矩形代码</title>
    <link href="https://du2279664786.github.io/posts/c8c608af.html"/>
    <id>https://du2279664786.github.io/posts/c8c608af.html</id>
    <published>2022-12-21T14:55:10.000Z</published>
    <updated>2022-12-21T07:41:09.971Z</updated>
    
    <content type="html"><![CDATA[<p>Python实现图片查找轮廓、多边形拟合、最小外接矩形代码</p><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;/home/yasin/coffe.jpg&#x27;</span>)</span><br><span class="line">img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line"></span><br><span class="line">_, contours, hierarchy = cv2.findContours(img_gray, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)</span><br><span class="line"></span><br><span class="line">cv2.drawContours(img, contours, -<span class="number">1</span>, (<span class="number">255</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">1</span>)</span><br><span class="line">cv2.namedWindow(<span class="string">&#x27;Result of drawContours&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;Result of drawContours&#x27;</span>, img)</span><br><span class="line">cv2.waitKey()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cnt = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(contours)):</span><br><span class="line">    arclen = cv2.arcLength(contours[i], <span class="literal">True</span>)</span><br><span class="line">    epsilon = <span class="built_in">max</span>(<span class="number">3</span>, <span class="built_in">int</span>(arclen * <span class="number">0.02</span>))   <span class="comment"># 拟合出的多边形与原轮廓最大距离，可以自己设置，这里根据轮廓周长动态设置</span></span><br><span class="line">    approx = cv2.approxPolyDP(contours[i], epsilon, <span class="literal">False</span>) <span class="comment"># 轮廓的多边形拟合</span></span><br><span class="line">    area = cv2.contourArea(contours[i])     <span class="comment"># 计算面积</span></span><br><span class="line">    rect = cv2.minAreaRect(contours[i])</span><br><span class="line">    box = np.int0(cv2.boxPoints(rect))      <span class="comment"># 计算最小外接矩形顶点</span></span><br><span class="line">    h = <span class="built_in">int</span>(rect[<span class="number">1</span>][<span class="number">0</span>])</span><br><span class="line">    w = <span class="built_in">int</span>(rect[<span class="number">1</span>][<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">min</span>(h, w) == <span class="number">0</span>:</span><br><span class="line">        ration = <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        ration = <span class="built_in">max</span>(h,w) /<span class="built_in">min</span>(h,w)   <span class="comment"># 长宽比</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对长宽比，轮廓面积，拟合出的多边形顶点数做筛选</span></span><br><span class="line">    <span class="keyword">if</span> ration &lt; <span class="number">10</span> <span class="keyword">and</span> area &gt; <span class="number">20</span> <span class="keyword">and</span> area &lt; <span class="number">4000</span> <span class="keyword">and</span> approx.shape[<span class="number">0</span>] &gt; <span class="number">3</span> :</span><br><span class="line">        <span class="comment"># 对满足条件的轮廓画出轮廓的拟合多边形</span></span><br><span class="line">        cv2.polylines(img, [approx], <span class="literal">True</span>, (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">cv2.namedWindow(<span class="string">&#x27;Result of filtered&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;Result of filtered&#x27;</span>, img)</span><br><span class="line">cv2.waitKey()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Python实现图片查找轮廓、多边形拟合、最小外接矩形代码&lt;/p&gt;</summary>
    
    
    
    <category term="机器视觉" scheme="https://du2279664786.github.io/categories/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89/"/>
    
    
    <category term="机器视觉" scheme="https://du2279664786.github.io/tags/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89/"/>
    
    <category term="期末考试" scheme="https://du2279664786.github.io/tags/%E6%9C%9F%E6%9C%AB%E8%80%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>opencv+pythons相机标定源码解析</title>
    <link href="https://du2279664786.github.io/posts/5ebdf2fb.html"/>
    <id>https://du2279664786.github.io/posts/5ebdf2fb.html</id>
    <published>2022-12-21T14:55:10.000Z</published>
    <updated>2022-12-21T07:41:09.976Z</updated>
    
    <content type="html"><![CDATA[<p>opencv+pythons相机标定源码解析</p><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 设置寻找亚像素角点的参数，采用的停止准则是最大循环次数30和最大误差容限0.001</span></span><br><span class="line">criteria = (cv2.TERM_CRITERIA_MAX_ITER | cv2.TERM_CRITERIA_EPS, <span class="number">30</span>, <span class="number">0.001</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 获取标定板角点的位置</span></span><br><span class="line">objp = np.zeros((<span class="number">5</span> * <span class="number">7</span>, <span class="number">3</span>), np.float32) <span class="comment">## 仅算内角点，注意内角点即不靠近边界的角点</span></span><br><span class="line">objp[:, :<span class="number">2</span>] = np.mgrid[<span class="number">0</span>:<span class="number">7</span>, <span class="number">0</span>:<span class="number">5</span>].T.reshape(-<span class="number">1</span>, <span class="number">2</span>)  <span class="comment"># 将世界坐标系建在标定板上，所有点的Z坐标全部为0，所以只需要赋值x和y 5行7列reshape成（35,2），即真实的坐标（0,0），（1,0）...</span></span><br><span class="line">a = np.mgrid[<span class="number">0</span>:<span class="number">7</span>, <span class="number">0</span>:<span class="number">5</span>].T</span><br><span class="line">b = np.mgrid[<span class="number">0</span>:<span class="number">7</span>, <span class="number">0</span>:<span class="number">5</span>]</span><br><span class="line"><span class="built_in">print</span>(a, a.shape) <span class="comment">#（5,7,2）</span></span><br><span class="line"><span class="built_in">print</span>(b, b.shape) <span class="comment">#（2,7,5）</span></span><br><span class="line"><span class="comment">#exit()</span></span><br><span class="line">obj_points = []  <span class="comment"># 存储3D点</span></span><br><span class="line">img_points = []  <span class="comment"># 存储2D点</span></span><br><span class="line"> </span><br><span class="line">images = glob.glob(<span class="string">&quot;./picture/*.jpg&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> fname <span class="keyword">in</span> images:</span><br><span class="line">    img = cv2.imread(fname)</span><br><span class="line">    <span class="built_in">print</span>(fname)</span><br><span class="line">    <span class="comment">#h, w, _ = img.shape</span></span><br><span class="line">    img = cv2.resize(img, (<span class="number">600</span>, <span class="number">600</span>))</span><br><span class="line">    <span class="comment">#print(img)</span></span><br><span class="line"> </span><br><span class="line">    cv2.waitKey(<span class="number">15</span>)</span><br><span class="line">    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line">    <span class="comment">#cv2.imshow(&#x27;img&#x27;, gray)</span></span><br><span class="line">    size = gray.shape[::-<span class="number">1</span>]</span><br><span class="line">    ret, corners = cv2.findChessboardCorners(gray, (<span class="number">7</span>, <span class="number">5</span>), <span class="literal">None</span>) <span class="comment"># 寻找真实世界角点坐标在照片中的像素坐标，(这里的7和5，表示Number of inner corners per a chessboard row and column，一定注意，不是7行5列，有些博客的介绍是错误的)</span></span><br><span class="line">    <span class="built_in">print</span>(corners.shape)</span><br><span class="line">    <span class="built_in">print</span>(ret)</span><br><span class="line">    exit()</span><br><span class="line">    <span class="keyword">if</span> ret:</span><br><span class="line"> </span><br><span class="line">        obj_points.append(objp)</span><br><span class="line"> </span><br><span class="line">        corners2 = cv2.cornerSubPix(gray, corners, (<span class="number">5</span>, <span class="number">5</span>), (-<span class="number">1</span>, -<span class="number">1</span>), criteria)  <span class="comment"># 在原角点的基础上寻找亚像素角点，即精确到小数</span></span><br><span class="line">        <span class="comment">#print(corners2)</span></span><br><span class="line">        <span class="keyword">if</span> [corners2]:</span><br><span class="line">            img_points.append(corners2)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            img_points.append(corners)</span><br><span class="line"> </span><br><span class="line">        cv2.drawChessboardCorners(img, (<span class="number">7</span>, <span class="number">5</span>), corners, ret)  <span class="comment">#绘制角点</span></span><br><span class="line">        cv2.imshow(<span class="string">&#x27;img&#x27;</span>, img)</span><br><span class="line">        cv2.waitKey(<span class="number">2000</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(img_points))</span><br><span class="line">cv2.destroyAllWindows()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 标定</span></span><br><span class="line">ret, mtx, dist, rvecs, tvecs = cv2.calibrateCamera(obj_points, img_points, size, <span class="literal">None</span>, <span class="literal">None</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ret:&quot;</span>, ret)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;mtx:\n&quot;</span>, mtx) <span class="comment"># 内参数矩阵</span></span><br><span class="line"><span class="comment">#print(&quot;dist:\n&quot;, dist)  # 畸变系数</span></span><br><span class="line"><span class="comment">#print(&quot;rvecs:\n&quot;, rvecs)  # 旋转向量 </span></span><br><span class="line"><span class="comment">#print(&quot;tvecs:\n&quot;, tvecs ) # 平移向量</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;opencv+pythons相机标定源码解析&lt;/p&gt;</summary>
    
    
    
    <category term="机器视觉" scheme="https://du2279664786.github.io/categories/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89/"/>
    
    
    <category term="机器视觉" scheme="https://du2279664786.github.io/tags/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89/"/>
    
    <category term="期末考试" scheme="https://du2279664786.github.io/tags/%E6%9C%9F%E6%9C%AB%E8%80%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>中值滤波</title>
    <link href="https://du2279664786.github.io/posts/72bb5890.html"/>
    <id>https://du2279664786.github.io/posts/72bb5890.html</id>
    <published>2022-12-21T14:55:10.000Z</published>
    <updated>2022-12-21T07:41:09.975Z</updated>
    
    <content type="html"><![CDATA[<p>中值滤波</p><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#encoding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> cv2  </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment">#读取图片</span></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;test01.png&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#高斯滤波</span></span><br><span class="line">result = cv2.medianBlur(img, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#显示图像</span></span><br><span class="line">cv2.imshow(<span class="string">&quot;source img&quot;</span>, img)</span><br><span class="line">cv2.imshow(<span class="string">&quot;medianBlur&quot;</span>, result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#等待显示</span></span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;中值滤波&lt;/p&gt;</summary>
    
    
    
    <category term="机器视觉" scheme="https://du2279664786.github.io/categories/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89/"/>
    
    
    <category term="机器视觉" scheme="https://du2279664786.github.io/tags/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89/"/>
    
    <category term="期末考试" scheme="https://du2279664786.github.io/tags/%E6%9C%9F%E6%9C%AB%E8%80%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>使用Python快速实现图片文字识别</title>
    <link href="https://du2279664786.github.io/posts/8063b4e5.html"/>
    <id>https://du2279664786.github.io/posts/8063b4e5.html</id>
    <published>2022-12-21T14:55:10.000Z</published>
    <updated>2022-12-21T07:41:09.989Z</updated>
    
    <content type="html"><![CDATA[<p>使用Python快速实现图片文字识别</p><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ocr</span>(<span class="params">img_path: <span class="built_in">str</span></span>) -&gt; <span class="built_in">list</span>:</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    根据图片路径，将图片转为文字，返回识别到的字符串列表</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 请求头</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;cloud.baidu.com&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.114 Safari/537.36 Edg/89.0.774.76&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;*/*&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Origin&#x27;</span>: <span class="string">&#x27;https://cloud.baidu.com&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Fetch-Site&#x27;</span>: <span class="string">&#x27;same-origin&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Fetch-Mode&#x27;</span>: <span class="string">&#x27;cors&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Fetch-Dest&#x27;</span>: <span class="string">&#x27;empty&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://cloud.baidu.com/product/ocr/general&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 打开图片并对其使用 base64 编码</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(img_path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        img = base64.b64encode(f.read())</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;image&#x27;</span>: <span class="string">&#x27;data:image/jpeg;base64,&#x27;</span>+<span class="built_in">str</span>(img)[<span class="number">2</span>:-<span class="number">1</span>],</span><br><span class="line">        <span class="string">&#x27;image_url&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;https://aip.baidubce.com/rest/2.0/ocr/v1/general_basic&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;detect_direction&#x27;</span>: <span class="string">&#x27;false&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 开始调用 ocr 的 api</span></span><br><span class="line">    response = requests.post(</span><br><span class="line">        <span class="string">&#x27;https://cloud.baidu.com/aidemo&#x27;</span>, headers=headers, data=data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置一个空的列表，后面用来存储识别到的字符串</span></span><br><span class="line">    ocr_text = []</span><br><span class="line">    result = response.json()[<span class="string">&#x27;data&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> result.get(<span class="string">&#x27;words_result&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将识别的字符串添加到列表里面</span></span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> result[<span class="string">&#x27;words_result&#x27;</span>]:</span><br><span class="line">        text = r[<span class="string">&#x27;words&#x27;</span>].strip()</span><br><span class="line">        ocr_text.append(text)</span><br><span class="line">    <span class="comment"># 返回字符串列表</span></span><br><span class="line">    <span class="keyword">return</span> ocr_text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">img_path 里面填图片路径,这里分两种情况讨论:</span></span><br><span class="line"><span class="string">第一种:假设你的代码跟图片是在同一个文件夹，那么只需要填文件名,例如 test1.jpg (test1.jpg 是图片文件名)</span></span><br><span class="line"><span class="string">第二种:假设你的图片全路径是 D:/img/test1.jpg ,那么你需要填 D:/img/test1.jpg</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">img_path = <span class="string">&#x27;1.png&#x27;</span></span><br><span class="line"><span class="comment"># content 是识别后得到的结果</span></span><br><span class="line">content = <span class="string">&quot;&quot;</span>.join(ocr(img_path))</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="built_in">print</span>(content)</span><br></pre></td></tr></table></figure><pre><code>《E.T.外星人》（英语：E.T.the ExtraTerrestria)是1982年美国科幻电影，由史蒂文·斯皮尔伯格执导并与凯瑟琳·肯尼迪起担任制片人，梅丽莎·马西森编剧，亨利·托马斯、迪·沃伦斯、罗伯特·麦克纳夫顿(Robert MacNaughton)、德鲁·巴里摩尔和彼德·考约特主演。讲述了名叫埃利奥特的内向男孩与被困在地球的善良外星人成为朋友的故事。埃利奥特给外星人起名叫“ET”(英文“extraterrestrial”的简称，意为外星人)，他与自己的哥哥和妹妹联合起来帮助外星人找到回家的路，并且还要避免被母亲及政府发现。</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用Python快速实现图片文字识别&lt;/p&gt;</summary>
    
    
    
    <category term="机器视觉" scheme="https://du2279664786.github.io/categories/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89/"/>
    
    
    <category term="机器视觉" scheme="https://du2279664786.github.io/tags/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89/"/>
    
    <category term="期末考试" scheme="https://du2279664786.github.io/tags/%E6%9C%9F%E6%9C%AB%E8%80%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>图像增加噪声的代码</title>
    <link href="https://du2279664786.github.io/posts/95e1962a.html"/>
    <id>https://du2279664786.github.io/posts/95e1962a.html</id>
    <published>2022-12-21T14:55:10.000Z</published>
    <updated>2022-12-21T07:41:09.983Z</updated>
    
    <content type="html"><![CDATA[<p>图像增加噪声的代码</p><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#读取图片</span></span><br><span class="line">img = cv2.imread(<span class="string">&quot;test.jpg&quot;</span>, cv2.IMREAD_UNCHANGED)</span><br><span class="line">rows, cols, chn = img.shape</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#加噪声</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5000</span>):    </span><br><span class="line">    x = np.random.randint(<span class="number">0</span>, rows) </span><br><span class="line">    y = np.random.randint(<span class="number">0</span>, cols)    </span><br><span class="line">    img[x,y,:] = <span class="number">255</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cv2.imshow(<span class="string">&quot;noise&quot;</span>, img)</span><br><span class="line"></span><br><span class="line"><span class="comment">#等待显示</span></span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;图像增加噪声的代码&lt;/p&gt;</summary>
    
    
    
    <category term="机器视觉" scheme="https://du2279664786.github.io/categories/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89/"/>
    
    
    <category term="机器视觉" scheme="https://du2279664786.github.io/tags/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89/"/>
    
    <category term="期末考试" scheme="https://du2279664786.github.io/tags/%E6%9C%9F%E6%9C%AB%E8%80%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>均值滤波</title>
    <link href="https://du2279664786.github.io/posts/46aaa473.html"/>
    <id>https://du2279664786.github.io/posts/46aaa473.html</id>
    <published>2022-12-21T14:55:10.000Z</published>
    <updated>2022-12-21T07:41:09.978Z</updated>
    
    <content type="html"><![CDATA[<p>均值滤波</p><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#encoding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> cv2  </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment">#读取图片</span></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;test01.png&#x27;</span>)</span><br><span class="line">source = cv2.cvtColor(img,cv2.COLOR_BGR2RGB)</span><br><span class="line"></span><br><span class="line"><span class="comment">#均值滤波</span></span><br><span class="line">result = cv2.blur(source, (<span class="number">5</span>,<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#显示图形</span></span><br><span class="line">titles = [<span class="string">&#x27;Source Image&#x27;</span>, <span class="string">&#x27;Blur Image&#x27;</span>]  </span><br><span class="line">images = [source, result]  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">2</span>):  </span><br><span class="line">   plt.subplot(<span class="number">1</span>,<span class="number">2</span>,i+<span class="number">1</span>), plt.imshow(images[i], <span class="string">&#x27;gray&#x27;</span>)  </span><br><span class="line">   plt.title(titles[i])  </span><br><span class="line">   plt.xticks([]),plt.yticks([])  </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;均值滤波&lt;/p&gt;</summary>
    
    
    
    <category term="机器视觉" scheme="https://du2279664786.github.io/categories/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89/"/>
    
    
    <category term="机器视觉" scheme="https://du2279664786.github.io/tags/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89/"/>
    
    <category term="期末考试" scheme="https://du2279664786.github.io/tags/%E6%9C%9F%E6%9C%AB%E8%80%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>增强对比度</title>
    <link href="https://du2279664786.github.io/posts/8db3b8ea.html"/>
    <id>https://du2279664786.github.io/posts/8db3b8ea.html</id>
    <published>2022-12-21T14:55:10.000Z</published>
    <updated>2022-12-21T07:41:09.985Z</updated>
    
    <content type="html"><![CDATA[<p>增强对比度</p><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">对比度增强</span><br><span class="line"></span><br><span class="line">cv2.calcHist(images, channels, mask, histSize, ranges[, hist[, accumulate ]])  <span class="comment">#图像直方图</span></span><br><span class="line"></span><br><span class="line">cv2.normalize(src[, dst[, alpha[, beta[, norm_type[, dtype[, mask]]]]]]) → dst   <span class="comment">#直方图归一化</span></span><br><span class="line"></span><br><span class="line">cv2.equalizeHist(image)   <span class="comment">#直方图均衡化</span></span><br><span class="line"></span><br><span class="line">cv2.createCLAHE(clipLimit, tileGridSize)<span class="comment">#创建clahe对象，限制对比度</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#(1)灰度直方图</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#代码实现：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#灰度直方图</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义caleGrayHist函数来计算灰度直方图</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">caleGrayHist</span>(<span class="params">image</span>):</span><br><span class="line"></span><br><span class="line"><span class="comment">#灰度图像的高、宽</span></span><br><span class="line"></span><br><span class="line">rows, cols = image.shape</span><br><span class="line"></span><br><span class="line"><span class="comment">#存储灰度直方图</span></span><br><span class="line"></span><br><span class="line">grayHist = np.zeros([<span class="number">256</span>], np.uint64) <span class="comment">#图像的灰度级范围是0~255</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(rows):</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(cols):</span><br><span class="line"></span><br><span class="line">grayHist[image[r][c]] +=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> grayHist</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">r&#x27;C:\Users\x\Desktop\2.jpg&#x27;</span>, cv2.IMREAD_GRAYSCALE)</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算灰度直方图</span></span><br><span class="line"></span><br><span class="line">grayHist = caleGrayHist(img)</span><br><span class="line"></span><br><span class="line"><span class="comment">#画出直方图</span></span><br><span class="line"></span><br><span class="line">x_range = <span class="built_in">range</span>(<span class="number">256</span>)</span><br><span class="line"></span><br><span class="line">plt.plot(x_range, grayHist, <span class="string">&#x27;r&#x27;</span>, linewidth=<span class="number">1.5</span>, c=<span class="string">&#x27;orange&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置坐标轴的范围</span></span><br><span class="line"></span><br><span class="line">y_maxValue = np.<span class="built_in">max</span>(grayHist)</span><br><span class="line"></span><br><span class="line">plt.axis([<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>, y_maxValue]) <span class="comment">#画图范围</span></span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">&quot;gray Level&quot;</span>)</span><br><span class="line"></span><br><span class="line">plt.ylabel(<span class="string">&quot;number of pixels&quot;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;增强对比度&lt;/p&gt;</summary>
    
    
    
    <category term="机器视觉" scheme="https://du2279664786.github.io/categories/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89/"/>
    
    
    <category term="机器视觉" scheme="https://du2279664786.github.io/tags/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89/"/>
    
    <category term="期末考试" scheme="https://du2279664786.github.io/tags/%E6%9C%9F%E6%9C%AB%E8%80%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>小波变换</title>
    <link href="https://du2279664786.github.io/posts/34569913.html"/>
    <id>https://du2279664786.github.io/posts/34569913.html</id>
    <published>2022-12-21T14:55:10.000Z</published>
    <updated>2022-12-21T07:41:09.987Z</updated>
    
    <content type="html"><![CDATA[<p>小波变换</p><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pywt</span><br><span class="line"><span class="keyword">from</span> matplotlib.font_manager <span class="keyword">import</span> FontProperties</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sampling_rate = <span class="number">1024</span></span><br><span class="line">t = np.arange(<span class="number">0</span>, <span class="number">1.0</span>, <span class="number">1.0</span> / sampling_rate)</span><br><span class="line">f1 = <span class="number">100</span></span><br><span class="line">f2 = <span class="number">200</span></span><br><span class="line">f3 = <span class="number">300</span></span><br><span class="line">data = np.piecewise(t, [t &lt; <span class="number">1</span>, t &lt; <span class="number">0.8</span>, t &lt; <span class="number">0.3</span>],</span><br><span class="line">                    [<span class="keyword">lambda</span> t: np.sin(<span class="number">2</span> * np.pi * f1 * t), <span class="keyword">lambda</span> t: np.sin(<span class="number">2</span> * np.pi * f2 * t),</span><br><span class="line">                     <span class="keyword">lambda</span> t: np.sin(<span class="number">2</span> * np.pi * f3 * t)])</span><br><span class="line">wavename = <span class="string">&#x27;cgau8&#x27;</span></span><br><span class="line">totalscal = <span class="number">256</span></span><br><span class="line">fc = pywt.central_frequency(wavename)</span><br><span class="line">cparam = <span class="number">2</span> * fc * totalscal</span><br><span class="line">scales = cparam / np.arange(totalscal, <span class="number">1</span>, -<span class="number">1</span>)</span><br><span class="line">[cwtmatr, frequencies] = pywt.cwt(data, scales, wavename, <span class="number">1.0</span> / sampling_rate)</span><br><span class="line">plt.figure(figsize=(<span class="number">8</span>, <span class="number">4</span>))</span><br><span class="line">plt.subplot(<span class="number">211</span>)</span><br><span class="line">plt.plot(t, data)</span><br><span class="line">plt.xlabel(<span class="string">u&quot;time(s)&quot;</span>)</span><br><span class="line">plt.title(<span class="string">u&quot;300Hz 200Hz 100Hz Time spectrum&quot;</span>)</span><br><span class="line">plt.subplot(<span class="number">212</span>)</span><br><span class="line">plt.contourf(t, frequencies, <span class="built_in">abs</span>(cwtmatr))</span><br><span class="line">plt.ylabel(<span class="string">u&quot;freq(Hz)&quot;</span>)</span><br><span class="line">plt.xlabel(<span class="string">u&quot;time(s)&quot;</span>)</span><br><span class="line">plt.subplots_adjust(hspace=<span class="number">0.4</span>)</span><br><span class="line">plt.show()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;exit&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="/output_1_0.png" alt="png"></p><pre><code>exit</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;小波变换&lt;/p&gt;</summary>
    
    
    
    <category term="机器视觉" scheme="https://du2279664786.github.io/categories/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89/"/>
    
    
    <category term="机器视觉" scheme="https://du2279664786.github.io/tags/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89/"/>
    
    <category term="期末考试" scheme="https://du2279664786.github.io/tags/%E6%9C%9F%E6%9C%AB%E8%80%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>水平翻转</title>
    <link href="https://du2279664786.github.io/posts/d631aaf8.html"/>
    <id>https://du2279664786.github.io/posts/d631aaf8.html</id>
    <published>2022-12-21T14:55:10.000Z</published>
    <updated>2022-12-21T07:41:09.990Z</updated>
    
    <content type="html"><![CDATA[<p>水平翻转</p><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#   扩充：  水平翻转</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"> </span><br><span class="line">img = cv2.imread(<span class="string">&#x27;cat.jpg&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bgr2rbg</span>(<span class="params">img</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        将颜色空间从BGR转换为RBG</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> img[:,:,::-<span class="number">1</span>]</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 水平翻转</span></span><br><span class="line">flip_h = cv2.flip(img, <span class="number">1</span>)</span><br><span class="line"><span class="comment"># 垂直翻转</span></span><br><span class="line">flip_v = cv2.flip(img, <span class="number">0</span>)</span><br><span class="line"><span class="comment"># 同时水平翻转与垂直翻转</span></span><br><span class="line">flip_hv = cv2.flip(img, -<span class="number">1</span>)</span><br><span class="line"> </span><br><span class="line">plt.subplot(<span class="number">221</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;SRC&#x27;</span>)</span><br><span class="line">plt.imshow(bgr2rbg(img))</span><br><span class="line"> </span><br><span class="line">plt.subplot(<span class="number">222</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Horizontally&#x27;</span>)</span><br><span class="line">plt.imshow(bgr2rbg(flip_h))</span><br><span class="line"> </span><br><span class="line">plt.subplot(<span class="number">223</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Vertically&#x27;</span>)</span><br><span class="line">plt.imshow(bgr2rbg(flip_v))</span><br><span class="line"> </span><br><span class="line">plt.subplot(<span class="number">224</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Horizontally &amp; Vertically&#x27;</span>)</span><br><span class="line">plt.imshow(bgr2rbg(flip_hv))</span><br><span class="line"> </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#   使用numpy的索引进行图像反转</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"> </span><br><span class="line">img = cv2.imread(<span class="string">&#x27;cat.jpg&#x27;</span>)</span><br><span class="line">height,width,channel = img.shape</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 水平翻转</span></span><br><span class="line">flip_h =  img[:,::-<span class="number">1</span>]</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 垂直翻转</span></span><br><span class="line">flip_v =  img[::-<span class="number">1</span>]</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 水平垂直同时翻转</span></span><br><span class="line">flip_hv =  img[::-<span class="number">1</span>, ::-<span class="number">1</span>]</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bgr2rbg</span>(<span class="params">img</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        将颜色空间从BGR转换为RBG</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> img[:,:,::-<span class="number">1</span>]</span><br><span class="line"> </span><br><span class="line">plt.subplot(<span class="number">221</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;SRC&#x27;</span>)</span><br><span class="line">plt.imshow(bgr2rbg(img))</span><br><span class="line"> </span><br><span class="line">plt.subplot(<span class="number">222</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Horizontally&#x27;</span>)</span><br><span class="line">plt.imshow(bgr2rbg(flip_h))</span><br><span class="line"> </span><br><span class="line">plt.subplot(<span class="number">223</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Vertically&#x27;</span>)</span><br><span class="line">plt.imshow(bgr2rbg(flip_v))</span><br><span class="line"> </span><br><span class="line">plt.subplot(<span class="number">224</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Horizontally &amp; Vertically&#x27;</span>)</span><br><span class="line">plt.imshow(bgr2rbg(flip_hv))</span><br><span class="line"> </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;水平翻转&lt;/p&gt;</summary>
    
    
    
    <category term="机器视觉" scheme="https://du2279664786.github.io/categories/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89/"/>
    
    
    <category term="机器视觉" scheme="https://du2279664786.github.io/tags/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89/"/>
    
    <category term="期末考试" scheme="https://du2279664786.github.io/tags/%E6%9C%9F%E6%9C%AB%E8%80%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>直方图均衡化python实现暗通道去雾算法的示例</title>
    <link href="https://du2279664786.github.io/posts/bdb10fc5.html"/>
    <id>https://du2279664786.github.io/posts/bdb10fc5.html</id>
    <published>2022-12-21T14:55:10.000Z</published>
    <updated>2022-12-21T07:41:09.993Z</updated>
    
    <content type="html"><![CDATA[<p>直方图均衡化python实现暗通道去雾算法的示例</p><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直方图均衡化</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">equalHist_demo</span>(<span class="params">image</span>):</span><br><span class="line">    gray = cv.cvtColor(image,cv.COLOR_BGR2GRAY)</span><br><span class="line">    <span class="comment"># 全局直方图均衡化，用于增强图像对比度，即黑的更黑，白的更白</span></span><br><span class="line">    dst = cv.equalizeHist(gray)</span><br><span class="line">    cv.imshow(<span class="string">&quot;equalHist_demo&quot;</span>, dst)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  python实现暗通道去雾算法的示例</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">zmMinFilterGray</span>(<span class="params">src, r=<span class="number">7</span></span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;最小值滤波，r是滤波器半径&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;if r &lt;= 0:</span></span><br><span class="line"><span class="string">      return src</span></span><br><span class="line"><span class="string">    h, w = src.shape[:2]</span></span><br><span class="line"><span class="string">    I = src</span></span><br><span class="line"><span class="string">    res = np.minimum(I , I[[0]+range(h-1) , :])</span></span><br><span class="line"><span class="string">    res = np.minimum(res, I[range(1,h)+[h-1], :])</span></span><br><span class="line"><span class="string">    I = res</span></span><br><span class="line"><span class="string">    res = np.minimum(I , I[:, [0]+range(w-1)])</span></span><br><span class="line"><span class="string">    res = np.minimum(res, I[:, range(1,w)+[w-1]])</span></span><br><span class="line"><span class="string">    return zmMinFilterGray(res, r-1)&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> cv2.erode(src, np.ones((<span class="number">2</span> * r + <span class="number">1</span>, <span class="number">2</span> * r + <span class="number">1</span>)))  <span class="comment"># 使用opencv的erode函数更高效</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">guidedfilter</span>(<span class="params">I, p, r, eps</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;引导滤波，直接参考网上的matlab代码&#x27;&#x27;&#x27;</span></span><br><span class="line">    height, width = I.shape</span><br><span class="line">    m_I = cv2.boxFilter(I, -<span class="number">1</span>, (r, r))</span><br><span class="line">    m_p = cv2.boxFilter(p, -<span class="number">1</span>, (r, r))</span><br><span class="line">    m_Ip = cv2.boxFilter(I * p, -<span class="number">1</span>, (r, r))</span><br><span class="line">    cov_Ip = m_Ip - m_I * m_p</span><br><span class="line"></span><br><span class="line">    m_II = cv2.boxFilter(I * I, -<span class="number">1</span>, (r, r))</span><br><span class="line">    var_I = m_II - m_I * m_I</span><br><span class="line"></span><br><span class="line">    a = cov_Ip / (var_I + eps)</span><br><span class="line">    b = m_p - a * m_I</span><br><span class="line"></span><br><span class="line">    m_a = cv2.boxFilter(a, -<span class="number">1</span>, (r, r))</span><br><span class="line">    m_b = cv2.boxFilter(b, -<span class="number">1</span>, (r, r))</span><br><span class="line">    <span class="keyword">return</span> m_a * I + m_b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getV1</span>(<span class="params">m, r, eps, w, maxV1</span>):  <span class="comment"># 输入rgb图像，值范围[0,1]</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;计算大气遮罩图像V1和光照值A, V1 = 1-t/A&#x27;&#x27;&#x27;</span></span><br><span class="line">    V1 = np.<span class="built_in">min</span>(m, <span class="number">2</span>)  <span class="comment"># 得到暗通道图像</span></span><br><span class="line">    V1 = guidedfilter(V1, zmMinFilterGray(V1, <span class="number">7</span>), r, eps)  <span class="comment"># 使用引导滤波优化</span></span><br><span class="line">    bins = <span class="number">2000</span></span><br><span class="line">    ht = np.histogram(V1, bins)  <span class="comment"># 计算大气光照A</span></span><br><span class="line">    d = np.cumsum(ht[<span class="number">0</span>]) / <span class="built_in">float</span>(V1.size)</span><br><span class="line">    <span class="keyword">for</span> lmax <span class="keyword">in</span> <span class="built_in">range</span>(bins - <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> d[lmax] &lt;= <span class="number">0.999</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    A = np.mean(m, <span class="number">2</span>)[V1 &gt;= ht[<span class="number">1</span>][lmax]].<span class="built_in">max</span>()</span><br><span class="line"></span><br><span class="line">    V1 = np.minimum(V1 * w, maxV1)  <span class="comment"># 对值范围进行限制</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> V1, A</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deHaze</span>(<span class="params">m, r=<span class="number">81</span>, eps=<span class="number">0.001</span>, w=<span class="number">0.95</span>, maxV1=<span class="number">0.80</span>, bGamma=<span class="literal">False</span></span>):</span><br><span class="line">    Y = np.zeros(m.shape)</span><br><span class="line">    V1, A = getV1(m, r, eps, w, maxV1)  <span class="comment"># 得到遮罩图像和大气光照</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        Y[:, :, k] = (m[:, :, k] - V1) / (<span class="number">1</span> - V1 / A)  <span class="comment"># 颜色校正</span></span><br><span class="line">    Y = np.clip(Y, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> bGamma:</span><br><span class="line">        Y = Y ** (np.log(<span class="number">0.5</span>) / np.log(Y.mean()))  <span class="comment"># gamma校正,默认不进行该操作</span></span><br><span class="line">    <span class="keyword">return</span> Y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    m = deHaze(cv2.imread(<span class="string">&#x27;E:/apple.jpg&#x27;</span>) / <span class="number">255.0</span>) * <span class="number">255</span></span><br><span class="line">    cv2.imwrite(<span class="string">&#x27;E:/defog.jpg&#x27;</span>, m)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;直方图均衡化python实现暗通道去雾算法的示例&lt;/p&gt;</summary>
    
    
    
    <category term="机器视觉" scheme="https://du2279664786.github.io/categories/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89/"/>
    
    
    <category term="机器视觉" scheme="https://du2279664786.github.io/tags/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89/"/>
    
    <category term="期末考试" scheme="https://du2279664786.github.io/tags/%E6%9C%9F%E6%9C%AB%E8%80%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>腐蚀与膨胀</title>
    <link href="https://du2279664786.github.io/posts/38130560.html"/>
    <id>https://du2279664786.github.io/posts/38130560.html</id>
    <published>2022-12-21T14:55:10.000Z</published>
    <updated>2022-12-21T07:41:09.994Z</updated>
    
    <content type="html"><![CDATA[<p>腐蚀与膨胀</p><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">腐蚀</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">kernel = np.ones(shape=(<span class="number">5</span>, <span class="number">5</span>))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">erode_bin_image</span>(<span class="params">bin_image, kernel</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    erode bin image</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        bin_image: image with 0,1 pixel value</span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        erode image</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    kernel_size = kernel.shape[<span class="number">0</span>]</span><br><span class="line">    bin_image = np.array(bin_image)</span><br><span class="line">    <span class="keyword">if</span> (kernel_size%<span class="number">2</span> == <span class="number">0</span>) <span class="keyword">or</span> kernel_size&lt;<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;kernel size must be odd and bigger than 1&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> (bin_image.<span class="built_in">max</span>() != <span class="number">1</span>) <span class="keyword">or</span> (bin_image.<span class="built_in">min</span>() != <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;input image&#x27;s pixel value must be 0 or 1&quot;</span>)</span><br><span class="line">    d_image = np.zeros(shape=bin_image.shape)</span><br><span class="line">    center_move = <span class="built_in">int</span>((kernel_size-<span class="number">1</span>)/<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(center_move, bin_image.shape[<span class="number">0</span>]-kernel_size+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(cen ter_move, bin_image.shape[<span class="number">1</span>]-kernel_size+<span class="number">1</span>):</span><br><span class="line">            d_image[i, j] = np.<span class="built_in">min</span>(bin_image[i-center_move:i+center_move,</span><br><span class="line">                                             j-center_move:j+center_move])</span><br><span class="line">    <span class="keyword">return</span> d_image</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">上述代码实现的就是卷积操作，其中第一个<span class="keyword">if</span>语句用来判断卷积核尺寸是不是奇数并且正整数，</span><br><span class="line">第二个<span class="keyword">if</span>用来判断输入图像是不是灰度图像，如果不满足这两者就会抛出Error。</span><br><span class="line">接下来的双层循环是模板在图像以步长为<span class="number">1</span>进行移动，并选取最小值过程。</span><br><span class="line">用来调用函数并绘图的代码如下：</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">e_image = erode_bin_image(bin_image, kernel)</span><br><span class="line">plot_image = [bin_image, e_image]</span><br><span class="line">plot_title = [<span class="string">&quot;original image&quot;</span>, <span class="string">&quot;erode image&quot;</span>]</span><br><span class="line">plt.figure()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(plot_image)+<span class="number">1</span>):</span><br><span class="line">    plt.subplot(<span class="number">1</span>, <span class="built_in">len</span>(plot_image), i)</span><br><span class="line">    plt.imshow(plot_image[i-<span class="number">1</span>], cmap=<span class="string">&quot;gray&quot;</span>)</span><br><span class="line">    plt.title(plot_title[i-<span class="number">1</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">膨胀</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">kernel = np.ones(shape=(<span class="number">13</span>, <span class="number">13</span>))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dilate_bin_image</span>(<span class="params">bin_image, kernel</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    dilate bin image</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        bin_image: image with 0,1 pixel value</span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        dilate image</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    kernel_size = kernel.shape[<span class="number">0</span>]</span><br><span class="line">    bin_image = np.array(bin_image)</span><br><span class="line">    <span class="keyword">if</span> (kernel_size%<span class="number">2</span> == <span class="number">0</span>) <span class="keyword">or</span> kernel_size&lt;<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;kernel size must be odd and bigger than 1&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> (bin_image.<span class="built_in">max</span>() != <span class="number">1</span>) <span class="keyword">or</span> (bin_image.<span class="built_in">min</span>() != <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;input image&#x27;s pixel value must be 0 or 1&quot;</span>)</span><br><span class="line">    d_image = np.zeros(shape=bin_image.shape)</span><br><span class="line">    center_move = <span class="built_in">int</span>((kernel_size-<span class="number">1</span>)/<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(center_move, bin_image.shape[<span class="number">0</span>]-kernel_size+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(center_move, bin_image.shape[<span class="number">1</span>]-kernel_size+<span class="number">1</span>):</span><br><span class="line">            d_image[i, j] = np.<span class="built_in">max</span>(bin_image[i-center_move:i+center_move,j-center_move:j+center_move])</span><br><span class="line">    <span class="keyword">return</span> d_image</span><br><span class="line">d_image = dilate_bin_image(bin_image, kernel)</span><br><span class="line">plot_image = [bin_image, d_image]</span><br><span class="line">plot_title = [<span class="string">&quot;original image&quot;</span>, <span class="string">&quot;dilate image&quot;</span>]</span><br><span class="line">plt.figure()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(plot_image)+<span class="number">1</span>):</span><br><span class="line">    plt.subplot(<span class="number">1</span>, <span class="built_in">len</span>(plot_image), i)</span><br><span class="line">    plt.imshow(plot_image[i-<span class="number">1</span>], cmap=<span class="string">&quot;gray&quot;</span>)</span><br><span class="line">    plt.title(plot_title[i-<span class="number">1</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;腐蚀与膨胀&lt;/p&gt;</summary>
    
    
    
    <category term="机器视觉" scheme="https://du2279664786.github.io/categories/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89/"/>
    
    
    <category term="机器视觉" scheme="https://du2279664786.github.io/tags/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89/"/>
    
    <category term="期末考试" scheme="https://du2279664786.github.io/tags/%E6%9C%9F%E6%9C%AB%E8%80%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>调取本地摄像头拍照</title>
    <link href="https://du2279664786.github.io/posts/9664de52.html"/>
    <id>https://du2279664786.github.io/posts/9664de52.html</id>
    <published>2022-12-21T14:55:10.000Z</published>
    <updated>2022-12-21T07:41:09.996Z</updated>
    
    <content type="html"><![CDATA[<p>调取本地摄像头拍照</p><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-------------------------------------#</span></span><br><span class="line"><span class="comment">#   调用摄像头或者视频进行检测</span></span><br><span class="line"><span class="comment">#   调用摄像头直接运行即可</span></span><br><span class="line"><span class="comment">#   调用视频可以将cv2.VideoCapture()指定路径</span></span><br><span class="line"><span class="comment">#   视频的保存并不难，可以百度一下看看</span></span><br><span class="line"><span class="comment">#-------------------------------------#</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> yolo <span class="keyword">import</span> YOLO</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> GrabImage <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">yolo = YOLO()</span><br><span class="line"><span class="comment">#-------------------------------------#</span></span><br><span class="line"><span class="comment">#   调用摄像头</span></span><br><span class="line"><span class="comment">#   capture=cv2.VideoCapture(&quot;1.mp4&quot;)</span></span><br><span class="line"><span class="comment">#-------------------------------------#</span></span><br><span class="line">capture=cv2.VideoCapture(<span class="number">0</span>)</span><br><span class="line">fps = <span class="number">0.0</span></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">    t1 = time.time()</span><br><span class="line">    <span class="comment"># 读取某一帧</span></span><br><span class="line">    ref,frame=capture.read()</span><br><span class="line">    <span class="comment"># 格式转变，BGRtoRGB</span></span><br><span class="line">    frame = cv2.cvtColor(frame,cv2.COLOR_BGR2RGB)</span><br><span class="line">    <span class="comment"># 转变成Imag</span></span><br><span class="line">    frame = Image.fromarray(np.uint8(frame))</span><br><span class="line">    <span class="comment"># 进行检测</span></span><br><span class="line">    frame = np.array(yolo.detect_image(frame))</span><br><span class="line">    <span class="comment"># RGBtoBGR满足opencv显示格式</span></span><br><span class="line">    frame = cv2.cvtColor(frame,cv2.COLOR_RGB2BGR)</span><br><span class="line"></span><br><span class="line">    fps  = ( fps + (<span class="number">1.</span>/(time.time()-t1)) ) / <span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;fps= %.2f&quot;</span>%(fps))</span><br><span class="line">    <span class="built_in">print</span>(np.shape(frame))</span><br><span class="line">    frame = cv2.putText(frame, <span class="string">&quot;fps= %.2f&quot;</span>%(fps), (<span class="number">0</span>, <span class="number">40</span>), cv2.FONT_HERSHEY_SIMPLEX, <span class="number">1</span>, (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    cv2.imshow(<span class="string">&quot;video&quot;</span>,frame)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    c= cv2.waitKey(<span class="number">1</span>) &amp; <span class="number">0xff</span> </span><br><span class="line">    <span class="keyword">if</span> c==<span class="number">27</span>:</span><br><span class="line">        capture.release()</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;调取本地摄像头拍照&lt;/p&gt;</summary>
    
    
    
    <category term="机器视觉" scheme="https://du2279664786.github.io/categories/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89/"/>
    
    
    <category term="机器视觉" scheme="https://du2279664786.github.io/tags/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89/"/>
    
    <category term="期末考试" scheme="https://du2279664786.github.io/tags/%E6%9C%9F%E6%9C%AB%E8%80%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>调取电脑摄像机摄像头</title>
    <link href="https://du2279664786.github.io/posts/eaeaaae1.html"/>
    <id>https://du2279664786.github.io/posts/eaeaaae1.html</id>
    <published>2022-12-21T14:55:10.000Z</published>
    <updated>2022-12-21T07:41:09.999Z</updated>
    
    <content type="html"><![CDATA[<p>调取电脑摄像机</p><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">cap = cv2.VideoCapture(<span class="number">0</span>)</span><br><span class="line">f, frame = cap.read() <span class="comment">#此刻拍照</span></span><br><span class="line">cv2.imwrite(<span class="string">&quot;example.png&quot;</span>, frame) <span class="comment"># 将拍摄内容保存为png图片</span></span><br><span class="line">cap.release() <span class="comment"># 关闭调用的摄像头</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##  此外，还可以将照片的颜色去掉，变成黑白照片。</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;调取电脑摄像机&lt;/p&gt;</summary>
    
    
    
    <category term="机器视觉" scheme="https://du2279664786.github.io/categories/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89/"/>
    
    
    <category term="机器视觉" scheme="https://du2279664786.github.io/tags/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89/"/>
    
    <category term="期末考试" scheme="https://du2279664786.github.io/tags/%E6%9C%9F%E6%9C%AB%E8%80%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>边缘与图像处理</title>
    <link href="https://du2279664786.github.io/posts/6d097016.html"/>
    <id>https://du2279664786.github.io/posts/6d097016.html</id>
    <published>2022-12-21T14:55:10.000Z</published>
    <updated>2022-12-21T07:41:10.001Z</updated>
    
    <content type="html"><![CDATA[<p>边缘与图像处理</p><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> skimage <span class="keyword">import</span> measure,draw </span><br><span class="line"></span><br><span class="line"><span class="comment">#生成二值测试图像</span></span><br><span class="line">img=np.zeros([<span class="number">100</span>,<span class="number">100</span>])</span><br><span class="line">img[<span class="number">20</span>:<span class="number">40</span>,<span class="number">60</span>:<span class="number">80</span>]=<span class="number">1</span>  <span class="comment">#矩形</span></span><br><span class="line">rr,cc=draw.circle(<span class="number">60</span>,<span class="number">60</span>,<span class="number">10</span>)  <span class="comment">#小圆</span></span><br><span class="line">rr1,cc1=draw.circle(<span class="number">20</span>,<span class="number">30</span>,<span class="number">15</span>) <span class="comment">#大圆</span></span><br><span class="line">img[rr,cc]=<span class="number">1</span></span><br><span class="line">img[rr1,cc1]=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#检测所有图形的轮廓</span></span><br><span class="line">contours = measure.find_contours(img, <span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#绘制轮廓</span></span><br><span class="line">fig, (ax0,ax1) = plt.subplots(<span class="number">1</span>,<span class="number">2</span>,figsize=(<span class="number">8</span>,<span class="number">8</span>))</span><br><span class="line">ax0.imshow(img,plt.cm.gray)</span><br><span class="line">ax1.imshow(img,plt.cm.gray)</span><br><span class="line"><span class="keyword">for</span> n, contour <span class="keyword">in</span> <span class="built_in">enumerate</span>(contours):</span><br><span class="line">    ax1.plot(contour[:, <span class="number">1</span>], contour[:, <span class="number">0</span>], linewidth=<span class="number">2</span>)</span><br><span class="line">ax1.axis(<span class="string">&#x27;image&#x27;</span>)</span><br><span class="line">ax1.set_xticks([])</span><br><span class="line">ax1.set_yticks([])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/output_1_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> skimage <span class="keyword">import</span> measure,data,color</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成二值测试图像</span></span><br><span class="line">img=color.rgb2gray(data.horse())</span><br><span class="line"></span><br><span class="line"><span class="comment">#检测所有图形的轮廓</span></span><br><span class="line">contours = measure.find_contours(img, <span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#绘制轮廓</span></span><br><span class="line">fig, axes = plt.subplots(<span class="number">1</span>,<span class="number">2</span>,figsize=(<span class="number">8</span>,<span class="number">8</span>))</span><br><span class="line">ax0, ax1= axes.ravel()</span><br><span class="line">ax0.imshow(img,plt.cm.gray)</span><br><span class="line">ax0.set_title(<span class="string">&#x27;original image&#x27;</span>)</span><br><span class="line"></span><br><span class="line">rows,cols=img.shape</span><br><span class="line">ax1.axis([<span class="number">0</span>,rows,cols,<span class="number">0</span>])</span><br><span class="line"><span class="keyword">for</span> n, contour <span class="keyword">in</span> <span class="built_in">enumerate</span>(contours):</span><br><span class="line">    ax1.plot(contour[:, <span class="number">1</span>], contour[:, <span class="number">0</span>], linewidth=<span class="number">2</span>)</span><br><span class="line">ax1.axis(<span class="string">&#x27;image&#x27;</span>)</span><br><span class="line">ax1.set_title(<span class="string">&#x27;contours&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/output_2_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> skimage <span class="keyword">import</span> measure,data,color</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成二值测试图像</span></span><br><span class="line">hand = np.array([[<span class="number">1.64516129</span>, <span class="number">1.16145833</span>],</span><br><span class="line">                 [<span class="number">1.64516129</span>, <span class="number">1.59375</span>],</span><br><span class="line">                 [<span class="number">1.35080645</span>, <span class="number">1.921875</span>],</span><br><span class="line">                 [<span class="number">1.375</span>, <span class="number">2.18229167</span>],</span><br><span class="line">                 [<span class="number">1.68548387</span>, <span class="number">1.9375</span>],</span><br><span class="line">                 [<span class="number">1.60887097</span>, <span class="number">2.55208333</span>],</span><br><span class="line">                 [<span class="number">1.68548387</span>, <span class="number">2.69791667</span>],</span><br><span class="line">                 [<span class="number">1.76209677</span>, <span class="number">2.56770833</span>],</span><br><span class="line">                 [<span class="number">1.83064516</span>, <span class="number">1.97395833</span>],</span><br><span class="line">                 [<span class="number">1.89516129</span>, <span class="number">2.75</span>],</span><br><span class="line">                 [<span class="number">1.9516129</span>, <span class="number">2.84895833</span>],</span><br><span class="line">                 [<span class="number">2.01209677</span>, <span class="number">2.76041667</span>],</span><br><span class="line">                 [<span class="number">1.99193548</span>, <span class="number">1.99479167</span>],</span><br><span class="line">                 [<span class="number">2.11290323</span>, <span class="number">2.63020833</span>],</span><br><span class="line">                 [<span class="number">2.2016129</span>, <span class="number">2.734375</span>],</span><br><span class="line">                 [<span class="number">2.25403226</span>, <span class="number">2.60416667</span>],</span><br><span class="line">                 [<span class="number">2.14919355</span>, <span class="number">1.953125</span>],</span><br><span class="line">                 [<span class="number">2.30645161</span>, <span class="number">2.36979167</span>],</span><br><span class="line">                 [<span class="number">2.39112903</span>, <span class="number">2.36979167</span>],</span><br><span class="line">                 [<span class="number">2.41532258</span>, <span class="number">2.1875</span>],</span><br><span class="line">                 [<span class="number">2.1733871</span>, <span class="number">1.703125</span>],</span><br><span class="line">                 [<span class="number">2.07782258</span>, <span class="number">1.16666667</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment">#检测所有图形的轮廓</span></span><br><span class="line">new_hand = hand.copy()</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    new_hand =measure.subdivide_polygon(new_hand, degree=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># approximate subdivided polygon with Douglas-Peucker algorithm</span></span><br><span class="line">appr_hand =measure.approximate_polygon(new_hand, tolerance=<span class="number">0.02</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Number of coordinates:&quot;</span>, <span class="built_in">len</span>(hand), <span class="built_in">len</span>(new_hand), <span class="built_in">len</span>(appr_hand))</span><br><span class="line"></span><br><span class="line">fig, axes= plt.subplots(<span class="number">2</span>,<span class="number">2</span>, figsize=(<span class="number">9</span>, <span class="number">8</span>))</span><br><span class="line">ax0,ax1,ax2,ax3=axes.ravel()</span><br><span class="line"></span><br><span class="line">ax0.plot(hand[:, <span class="number">0</span>], hand[:, <span class="number">1</span>],<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">ax0.set_title(<span class="string">&#x27;original hand&#x27;</span>)</span><br><span class="line">ax1.plot(new_hand[:, <span class="number">0</span>], new_hand[:, <span class="number">1</span>],<span class="string">&#x27;g&#x27;</span>)</span><br><span class="line">ax1.set_title(<span class="string">&#x27;subdivide_polygon&#x27;</span>)</span><br><span class="line">ax2.plot(appr_hand[:, <span class="number">0</span>], appr_hand[:, <span class="number">1</span>],<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">ax2.set_title(<span class="string">&#x27;approximate_polygon&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ax3.plot(hand[:, <span class="number">0</span>], hand[:, <span class="number">1</span>],<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">ax3.plot(new_hand[:, <span class="number">0</span>], new_hand[:, <span class="number">1</span>],<span class="string">&#x27;g&#x27;</span>)</span><br><span class="line">ax3.plot(appr_hand[:, <span class="number">0</span>], appr_hand[:, <span class="number">1</span>],<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">ax3.set_title(<span class="string">&#x27;all&#x27;</span>)</span><br></pre></td></tr></table></figure><pre><code>Number of coordinates: 22 642 26Text(0.5, 1.0, &#39;all&#39;)</code></pre><p><img src="/output_3_2.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;边缘与图像处理&lt;/p&gt;</summary>
    
    
    
    <category term="机器视觉" scheme="https://du2279664786.github.io/categories/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89/"/>
    
    
    <category term="机器视觉" scheme="https://du2279664786.github.io/tags/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89/"/>
    
    <category term="期末考试" scheme="https://du2279664786.github.io/tags/%E6%9C%9F%E6%9C%AB%E8%80%83%E8%AF%95/"/>
    
  </entry>
  
</feed>
